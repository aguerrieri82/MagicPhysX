// <auto-generated/>
#nullable enable
#pragma warning disable CS8600
#pragma warning disable CS8601
#pragma warning disable CS8602
#pragma warning disable CS8603
#pragma warning disable CS8604

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace PhysX
{

    public static unsafe class NativeMethodsGroupingExtensions
    {
        #region PhysX.PxDefaultAllocator(4)

        public static global::PhysX.PxFoundation* PhysxCreateFoundationWithAlloc(this ref global::PhysX.PxDefaultAllocator @allocator)
        {
            return NativeMethods.physx_create_foundation_with_alloc((global::PhysX.PxDefaultAllocator*)Unsafe.AsPointer(ref @allocator));
        }

        public static void* AllocateMut(this ref global::PhysX.PxDefaultAllocator @self_, nuint @size, byte* @anon_param1, byte* @anon_param2, int @anon_param3)
        {
            return NativeMethods.PxDefaultAllocator_allocate_mut((global::PhysX.PxDefaultAllocator*)Unsafe.AsPointer(ref @self_), @size, @anon_param1, @anon_param2, @anon_param3);
        }

        public static void DeallocateMut(this ref global::PhysX.PxDefaultAllocator @self_, void* @ptr)
        {
            NativeMethods.PxDefaultAllocator_deallocate_mut((global::PhysX.PxDefaultAllocator*)Unsafe.AsPointer(ref @self_), @ptr);
        }

        public static void Delete(this ref global::PhysX.PxDefaultAllocator @self_)
        {
            NativeMethods.PxDefaultAllocator_delete((global::PhysX.PxDefaultAllocator*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxFoundation(14)

        public static global::PhysX.PxPhysics* PhysxCreatePhysics(this ref global::PhysX.PxFoundation @foundation)
        {
            return NativeMethods.physx_create_physics((global::PhysX.PxFoundation*)Unsafe.AsPointer(ref @foundation));
        }

        /// <summary>Destroys the instance it is called on.  The operation will fail, if there are still modules referencing the foundation object. Release all dependent modules prior to calling this method.</summary>
        public static void ReleaseMut(this ref global::PhysX.PxFoundation @self_)
        {
            NativeMethods.PxFoundation_release_mut((global::PhysX.PxFoundation*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>retrieves error callback</summary>
        public static global::PhysX.PxErrorCallback* GetErrorCallbackMut(this ref global::PhysX.PxFoundation @self_)
        {
            return NativeMethods.PxFoundation_getErrorCallback_mut((global::PhysX.PxFoundation*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Sets mask of errors to report.</summary>
        public static void SetErrorLevelMut(this ref global::PhysX.PxFoundation @self_, uint @mask)
        {
            NativeMethods.PxFoundation_setErrorLevel_mut((global::PhysX.PxFoundation*)Unsafe.AsPointer(ref @self_), @mask);
        }

        /// <summary>Retrieves mask of errors to be reported.</summary>
        public static uint GetErrorLevel(this ref global::PhysX.PxFoundation @self_)
        {
            return NativeMethods.PxFoundation_getErrorLevel((global::PhysX.PxFoundation*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Retrieves the allocator this object was created with.</summary>
        public static global::PhysX.PxAllocatorCallback* GetAllocatorCallbackMut(this ref global::PhysX.PxFoundation @self_)
        {
            return NativeMethods.PxFoundation_getAllocatorCallback_mut((global::PhysX.PxFoundation*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Retrieves if allocation names are being passed to allocator callback.</summary>
        public static bool GetReportAllocationNames(this ref global::PhysX.PxFoundation @self_)
        {
            return NativeMethods.PxFoundation_getReportAllocationNames((global::PhysX.PxFoundation*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Set if allocation names are being passed to allocator callback.  Enabled by default in debug and checked build, disabled by default in profile and release build.</summary>
        public static void SetReportAllocationNamesMut(this ref global::PhysX.PxFoundation @self_, bool @value)
        {
            NativeMethods.PxFoundation_setReportAllocationNames_mut((global::PhysX.PxFoundation*)Unsafe.AsPointer(ref @self_), @value);
        }

        public static void RegisterAllocationListenerMut(this ref global::PhysX.PxFoundation @self_, global::PhysX.PxAllocationListener* @listener)
        {
            NativeMethods.PxFoundation_registerAllocationListener_mut((global::PhysX.PxFoundation*)Unsafe.AsPointer(ref @self_), @listener);
        }

        public static void DeregisterAllocationListenerMut(this ref global::PhysX.PxFoundation @self_, global::PhysX.PxAllocationListener* @listener)
        {
            NativeMethods.PxFoundation_deregisterAllocationListener_mut((global::PhysX.PxFoundation*)Unsafe.AsPointer(ref @self_), @listener);
        }

        public static void RegisterErrorCallbackMut(this ref global::PhysX.PxFoundation @self_, global::PhysX.PxErrorCallback* @callback)
        {
            NativeMethods.PxFoundation_registerErrorCallback_mut((global::PhysX.PxFoundation*)Unsafe.AsPointer(ref @self_), @callback);
        }

        public static void DeregisterErrorCallbackMut(this ref global::PhysX.PxFoundation @self_, global::PhysX.PxErrorCallback* @callback)
        {
            NativeMethods.PxFoundation_deregisterErrorCallback_mut((global::PhysX.PxFoundation*)Unsafe.AsPointer(ref @self_), @callback);
        }

        public static void PhysPxSetFoundationInstance(this ref global::PhysX.PxFoundation @foundation)
        {
            NativeMethods.phys_PxSetFoundationInstance((global::PhysX.PxFoundation*)Unsafe.AsPointer(ref @foundation));
        }

        /// <summary>Create a pvd instance.</summary>
        public static global::PhysX.PxPvd* PhysPxCreatePvd(this ref global::PhysX.PxFoundation @foundation)
        {
            return NativeMethods.phys_PxCreatePvd((global::PhysX.PxFoundation*)Unsafe.AsPointer(ref @foundation));
        }

        #endregion

        #region PhysX.PxRigidActor(16)

        /// <summary>Destroy the returned callback object using PxQueryFilterCallback_delete.</summary>
        public static global::PhysX.PxQueryFilterCallback* CreateRaycastFilterCallback(this ref global::PhysX.PxRigidActor @actor_to_ignore)
        {
            return NativeMethods.create_raycast_filter_callback((global::PhysX.PxRigidActor*)Unsafe.AsPointer(ref @actor_to_ignore));
        }

        /// <summary>Deletes the rigid actor object.  Also releases any shapes associated with the actor.  Releasing an actor will affect any objects that are connected to the actor (constraint shaders like joints etc.). Such connected objects will be deleted upon scene deletion, or explicitly by the user by calling release() on these objects. It is recommended to always remove all objects that reference actors before the actors themselves are removed. It is not possible to retrieve list of dead connected objects.  Sleeping: This call will awaken any sleeping actors contacting the deleted actor (directly or indirectly).  Calls [`PxActor::release`]() so you might want to check the documentation of that method as well.</summary>
        public static void ReleaseMut(this ref global::PhysX.PxRigidActor @self_)
        {
            NativeMethods.PxRigidActor_release_mut((global::PhysX.PxRigidActor*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Returns the internal actor index.  This is only defined for actors that have been added to a scene.  The internal actor index, or 0xffffffff if the actor is not part of a scene.</summary>
        public static uint GetInternalActorIndex(this ref global::PhysX.PxRigidActor @self_)
        {
            return NativeMethods.PxRigidActor_getInternalActorIndex((global::PhysX.PxRigidActor*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Retrieves the actors world space transform.  The getGlobalPose() method retrieves the actor's current actor space to world space transformation.  It is not allowed to use this method while the simulation is running (except during PxScene::collide(), in PxContactModifyCallback or in contact report callbacks).  Global pose of object.</summary>
        public static global::PhysX.PxTransform GetGlobalPose(this ref global::PhysX.PxRigidActor @self_)
        {
            return NativeMethods.PxRigidActor_getGlobalPose((global::PhysX.PxRigidActor*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Method for setting an actor's pose in the world.  This method instantaneously changes the actor space to world space transformation.  This method is mainly for dynamic rigid bodies (see [`PxRigidDynamic`]). Calling this method on static actors is likely to result in a performance penalty, since internal optimization structures for static actors may need to be recomputed. In addition, moving static actors will not interact correctly with dynamic actors or joints.  To directly control an actor's position and have it correctly interact with dynamic bodies and joints, create a dynamic body with the PxRigidBodyFlag::eKINEMATIC flag, then use the setKinematicTarget() commands to define its path.  Even when moving dynamic actors, exercise restraint in making use of this method. Where possible, avoid:  moving actors into other actors, thus causing overlap (an invalid physical state)  moving an actor that is connected by a joint to another away from the other (thus causing joint error)  Sleeping: This call wakes dynamic actors if they are sleeping and the autowake parameter is true (default).</summary>
        public static void SetGlobalPoseMut(this ref global::PhysX.PxRigidActor @self_, global::PhysX.PxTransform* @pose, bool @autowake)
        {
            NativeMethods.PxRigidActor_setGlobalPose_mut((global::PhysX.PxRigidActor*)Unsafe.AsPointer(ref @self_), @pose, @autowake);
        }

        /// <summary>Attach a shape to an actor  This call will increment the reference count of the shape.  Mass properties of dynamic rigid actors will not automatically be recomputed to reflect the new mass distribution implied by the shape. Follow this call with a call to the PhysX extensions method [`PxRigidBodyExt::updateMassAndInertia`]() to do that.  Attaching a triangle mesh, heightfield or plane geometry shape configured as eSIMULATION_SHAPE is not supported for non-kinematic PxRigidDynamic instances.  Sleeping: Does NOT wake the actor up automatically.  True if success.</summary>
        public static bool AttachShapeMut(this ref global::PhysX.PxRigidActor @self_, global::PhysX.PxShape* @shape)
        {
            return NativeMethods.PxRigidActor_attachShape_mut((global::PhysX.PxRigidActor*)Unsafe.AsPointer(ref @self_), @shape);
        }

        /// <summary>Detach a shape from an actor.  This will also decrement the reference count of the PxShape, and if the reference count is zero, will cause it to be deleted.  Sleeping: Does NOT wake the actor up automatically.</summary>
        public static void DetachShapeMut(this ref global::PhysX.PxRigidActor @self_, global::PhysX.PxShape* @shape, bool @wakeOnLostTouch)
        {
            NativeMethods.PxRigidActor_detachShape_mut((global::PhysX.PxRigidActor*)Unsafe.AsPointer(ref @self_), @shape, @wakeOnLostTouch);
        }

        /// <summary>Returns the number of shapes assigned to the actor.  You can use [`getShapes`]() to retrieve the shape pointers.  Number of shapes associated with this actor.</summary>
        public static uint GetNbShapes(this ref global::PhysX.PxRigidActor @self_)
        {
            return NativeMethods.PxRigidActor_getNbShapes((global::PhysX.PxRigidActor*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Retrieve all the shape pointers belonging to the actor.  These are the shapes used by the actor for collision detection.  You can retrieve the number of shape pointers by calling [`getNbShapes`]()  Note: Removing shapes with [`PxShape::release`]() will invalidate the pointer of the released shape.  Number of shape pointers written to the buffer.</summary>
        public static uint GetShapes(this ref global::PhysX.PxRigidActor @self_, global::PhysX.PxShape** @userBuffer, uint @bufferSize, uint @startIndex)
        {
            return NativeMethods.PxRigidActor_getShapes((global::PhysX.PxRigidActor*)Unsafe.AsPointer(ref @self_), @userBuffer, @bufferSize, @startIndex);
        }

        /// <summary>Returns the number of constraint shaders attached to the actor.  You can use [`getConstraints`]() to retrieve the constraint shader pointers.  Number of constraint shaders attached to this actor.</summary>
        public static uint GetNbConstraints(this ref global::PhysX.PxRigidActor @self_)
        {
            return NativeMethods.PxRigidActor_getNbConstraints((global::PhysX.PxRigidActor*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Retrieve all the constraint shader pointers belonging to the actor.  You can retrieve the number of constraint shader pointers by calling [`getNbConstraints`]()  Note: Removing constraint shaders with [`PxConstraint::release`]() will invalidate the pointer of the released constraint.  Number of constraint shader pointers written to the buffer.</summary>
        public static uint GetConstraints(this ref global::PhysX.PxRigidActor @self_, global::PhysX.PxConstraint** @userBuffer, uint @bufferSize, uint @startIndex)
        {
            return NativeMethods.PxRigidActor_getConstraints((global::PhysX.PxRigidActor*)Unsafe.AsPointer(ref @self_), @userBuffer, @bufferSize, @startIndex);
        }

        public static global::PhysX.PxActorShape ActorShapeNew1(this ref global::PhysX.PxRigidActor @a, global::PhysX.PxShape* @s)
        {
            return NativeMethods.PxActorShape_new_1((global::PhysX.PxRigidActor*)Unsafe.AsPointer(ref @a), @s);
        }

        /// <summary>Creates a new shape with default properties and a list of materials and adds it to the list of shapes of this actor.  This is equivalent to the following  ```cpp // reference count is 1 PxShape* shape(...) = PxGetPhysics().createShape(...); // increments reference count actor-&gt;attachShape(shape); // releases user reference, leaving reference count at 1 shape-&gt;release(); ```  As a consequence, detachShape() will result in the release of the last reference, and the shape will be deleted.  The default shape flags to be set are: eVISUALIZATION, eSIMULATION_SHAPE, eSCENE_QUERY_SHAPE (see [`PxShapeFlag`]). Triangle mesh, heightfield or plane geometry shapes configured as eSIMULATION_SHAPE are not supported for non-kinematic PxRigidDynamic instances.  Creating compounds with a very large number of shapes may adversely affect performance and stability.  Sleeping: Does NOT wake the actor up automatically.  The newly created shape.</summary>
        public static global::PhysX.PxShape* ExtCreateExclusiveShape(this ref global::PhysX.PxRigidActor @actor, global::PhysX.PxGeometry* @geometry, global::PhysX.PxMaterial** @materials, ushort @materialCount, global::PhysX.PxShapeFlags @shapeFlags)
        {
            return NativeMethods.PxRigidActorExt_createExclusiveShape((global::PhysX.PxRigidActor*)Unsafe.AsPointer(ref @actor), @geometry, @materials, @materialCount, @shapeFlags);
        }

        /// <summary>Creates a new shape with default properties and a single material adds it to the list of shapes of this actor.  This is equivalent to the following  ```cpp // reference count is 1 PxShape* shape(...) = PxGetPhysics().createShape(...); // increments reference count actor-&gt;attachShape(shape); // releases user reference, leaving reference count at 1 shape-&gt;release(); ```  As a consequence, detachShape() will result in the release of the last reference, and the shape will be deleted.  The default shape flags to be set are: eVISUALIZATION, eSIMULATION_SHAPE, eSCENE_QUERY_SHAPE (see [`PxShapeFlag`]). Triangle mesh, heightfield or plane geometry shapes configured as eSIMULATION_SHAPE are not supported for non-kinematic PxRigidDynamic instances.  Creating compounds with a very large number of shapes may adversely affect performance and stability.  Sleeping: Does NOT wake the actor up automatically.  The newly created shape.</summary>
        public static global::PhysX.PxShape* ExtCreateExclusiveShape1(this ref global::PhysX.PxRigidActor @actor, global::PhysX.PxGeometry* @geometry, global::PhysX.PxMaterial* @material, global::PhysX.PxShapeFlags @shapeFlags)
        {
            return NativeMethods.PxRigidActorExt_createExclusiveShape_1((global::PhysX.PxRigidActor*)Unsafe.AsPointer(ref @actor), @geometry, @material, @shapeFlags);
        }

        /// <summary>Gets a list of bounds based on shapes in rigid actor. This list can be used to cook/create bounding volume hierarchy though PxCooking API.</summary>
        public static global::PhysX.PxBounds3* ExtGetRigidActorShapeLocalBoundsList(this ref global::PhysX.PxRigidActor @actor, uint* @numBounds)
        {
            return NativeMethods.PxRigidActorExt_getRigidActorShapeLocalBoundsList((global::PhysX.PxRigidActor*)Unsafe.AsPointer(ref @actor), @numBounds);
        }

        /// <summary>scale a rigid actor by a uniform scale  The geometry and relative positions of the actor are multiplied by the given scale value. If the actor is a rigid body or an articulation link and the scaleMassProps value is true, the mass properties are scaled assuming the density is constant: the center of mass is linearly scaled, the mass is multiplied by the cube of the scale, and the inertia tensor by the fifth power of the scale.</summary>
        public static void PhysPxScaleRigidActor(this ref global::PhysX.PxRigidActor @actor, float @scale, bool @scaleMassProps)
        {
            NativeMethods.phys_PxScaleRigidActor((global::PhysX.PxRigidActor*)Unsafe.AsPointer(ref @actor), @scale, @scaleMassProps);
        }

        #endregion

        #region PhysX.PxRaycastCallback(1)

        public static void DeleteRaycastCallback(this ref global::PhysX.PxRaycastCallback @callback)
        {
            NativeMethods.delete_raycast_callback((global::PhysX.PxRaycastCallback*)Unsafe.AsPointer(ref @callback));
        }

        #endregion

        #region PhysX.PxSweepCallback(1)

        public static void DeleteSweepCallback(this ref global::PhysX.PxSweepCallback @callback)
        {
            NativeMethods.delete_sweep_callback((global::PhysX.PxSweepCallback*)Unsafe.AsPointer(ref @callback));
        }

        #endregion

        #region PhysX.PxOverlapCallback(1)

        public static void DeleteOverlapCallback(this ref global::PhysX.PxOverlapCallback @callback)
        {
            NativeMethods.delete_overlap_callback((global::PhysX.PxOverlapCallback*)Unsafe.AsPointer(ref @callback));
        }

        #endregion

        #region PhysX.PxAllocatorCallback(7)

        public static void* GetAllocCallbackUserData(this ref global::PhysX.PxAllocatorCallback @alloc_callback)
        {
            return NativeMethods.get_alloc_callback_user_data((global::PhysX.PxAllocatorCallback*)Unsafe.AsPointer(ref @alloc_callback));
        }

        public static void Delete(this ref global::PhysX.PxAllocatorCallback @self_)
        {
            NativeMethods.PxAllocatorCallback_delete((global::PhysX.PxAllocatorCallback*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Allocates size bytes of memory, which must be 16-byte aligned.  This method should never return NULL.  If you run out of memory, then you should terminate the app or take some other appropriate action.  Threading: This function should be thread safe as it can be called in the context of the user thread and physics processing thread(s).  The allocated block of memory.</summary>
        public static void* AllocateMut(this ref global::PhysX.PxAllocatorCallback @self_, nuint @size, byte* @typeName, byte* @filename, int @line)
        {
            return NativeMethods.PxAllocatorCallback_allocate_mut((global::PhysX.PxAllocatorCallback*)Unsafe.AsPointer(ref @self_), @size, @typeName, @filename, @line);
        }

        /// <summary>Frees memory previously allocated by allocate().  Threading: This function should be thread safe as it can be called in the context of the user thread and physics processing thread(s).</summary>
        public static void DeallocateMut(this ref global::PhysX.PxAllocatorCallback @self_, void* @ptr)
        {
            NativeMethods.PxAllocatorCallback_deallocate_mut((global::PhysX.PxAllocatorCallback*)Unsafe.AsPointer(ref @self_), @ptr);
        }

        /// <summary>The default constructor.</summary>
        public static global::PhysX.PxBroadcastingAllocator* BroadcastingAllocatorNewAlloc(this ref global::PhysX.PxAllocatorCallback @allocator, global::PhysX.PxErrorCallback* @error)
        {
            return NativeMethods.PxBroadcastingAllocator_new_alloc((global::PhysX.PxAllocatorCallback*)Unsafe.AsPointer(ref @allocator), @error);
        }

        public static global::PhysX.PxDefaultMemoryOutputStream* DefaultMemoryOutputStreamNewAlloc(this ref global::PhysX.PxAllocatorCallback @allocator)
        {
            return NativeMethods.PxDefaultMemoryOutputStream_new_alloc((global::PhysX.PxAllocatorCallback*)Unsafe.AsPointer(ref @allocator));
        }

        public static global::PhysX.PxStringTable* StringTableExtCreateStringTable(this ref global::PhysX.PxAllocatorCallback @inAllocator)
        {
            return NativeMethods.PxStringTableExt_createStringTable((global::PhysX.PxAllocatorCallback*)Unsafe.AsPointer(ref @inAllocator));
        }

        #endregion

        #region PhysX.SimulationEventCallbackInfo(1)

        /// <summary>New interface to handle simulation events, replacing create_contact_callback.</summary>
        public static global::PhysX.PxSimulationEventCallback* CreateSimulationEventCallbacks(this ref global::PhysX.SimulationEventCallbackInfo @callbacks)
        {
            return NativeMethods.create_simulation_event_callbacks((global::PhysX.SimulationEventCallbackInfo*)Unsafe.AsPointer(ref @callbacks));
        }

        #endregion

        #region PhysX.PxSimulationEventCallback(9)

        public static global::PhysX.SimulationEventCallbackInfo* GetSimulationEventInfo(this ref global::PhysX.PxSimulationEventCallback @callback)
        {
            return NativeMethods.get_simulation_event_info((global::PhysX.PxSimulationEventCallback*)Unsafe.AsPointer(ref @callback));
        }

        public static void DestroySimulationEventCallbacks(this ref global::PhysX.PxSimulationEventCallback @callback)
        {
            NativeMethods.destroy_simulation_event_callbacks((global::PhysX.PxSimulationEventCallback*)Unsafe.AsPointer(ref @callback));
        }

        /// <summary>This is called when a breakable constraint breaks.  The user should not release the constraint shader inside this call!  No event will get reported if the constraint breaks but gets deleted while the time step is still being simulated.</summary>
        public static void OnConstraintBreakMut(this ref global::PhysX.PxSimulationEventCallback @self_, global::PhysX.PxConstraintInfo* @constraints, uint @count)
        {
            NativeMethods.PxSimulationEventCallback_onConstraintBreak_mut((global::PhysX.PxSimulationEventCallback*)Unsafe.AsPointer(ref @self_), @constraints, @count);
        }

        /// <summary>This is called with the actors which have just been woken up.  Only supported by rigid bodies yet.  Only called on actors for which the PxActorFlag eSEND_SLEEP_NOTIFIES has been set.  Only the latest sleep state transition happening between fetchResults() of the previous frame and fetchResults() of the current frame will get reported. For example, let us assume actor A is awake, then A-&gt;putToSleep() gets called, then later A-&gt;wakeUp() gets called. At the next simulate/fetchResults() step only an onWake() event will get triggered because that was the last transition.  If an actor gets newly added to a scene with properties such that it is awake and the sleep state does not get changed by the user or simulation, then an onWake() event will get sent at the next simulate/fetchResults() step.</summary>
        public static void OnWakeMut(this ref global::PhysX.PxSimulationEventCallback @self_, global::PhysX.PxActor** @actors, uint @count)
        {
            NativeMethods.PxSimulationEventCallback_onWake_mut((global::PhysX.PxSimulationEventCallback*)Unsafe.AsPointer(ref @self_), @actors, @count);
        }

        /// <summary>This is called with the actors which have just been put to sleep.  Only supported by rigid bodies yet.  Only called on actors for which the PxActorFlag eSEND_SLEEP_NOTIFIES has been set.  Only the latest sleep state transition happening between fetchResults() of the previous frame and fetchResults() of the current frame will get reported. For example, let us assume actor A is asleep, then A-&gt;wakeUp() gets called, then later A-&gt;putToSleep() gets called. At the next simulate/fetchResults() step only an onSleep() event will get triggered because that was the last transition (assuming the simulation does not wake the actor up).  If an actor gets newly added to a scene with properties such that it is asleep and the sleep state does not get changed by the user or simulation, then an onSleep() event will get sent at the next simulate/fetchResults() step.</summary>
        public static void OnSleepMut(this ref global::PhysX.PxSimulationEventCallback @self_, global::PhysX.PxActor** @actors, uint @count)
        {
            NativeMethods.PxSimulationEventCallback_onSleep_mut((global::PhysX.PxSimulationEventCallback*)Unsafe.AsPointer(ref @self_), @actors, @count);
        }

        /// <summary>This is called when certain contact events occur.  The method will be called for a pair of actors if one of the colliding shape pairs requested contact notification. You request which events are reported using the filter shader/callback mechanism (see [`PxSimulationFilterShader`], [`PxSimulationFilterCallback`], #PxPairFlag).  Do not keep references to the passed objects, as they will be invalid after this function returns.</summary>
        public static void OnContactMut(this ref global::PhysX.PxSimulationEventCallback @self_, global::PhysX.PxContactPairHeader* @pairHeader, global::PhysX.PxContactPair* @pairs, uint @nbPairs)
        {
            NativeMethods.PxSimulationEventCallback_onContact_mut((global::PhysX.PxSimulationEventCallback*)Unsafe.AsPointer(ref @self_), @pairHeader, @pairs, @nbPairs);
        }

        /// <summary>This is called with the current trigger pair events.  Shapes which have been marked as triggers using PxShapeFlag::eTRIGGER_SHAPE will send events according to the pair flag specification in the filter shader (see [`PxPairFlag`], #PxSimulationFilterShader).  Trigger shapes will no longer send notification events for interactions with other trigger shapes.</summary>
        public static void OnTriggerMut(this ref global::PhysX.PxSimulationEventCallback @self_, global::PhysX.PxTriggerPair* @pairs, uint @count)
        {
            NativeMethods.PxSimulationEventCallback_onTrigger_mut((global::PhysX.PxSimulationEventCallback*)Unsafe.AsPointer(ref @self_), @pairs, @count);
        }

        /// <summary>Provides early access to the new pose of moving rigid bodies.  When this call occurs, rigid bodies having the [`PxRigidBodyFlag::eENABLE_POSE_INTEGRATION_PREVIEW`] flag set, were moved by the simulation and their new poses can be accessed through the provided buffers.  The provided buffers are valid and can be read until the next call to [`PxScene::simulate`]() or #PxScene::collide().  This callback gets triggered while the simulation is running. If the provided rigid body references are used to read properties of the object, then the callback has to guarantee no other thread is writing to the same body at the same time.  The code in this callback should be lightweight as it can block the simulation, that is, the [`PxScene::fetchResults`]() call.</summary>
        public static void OnAdvanceMut(this ref global::PhysX.PxSimulationEventCallback @self_, global::PhysX.PxRigidBody** @bodyBuffer, global::PhysX.PxTransform* @poseBuffer, uint @count)
        {
            NativeMethods.PxSimulationEventCallback_onAdvance_mut((global::PhysX.PxSimulationEventCallback*)Unsafe.AsPointer(ref @self_), @bodyBuffer, @poseBuffer, @count);
        }

        public static void Delete(this ref global::PhysX.PxSimulationEventCallback @self_)
        {
            NativeMethods.PxSimulationEventCallback_delete((global::PhysX.PxSimulationEventCallback*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxSceneDesc(4)

        /// <summary>Override the default filter shader in the scene with a custom function. If call_default_filter_shader_first is set to true, this will first call the built-in PhysX filter (that matches Physx 2.8 behavior) before your callback.</summary>
        public static void EnableCustomFilterShader(this ref global::PhysX.PxSceneDesc @scene_desc, delegate* unmanaged[Cdecl]<global::PhysX.FilterShaderCallbackInfo*, global::PhysX.PxFilterFlags> @shader, uint @call_default_filter_shader_first)
        {
            NativeMethods.enable_custom_filter_shader((global::PhysX.PxSceneDesc*)Unsafe.AsPointer(ref @scene_desc), @shader, @call_default_filter_shader_first);
        }

        /// <summary>(re)sets the structure to the default.</summary>
        public static void SetToDefaultMut(this ref global::PhysX.PxSceneDesc @self_, global::PhysX.PxTolerancesScale* @scale)
        {
            NativeMethods.PxSceneDesc_setToDefault_mut((global::PhysX.PxSceneDesc*)Unsafe.AsPointer(ref @self_), @scale);
        }

        /// <summary>Returns true if the descriptor is valid.  true if the current settings are valid.</summary>
        public static bool IsValid(this ref global::PhysX.PxSceneDesc @self_)
        {
            return NativeMethods.PxSceneDesc_isValid((global::PhysX.PxSceneDesc*)Unsafe.AsPointer(ref @self_));
        }

        public static global::PhysX.PxTolerancesScale* GetTolerancesScale(this ref global::PhysX.PxSceneDesc @self_)
        {
            return NativeMethods.PxSceneDesc_getTolerancesScale((global::PhysX.PxSceneDesc*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxAssertHandler(3)

        /// <summary>(hidden) Should only be used in testing etc! This isn't generated as we don't generate op functions.</summary>
        public static void OpCallMut(this ref global::PhysX.PxAssertHandler @self_, sbyte* @expr, sbyte* @file, int @line, bool* @ignore)
        {
            NativeMethods.PxAssertHandler_opCall_mut((global::PhysX.PxAssertHandler*)Unsafe.AsPointer(ref @self_), @expr, @file, @line, @ignore);
        }

        public static void Delete(this ref global::PhysX.PxAssertHandler @self_)
        {
            NativeMethods.PxAssertHandler_delete((global::PhysX.PxAssertHandler*)Unsafe.AsPointer(ref @self_));
        }

        public static void PhysPxSetAssertHandler(this ref global::PhysX.PxAssertHandler @handler)
        {
            NativeMethods.phys_PxSetAssertHandler((global::PhysX.PxAssertHandler*)Unsafe.AsPointer(ref @handler));
        }

        #endregion

        #region PhysX.PxProfilerCallback(4)

        /// <summary>Set the callback that will be used for all profiling.</summary>
        public static void PhysPxSetProfilerCallback(this ref global::PhysX.PxProfilerCallback @profiler)
        {
            NativeMethods.phys_PxSetProfilerCallback((global::PhysX.PxProfilerCallback*)Unsafe.AsPointer(ref @profiler));
        }

        /// <summary>Mark the beginning of a nested profile block  Returns implementation-specific profiler data for this event</summary>
        public static void* ZoneStartMut(this ref global::PhysX.PxProfilerCallback @self_, byte* @eventName, bool @detached, ulong @contextId)
        {
            return NativeMethods.PxProfilerCallback_zoneStart_mut((global::PhysX.PxProfilerCallback*)Unsafe.AsPointer(ref @self_), @eventName, @detached, @contextId);
        }

        /// <summary>Mark the end of a nested profile block  eventName plus contextId can be used to uniquely match up start and end of a zone.</summary>
        public static void ZoneEndMut(this ref global::PhysX.PxProfilerCallback @self_, void* @profilerData, byte* @eventName, bool @detached, ulong @contextId)
        {
            NativeMethods.PxProfilerCallback_zoneEnd_mut((global::PhysX.PxProfilerCallback*)Unsafe.AsPointer(ref @self_), @profilerData, @eventName, @detached, @contextId);
        }

        public static global::PhysX.PxProfileScoped* ProfileScopedNewAlloc(this ref global::PhysX.PxProfilerCallback @callback, byte* @eventName, bool @detached, ulong @contextId)
        {
            return NativeMethods.PxProfileScoped_new_alloc((global::PhysX.PxProfilerCallback*)Unsafe.AsPointer(ref @callback), @eventName, @detached, @contextId);
        }

        #endregion

        #region PhysX.PxAllocator(2)

        public static void* AllocateMut(this ref global::PhysX.PxAllocator @self_, nuint @size, byte* @file, int @line)
        {
            return NativeMethods.PxAllocator_allocate_mut((global::PhysX.PxAllocator*)Unsafe.AsPointer(ref @self_), @size, @file, @line);
        }

        public static void DeallocateMut(this ref global::PhysX.PxAllocator @self_, void* @ptr)
        {
            NativeMethods.PxAllocator_deallocate_mut((global::PhysX.PxAllocator*)Unsafe.AsPointer(ref @self_), @ptr);
        }

        #endregion

        #region PhysX.PxRawAllocator(2)

        public static void* AllocateMut(this ref global::PhysX.PxRawAllocator @self_, nuint @size, byte* @anon_param1, int @anon_param2)
        {
            return NativeMethods.PxRawAllocator_allocate_mut((global::PhysX.PxRawAllocator*)Unsafe.AsPointer(ref @self_), @size, @anon_param1, @anon_param2);
        }

        public static void DeallocateMut(this ref global::PhysX.PxRawAllocator @self_, void* @ptr)
        {
            NativeMethods.PxRawAllocator_deallocate_mut((global::PhysX.PxRawAllocator*)Unsafe.AsPointer(ref @self_), @ptr);
        }

        #endregion

        #region PhysX.PxVirtualAllocatorCallback(4)

        public static void Delete(this ref global::PhysX.PxVirtualAllocatorCallback @self_)
        {
            NativeMethods.PxVirtualAllocatorCallback_delete((global::PhysX.PxVirtualAllocatorCallback*)Unsafe.AsPointer(ref @self_));
        }

        public static void* AllocateMut(this ref global::PhysX.PxVirtualAllocatorCallback @self_, nuint @size, int @group, byte* @file, int @line)
        {
            return NativeMethods.PxVirtualAllocatorCallback_allocate_mut((global::PhysX.PxVirtualAllocatorCallback*)Unsafe.AsPointer(ref @self_), @size, @group, @file, @line);
        }

        public static void DeallocateMut(this ref global::PhysX.PxVirtualAllocatorCallback @self_, void* @ptr)
        {
            NativeMethods.PxVirtualAllocatorCallback_deallocate_mut((global::PhysX.PxVirtualAllocatorCallback*)Unsafe.AsPointer(ref @self_), @ptr);
        }

        public static global::PhysX.PxVirtualAllocator VirtualAllocatorNew(this ref global::PhysX.PxVirtualAllocatorCallback @callback, int @group)
        {
            return NativeMethods.PxVirtualAllocator_new((global::PhysX.PxVirtualAllocatorCallback*)Unsafe.AsPointer(ref @callback), @group);
        }

        #endregion

        #region PhysX.PxVirtualAllocator(2)

        public static void* AllocateMut(this ref global::PhysX.PxVirtualAllocator @self_, nuint @size, byte* @file, int @line)
        {
            return NativeMethods.PxVirtualAllocator_allocate_mut((global::PhysX.PxVirtualAllocator*)Unsafe.AsPointer(ref @self_), @size, @file, @line);
        }

        public static void DeallocateMut(this ref global::PhysX.PxVirtualAllocator @self_, void* @ptr)
        {
            NativeMethods.PxVirtualAllocator_deallocate_mut((global::PhysX.PxVirtualAllocator*)Unsafe.AsPointer(ref @self_), @ptr);
        }

        #endregion

        #region PhysX.PxTempAllocator(2)

        public static void* AllocateMut(this ref global::PhysX.PxTempAllocator @self_, nuint @size, byte* @file, int @line)
        {
            return NativeMethods.PxTempAllocator_allocate_mut((global::PhysX.PxTempAllocator*)Unsafe.AsPointer(ref @self_), @size, @file, @line);
        }

        public static void DeallocateMut(this ref global::PhysX.PxTempAllocator @self_, void* @ptr)
        {
            NativeMethods.PxTempAllocator_deallocate_mut((global::PhysX.PxTempAllocator*)Unsafe.AsPointer(ref @self_), @ptr);
        }

        #endregion

        #region PhysX.PxVec3(59)

        /// <summary>tests for exact zero vector</summary>
        public static bool IsZero(this ref global::PhysX.PxVec3 @self_)
        {
            return NativeMethods.PxVec3_isZero((global::PhysX.PxVec3*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>returns true if all 3 elems of the vector are finite (not NAN or INF, etc.)</summary>
        public static bool IsFinite(this ref global::PhysX.PxVec3 @self_)
        {
            return NativeMethods.PxVec3_isFinite((global::PhysX.PxVec3*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>is normalized - used by API parameter validation</summary>
        public static bool IsNormalized(this ref global::PhysX.PxVec3 @self_)
        {
            return NativeMethods.PxVec3_isNormalized((global::PhysX.PxVec3*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>returns the squared magnitude  Avoids calling PxSqrt()!</summary>
        public static float MagnitudeSquared(this ref global::PhysX.PxVec3 @self_)
        {
            return NativeMethods.PxVec3_magnitudeSquared((global::PhysX.PxVec3*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>returns the magnitude</summary>
        public static float Magnitude(this ref global::PhysX.PxVec3 @self_)
        {
            return NativeMethods.PxVec3_magnitude((global::PhysX.PxVec3*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>returns the scalar product of this and other.</summary>
        public static float Dot(this ref global::PhysX.PxVec3 @self_, global::PhysX.PxVec3* @v)
        {
            return NativeMethods.PxVec3_dot((global::PhysX.PxVec3*)Unsafe.AsPointer(ref @self_), @v);
        }

        /// <summary>cross product</summary>
        public static global::PhysX.PxVec3 Cross(this ref global::PhysX.PxVec3 @self_, global::PhysX.PxVec3* @v)
        {
            return NativeMethods.PxVec3_cross((global::PhysX.PxVec3*)Unsafe.AsPointer(ref @self_), @v);
        }

        /// <summary>returns a unit vector</summary>
        public static global::PhysX.PxVec3 GetNormalized(this ref global::PhysX.PxVec3 @self_)
        {
            return NativeMethods.PxVec3_getNormalized((global::PhysX.PxVec3*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>normalizes the vector in place</summary>
        public static float NormalizeMut(this ref global::PhysX.PxVec3 @self_)
        {
            return NativeMethods.PxVec3_normalize_mut((global::PhysX.PxVec3*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>normalizes the vector in place. Does nothing if vector magnitude is under PX_NORMALIZATION_EPSILON. Returns vector magnitude if &gt;= PX_NORMALIZATION_EPSILON and 0.0f otherwise.</summary>
        public static float NormalizeSafeMut(this ref global::PhysX.PxVec3 @self_)
        {
            return NativeMethods.PxVec3_normalizeSafe_mut((global::PhysX.PxVec3*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>normalizes the vector in place. Asserts if vector magnitude is under PX_NORMALIZATION_EPSILON. returns vector magnitude.</summary>
        public static float NormalizeFastMut(this ref global::PhysX.PxVec3 @self_)
        {
            return NativeMethods.PxVec3_normalizeFast_mut((global::PhysX.PxVec3*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>a[i] * b[i], for all i.</summary>
        public static global::PhysX.PxVec3 Multiply(this ref global::PhysX.PxVec3 @self_, global::PhysX.PxVec3* @a)
        {
            return NativeMethods.PxVec3_multiply((global::PhysX.PxVec3*)Unsafe.AsPointer(ref @self_), @a);
        }

        /// <summary>element-wise minimum</summary>
        public static global::PhysX.PxVec3 Minimum(this ref global::PhysX.PxVec3 @self_, global::PhysX.PxVec3* @v)
        {
            return NativeMethods.PxVec3_minimum((global::PhysX.PxVec3*)Unsafe.AsPointer(ref @self_), @v);
        }

        /// <summary>returns MIN(x, y, z);</summary>
        public static float MinElement(this ref global::PhysX.PxVec3 @self_)
        {
            return NativeMethods.PxVec3_minElement((global::PhysX.PxVec3*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>element-wise maximum</summary>
        public static global::PhysX.PxVec3 Maximum(this ref global::PhysX.PxVec3 @self_, global::PhysX.PxVec3* @v)
        {
            return NativeMethods.PxVec3_maximum((global::PhysX.PxVec3*)Unsafe.AsPointer(ref @self_), @v);
        }

        /// <summary>returns MAX(x, y, z);</summary>
        public static float MaxElement(this ref global::PhysX.PxVec3 @self_)
        {
            return NativeMethods.PxVec3_maxElement((global::PhysX.PxVec3*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>returns absolute values of components;</summary>
        public static global::PhysX.PxVec3 Abs(this ref global::PhysX.PxVec3 @self_)
        {
            return NativeMethods.PxVec3_abs((global::PhysX.PxVec3*)Unsafe.AsPointer(ref @self_));
        }

        public static global::PhysX.PxVec3Padded* PaddedNewAlloc1(this ref global::PhysX.PxVec3 @p)
        {
            return NativeMethods.PxVec3Padded_new_alloc_1((global::PhysX.PxVec3*)Unsafe.AsPointer(ref @p));
        }

        public static global::PhysX.PxTransform TransformNew1(this ref global::PhysX.PxVec3 @position)
        {
            return NativeMethods.PxTransform_new_1((global::PhysX.PxVec3*)Unsafe.AsPointer(ref @position));
        }

        public static global::PhysX.PxTransform TransformNew5(this ref global::PhysX.PxVec3 @p0, global::PhysX.PxQuat* @q0)
        {
            return NativeMethods.PxTransform_new_5((global::PhysX.PxVec3*)Unsafe.AsPointer(ref @p0), @q0);
        }

        /// <summary>Construct from three base vectors</summary>
        public static global::PhysX.PxMat33 Mat33New3(this ref global::PhysX.PxVec3 @col0, global::PhysX.PxVec3* @col1, global::PhysX.PxVec3* @col2)
        {
            return NativeMethods.PxMat33_new_3((global::PhysX.PxVec3*)Unsafe.AsPointer(ref @col0), @col1, @col2);
        }

        /// <summary>Construct from diagonal, off-diagonals are zero.</summary>
        public static global::PhysX.PxMat33 Mat33CreateDiagonal(this ref global::PhysX.PxVec3 @d)
        {
            return NativeMethods.PxMat33_createDiagonal((global::PhysX.PxVec3*)Unsafe.AsPointer(ref @d));
        }

        /// <summary>Computes the outer product of two vectors</summary>
        public static global::PhysX.PxMat33 Mat33Outer(this ref global::PhysX.PxVec3 @a, global::PhysX.PxVec3* @b)
        {
            return NativeMethods.PxMat33_outer((global::PhysX.PxVec3*)Unsafe.AsPointer(ref @a), @b);
        }

        /// <summary>Construct from two bounding points</summary>
        public static global::PhysX.PxBounds3 Bounds3New1(this ref global::PhysX.PxVec3 @minimum, global::PhysX.PxVec3* @maximum)
        {
            return NativeMethods.PxBounds3_new_1((global::PhysX.PxVec3*)Unsafe.AsPointer(ref @minimum), @maximum);
        }

        /// <summary>returns the AABB containing v0 and v1.</summary>
        public static global::PhysX.PxBounds3 Bounds3BoundsOfPoints(this ref global::PhysX.PxVec3 @v0, global::PhysX.PxVec3* @v1)
        {
            return NativeMethods.PxBounds3_boundsOfPoints((global::PhysX.PxVec3*)Unsafe.AsPointer(ref @v0), @v1);
        }

        /// <summary>returns the AABB from center and extents vectors.</summary>
        public static global::PhysX.PxBounds3 Bounds3CenterExtents(this ref global::PhysX.PxVec3 @center, global::PhysX.PxVec3* @extent)
        {
            return NativeMethods.PxBounds3_centerExtents((global::PhysX.PxVec3*)Unsafe.AsPointer(ref @center), @extent);
        }

        /// <summary>Construct from center, extent, and (not necessarily orthogonal) basis</summary>
        public static global::PhysX.PxBounds3 Bounds3BasisExtent(this ref global::PhysX.PxVec3 @center, global::PhysX.PxMat33* @basis, global::PhysX.PxVec3* @extent)
        {
            return NativeMethods.PxBounds3_basisExtent((global::PhysX.PxVec3*)Unsafe.AsPointer(ref @center), @basis, @extent);
        }

        /// <summary>Initializes from 3 scalar parameters.</summary>
        public static global::PhysX.PxVec4 Vec4New4(this ref global::PhysX.PxVec3 @v, float @nw)
        {
            return NativeMethods.PxVec4_new_4((global::PhysX.PxVec3*)Unsafe.AsPointer(ref @v), @nw);
        }

        /// <summary>Construct from three base vectors and a translation</summary>
        public static global::PhysX.PxMat44 Mat44New5(this ref global::PhysX.PxVec3 @col0, global::PhysX.PxVec3* @col1, global::PhysX.PxVec3* @col2, global::PhysX.PxVec3* @col3)
        {
            return NativeMethods.PxMat44_new_5((global::PhysX.PxVec3*)Unsafe.AsPointer(ref @col0), @col1, @col2, @col3);
        }

        /// <summary>Constructor from a normal and a distance</summary>
        public static global::PhysX.PxPlane PlaneNew2(this ref global::PhysX.PxVec3 @normal, float @distance)
        {
            return NativeMethods.PxPlane_new_2((global::PhysX.PxVec3*)Unsafe.AsPointer(ref @normal), @distance);
        }

        /// <summary>Constructor from a point on the plane and a normal</summary>
        public static global::PhysX.PxPlane PlaneNew3(this ref global::PhysX.PxVec3 @point, global::PhysX.PxVec3* @normal)
        {
            return NativeMethods.PxPlane_new_3((global::PhysX.PxVec3*)Unsafe.AsPointer(ref @point), @normal);
        }

        /// <summary>Constructor from three points</summary>
        public static global::PhysX.PxPlane PlaneNew4(this ref global::PhysX.PxVec3 @p0, global::PhysX.PxVec3* @p1, global::PhysX.PxVec3* @p2)
        {
            return NativeMethods.PxPlane_new_4((global::PhysX.PxVec3*)Unsafe.AsPointer(ref @p0), @p1, @p2);
        }

        /// <summary>finds the shortest rotation between two vectors.  a rotation about an axis normal to the two vectors which takes one to the other via the shortest path</summary>
        public static global::PhysX.PxQuat PhysPxShortestRotation(this ref global::PhysX.PxVec3 @from, global::PhysX.PxVec3* @target)
        {
            return NativeMethods.phys_PxShortestRotation((global::PhysX.PxVec3*)Unsafe.AsPointer(ref @from), @target);
        }

        /// <summary>creates a transform from the endpoints of a segment, suitable for an actor transform for a PxCapsuleGeometry  A PxTransform which will transform the vector (1,0,0) to the capsule axis shrunk by the halfHeight</summary>
        public static global::PhysX.PxTransform PhysPxTransformFromSegment(this ref global::PhysX.PxVec3 @p0, global::PhysX.PxVec3* @p1, float* @halfHeight)
        {
            return NativeMethods.phys_PxTransformFromSegment((global::PhysX.PxVec3*)Unsafe.AsPointer(ref @p0), @p1, @halfHeight);
        }

        /// <summary>Compute the exponent of a PxVec3</summary>
        public static global::PhysX.PxQuat PhysPxExp(this ref global::PhysX.PxVec3 @v)
        {
            return NativeMethods.phys_PxExp((global::PhysX.PxVec3*)Unsafe.AsPointer(ref @v));
        }

        /// <summary>return Returns 0 if v.x is largest element of v, 1 if v.y is largest element, 2 if v.z is largest element.</summary>
        public static uint PhysPxLargestAxis(this ref global::PhysX.PxVec3 @v)
        {
            return NativeMethods.phys_PxLargestAxis((global::PhysX.PxVec3*)Unsafe.AsPointer(ref @v));
        }

        /// <summary>Compute the closest point on an 2d ellipse to a given 2d point.  Returns the 2d position on the surface of the ellipse that is closest to point.</summary>
        public static global::PhysX.PxVec3 PhysPxEllipseClamp(this ref global::PhysX.PxVec3 @point, global::PhysX.PxVec3* @radii)
        {
            return NativeMethods.phys_PxEllipseClamp((global::PhysX.PxVec3*)Unsafe.AsPointer(ref @point), @radii);
        }

        /// <summary>Compute the angle between two non-unit vectors  Returns the angle (in radians) between the two vector v0 and v1.</summary>
        public static float PhysPxComputeAngle(this ref global::PhysX.PxVec3 @v0, global::PhysX.PxVec3* @v1)
        {
            return NativeMethods.phys_PxComputeAngle((global::PhysX.PxVec3*)Unsafe.AsPointer(ref @v0), @v1);
        }

        /// <summary>Compute two normalized vectors (right and up) that are perpendicular to an input normalized vector (dir).</summary>
        public static void PhysPxComputeBasisVectors(this ref global::PhysX.PxVec3 @dir, global::PhysX.PxVec3* @right, global::PhysX.PxVec3* @up)
        {
            NativeMethods.phys_PxComputeBasisVectors((global::PhysX.PxVec3*)Unsafe.AsPointer(ref @dir), @right, @up);
        }

        /// <summary>Compute three normalized vectors (dir, right and up) that are parallel to (dir) and perpendicular to (right, up) the normalized direction vector (p1 - p0)/||p1 - p0||.</summary>
        public static void PhysPxComputeBasisVectors1(this ref global::PhysX.PxVec3 @p0, global::PhysX.PxVec3* @p1, global::PhysX.PxVec3* @dir, global::PhysX.PxVec3* @right, global::PhysX.PxVec3* @up)
        {
            NativeMethods.phys_PxComputeBasisVectors_1((global::PhysX.PxVec3*)Unsafe.AsPointer(ref @p0), @p1, @dir, @right, @up);
        }

        public static void PhysComputeBarycentric(this ref global::PhysX.PxVec3 @a, global::PhysX.PxVec3* @b, global::PhysX.PxVec3* @c, global::PhysX.PxVec3* @d, global::PhysX.PxVec3* @p, global::PhysX.PxVec4* @bary)
        {
            NativeMethods.phys_computeBarycentric((global::PhysX.PxVec3*)Unsafe.AsPointer(ref @a), @b, @c, @d, @p, @bary);
        }

        public static void PhysComputeBarycentric1(this ref global::PhysX.PxVec3 @a, global::PhysX.PxVec3* @b, global::PhysX.PxVec3* @c, global::PhysX.PxVec3* @p, global::PhysX.PxVec4* @bary)
        {
            NativeMethods.phys_computeBarycentric_1((global::PhysX.PxVec3*)Unsafe.AsPointer(ref @a), @b, @c, @p, @bary);
        }

        public static global::PhysX.PxDebugPoint DebugPointNew(this ref global::PhysX.PxVec3 @p, uint* @c)
        {
            return NativeMethods.PxDebugPoint_new((global::PhysX.PxVec3*)Unsafe.AsPointer(ref @p), @c);
        }

        public static global::PhysX.PxDebugLine DebugLineNew(this ref global::PhysX.PxVec3 @p0, global::PhysX.PxVec3* @p1, uint* @c)
        {
            return NativeMethods.PxDebugLine_new((global::PhysX.PxVec3*)Unsafe.AsPointer(ref @p0), @p1, @c);
        }

        public static global::PhysX.PxDebugTriangle DebugTriangleNew(this ref global::PhysX.PxVec3 @p0, global::PhysX.PxVec3* @p1, global::PhysX.PxVec3* @p2, uint* @c)
        {
            return NativeMethods.PxDebugTriangle_new((global::PhysX.PxVec3*)Unsafe.AsPointer(ref @p0), @p1, @p2, @c);
        }

        public static global::PhysX.PxDebugText DebugTextNew1(this ref global::PhysX.PxVec3 @pos, float* @sz, uint* @clr, byte* @str)
        {
            return NativeMethods.PxDebugText_new_1((global::PhysX.PxVec3*)Unsafe.AsPointer(ref @pos), @sz, @clr, @str);
        }

        /// <summary>Constructor to initialize to arbitrary scale and identity scale rotation.</summary>
        public static global::PhysX.PxMeshScale MeshScaleNew2(this ref global::PhysX.PxVec3 @s)
        {
            return NativeMethods.PxMeshScale_new_2((global::PhysX.PxVec3*)Unsafe.AsPointer(ref @s));
        }

        /// <summary>Constructor to initialize to arbitrary scaling.</summary>
        public static global::PhysX.PxMeshScale MeshScaleNew3(this ref global::PhysX.PxVec3 @s, global::PhysX.PxQuat* @r)
        {
            return NativeMethods.PxMeshScale_new_3((global::PhysX.PxVec3*)Unsafe.AsPointer(ref @s), @r);
        }

        /// <summary>Raycast test against a geometry object.  All geometry types are supported except PxParticleSystemGeometry, PxTetrahedronMeshGeometry and PxHairSystemGeometry.  Number of hits between the ray and the geometry object</summary>
        public static uint GeometryQueryRaycast(this ref global::PhysX.PxVec3 @origin, global::PhysX.PxVec3* @unitDir, global::PhysX.PxGeometry* @geom, global::PhysX.PxTransform* @pose, float @maxDist, global::PhysX.PxHitFlags @hitFlags, uint @maxHits, global::PhysX.PxGeomRaycastHit* @rayHits, uint @stride, global::PhysX.PxGeometryQueryFlags @queryFlags, global::PhysX.PxQueryThreadContext* @threadContext)
        {
            return NativeMethods.PxGeometryQuery_raycast((global::PhysX.PxVec3*)Unsafe.AsPointer(ref @origin), @unitDir, @geom, @pose, @maxDist, @hitFlags, @maxHits, @rayHits, @stride, @queryFlags, @threadContext);
        }

        /// <summary>Sweep a specified geometry object in space and test for collision with a given object.  The following combinations are supported.  PxSphereGeometry vs. {PxSphereGeometry, PxPlaneGeometry, PxCapsuleGeometry, PxBoxGeometry, PxConvexMeshGeometry, PxTriangleMeshGeometry, PxHeightFieldGeometry}  PxCapsuleGeometry vs. {PxSphereGeometry, PxPlaneGeometry, PxCapsuleGeometry, PxBoxGeometry, PxConvexMeshGeometry, PxTriangleMeshGeometry, PxHeightFieldGeometry}  PxBoxGeometry vs. {PxSphereGeometry, PxPlaneGeometry, PxCapsuleGeometry, PxBoxGeometry, PxConvexMeshGeometry, PxTriangleMeshGeometry, PxHeightFieldGeometry}  PxConvexMeshGeometry vs. {PxSphereGeometry, PxPlaneGeometry, PxCapsuleGeometry, PxBoxGeometry, PxConvexMeshGeometry, PxTriangleMeshGeometry, PxHeightFieldGeometry}  True if the swept geometry object geom0 hits the object geom1</summary>
        public static bool GeometryQuerySweep(this ref global::PhysX.PxVec3 @unitDir, float @maxDist, global::PhysX.PxGeometry* @geom0, global::PhysX.PxTransform* @pose0, global::PhysX.PxGeometry* @geom1, global::PhysX.PxTransform* @pose1, global::PhysX.PxGeomSweepHit* @sweepHit, global::PhysX.PxHitFlags @hitFlags, float @inflation, global::PhysX.PxGeometryQueryFlags @queryFlags, global::PhysX.PxQueryThreadContext* @threadContext)
        {
            return NativeMethods.PxGeometryQuery_sweep((global::PhysX.PxVec3*)Unsafe.AsPointer(ref @unitDir), @maxDist, @geom0, @pose0, @geom1, @pose1, @sweepHit, @hitFlags, @inflation, @queryFlags, @threadContext);
        }

        /// <summary>Compute minimum translational distance (MTD) between two geometry objects.  All combinations of geom objects are supported except: - plane/plane - plane/mesh - plane/heightfield - mesh/mesh - mesh/heightfield - heightfield/heightfield - anything involving PxParticleSystemGeometry, PxTetrahedronMeshGeometry or PxHairSystemGeometry  The function returns a unit vector ('direction') and a penetration depth ('depth').  The depenetration vector D = direction * depth should be applied to the first object, to get out of the second object.  Returned depth should always be positive or null.  If objects do not overlap, the function can not compute the MTD and returns false.  True if the MTD has successfully been computed, i.e. if objects do overlap.</summary>
        public static bool GeometryQueryComputePenetration(this ref global::PhysX.PxVec3 @direction, float* @depth, global::PhysX.PxGeometry* @geom0, global::PhysX.PxTransform* @pose0, global::PhysX.PxGeometry* @geom1, global::PhysX.PxTransform* @pose1, global::PhysX.PxGeometryQueryFlags @queryFlags)
        {
            return NativeMethods.PxGeometryQuery_computePenetration((global::PhysX.PxVec3*)Unsafe.AsPointer(ref @direction), @depth, @geom0, @pose0, @geom1, @pose1, @queryFlags);
        }

        /// <summary>Computes distance between a point and a geometry object.  Currently supported geometry objects: box, sphere, capsule, convex, mesh.  For meshes, only the BVH34 midphase data-structure is supported.  Square distance between the point and the geom object, or 0.0 if the point is inside the object, or -1.0 if an error occured (geometry type is not supported, or invalid pose)</summary>
        public static float GeometryQueryPointDistance(this ref global::PhysX.PxVec3 @point, global::PhysX.PxGeometry* @geom, global::PhysX.PxTransform* @pose, global::PhysX.PxVec3* @closestPoint, uint* @closestIndex, global::PhysX.PxGeometryQueryFlags @queryFlags)
        {
            return NativeMethods.PxGeometryQuery_pointDistance((global::PhysX.PxVec3*)Unsafe.AsPointer(ref @point), @geom, @pose, @closestPoint, @closestIndex, @queryFlags);
        }

        /// <summary>Sweep a specified geometry object in space and test for collision with a set of given triangles.  This function simply sweeps input geometry against each input triangle, in the order they are given. This is an O(N) operation with N = number of input triangles. It does not use any particular acceleration structure.  True if the swept geometry object hits the specified triangles  Only the following geometry types are currently supported: PxSphereGeometry, PxCapsuleGeometry, PxBoxGeometry  If a shape from the scene is already overlapping with the query shape in its starting position, the hit is returned unless eASSUME_NO_INITIAL_OVERLAP was specified.  This function returns a single closest hit across all the input triangles. Multiple hits are not supported.  Supported hitFlags are PxHitFlag::eDEFAULT, PxHitFlag::eASSUME_NO_INITIAL_OVERLAP, PxHitFlag::ePRECISE_SWEEP, PxHitFlag::eMESH_BOTH_SIDES, PxHitFlag::eMESH_ANY.  ePOSITION is only defined when there is no initial overlap (sweepHit.hadInitialOverlap() == false)  The returned normal for initially overlapping sweeps is set to -unitDir.  Otherwise the returned normal is the front normal of the triangle even if PxHitFlag::eMESH_BOTH_SIDES is set.  The returned PxGeomSweepHit::faceIndex parameter will hold the index of the hit triangle in input array, i.e. the range is [0; triangleCount). For initially overlapping sweeps, this is the index of overlapping triangle.  The inflation parameter is not compatible with PxHitFlag::ePRECISE_SWEEP.</summary>
        public static bool MeshQuerySweep(this ref global::PhysX.PxVec3 @unitDir, float @distance, global::PhysX.PxGeometry* @geom, global::PhysX.PxTransform* @pose, uint @triangleCount, global::PhysX.PxTriangle* @triangles, global::PhysX.PxGeomSweepHit* @sweepHit, global::PhysX.PxHitFlags @hitFlags, uint* @cachedIndex, float @inflation, bool @doubleSided, global::PhysX.PxGeometryQueryFlags @queryFlags)
        {
            return NativeMethods.PxMeshQuery_sweep((global::PhysX.PxVec3*)Unsafe.AsPointer(ref @unitDir), @distance, @geom, @pose, @triangleCount, @triangles, @sweepHit, @hitFlags, @cachedIndex, @inflation, @doubleSided, @queryFlags);
        }

        /// <summary>Constructor</summary>
        public static global::PhysX.PxTriangle* TriangleNewAlloc1(this ref global::PhysX.PxVec3 @p0, global::PhysX.PxVec3* @p1, global::PhysX.PxVec3* @p2)
        {
            return NativeMethods.PxTriangle_new_alloc_1((global::PhysX.PxVec3*)Unsafe.AsPointer(ref @p0), @p1, @p2);
        }

        /// <summary>Constructor</summary>
        public static global::PhysX.PxTetrahedron* TetrahedronNewAlloc1(this ref global::PhysX.PxVec3 @p0, global::PhysX.PxVec3* @p1, global::PhysX.PxVec3* @p2, global::PhysX.PxVec3* @p3)
        {
            return NativeMethods.PxTetrahedron_new_alloc_1((global::PhysX.PxVec3*)Unsafe.AsPointer(ref @p0), @p1, @p2, @p3);
        }

        public static global::PhysX.PxJacobianRow JacobianRowNew1(this ref global::PhysX.PxVec3 @lin0, global::PhysX.PxVec3* @lin1, global::PhysX.PxVec3* @ang0, global::PhysX.PxVec3* @ang1)
        {
            return NativeMethods.PxJacobianRow_new_1((global::PhysX.PxVec3*)Unsafe.AsPointer(ref @lin0), @lin1, @ang0, @ang1);
        }

        /// <summary>Computes an approximate minimum translational distance (MTD) between a geometry object and a mesh.  This iterative function computes an approximate vector that can be used to depenetrate a geom object from a triangle mesh. Returned depenetration vector should be applied to 'geom', to get out of the mesh.  The function works best when the amount of overlap between the geom object and the mesh is small. If the geom object's center goes inside the mesh, backface culling usually kicks in, no overlap is detected, and the function does not compute an MTD vector.  The function early exits if no overlap is detected after a depenetration attempt. This means that if maxIter = N, the code will attempt at most N iterations but it might exit earlier if depenetration has been successful. Usually N = 4 gives good results.  True if the MTD has successfully been computed, i.e. if objects do overlap.</summary>
        public static bool PhysPxComputeTriangleMeshPenetration(this ref global::PhysX.PxVec3 @direction, float* @depth, global::PhysX.PxGeometry* @geom, global::PhysX.PxTransform* @geomPose, global::PhysX.PxTriangleMeshGeometry* @meshGeom, global::PhysX.PxTransform* @meshPose, uint @maxIter, uint* @usedIter)
        {
            return NativeMethods.phys_PxComputeTriangleMeshPenetration((global::PhysX.PxVec3*)Unsafe.AsPointer(ref @direction), @depth, @geom, @geomPose, @meshGeom, @meshPose, @maxIter, @usedIter);
        }

        /// <summary>Computes an approximate minimum translational distance (MTD) between a geometry object and a heightfield.  This iterative function computes an approximate vector that can be used to depenetrate a geom object from a heightfield. Returned depenetration vector should be applied to 'geom', to get out of the heightfield.  The function works best when the amount of overlap between the geom object and the mesh is small. If the geom object's center goes inside the heightfield, backface culling usually kicks in, no overlap is detected, and the function does not compute an MTD vector.  The function early exits if no overlap is detected after a depenetration attempt. This means that if maxIter = N, the code will attempt at most N iterations but it might exit earlier if depenetration has been successful. Usually N = 4 gives good results.  True if the MTD has successfully been computed, i.e. if objects do overlap.</summary>
        public static bool PhysPxComputeHeightFieldPenetration(this ref global::PhysX.PxVec3 @direction, float* @depth, global::PhysX.PxGeometry* @geom, global::PhysX.PxTransform* @geomPose, global::PhysX.PxHeightFieldGeometry* @heightFieldGeom, global::PhysX.PxTransform* @heightFieldPose, uint @maxIter, uint* @usedIter)
        {
            return NativeMethods.phys_PxComputeHeightFieldPenetration((global::PhysX.PxVec3*)Unsafe.AsPointer(ref @direction), @depth, @geom, @geomPose, @heightFieldGeom, @heightFieldPose, @maxIter, @usedIter);
        }

        public static global::PhysX.PxXmlMiscParameter XmlMiscParameterNew1(this ref global::PhysX.PxVec3 @inUpVector, global::PhysX.PxTolerancesScale @inScale)
        {
            return NativeMethods.PxXmlMiscParameter_new_1((global::PhysX.PxVec3*)Unsafe.AsPointer(ref @inUpVector), @inScale);
        }

        #endregion

        #region PhysX.PxVec3Padded(1)

        public static void Delete(this ref global::PhysX.PxVec3Padded @self_)
        {
            NativeMethods.PxVec3Padded_delete((global::PhysX.PxVec3Padded*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxMat33(16)

        /// <summary>Creates from orientation matrix.</summary>
        public static global::PhysX.PxQuat QuatNew5(this ref global::PhysX.PxMat33 @m)
        {
            return NativeMethods.PxQuat_new_5((global::PhysX.PxMat33*)Unsafe.AsPointer(ref @m));
        }

        /// <summary>Get transposed matrix</summary>
        public static global::PhysX.PxMat33 GetTranspose(this ref global::PhysX.PxMat33 @self_)
        {
            return NativeMethods.PxMat33_getTranspose((global::PhysX.PxMat33*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Get the real inverse</summary>
        public static global::PhysX.PxMat33 GetInverse(this ref global::PhysX.PxMat33 @self_)
        {
            return NativeMethods.PxMat33_getInverse((global::PhysX.PxMat33*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Get determinant</summary>
        public static float GetDeterminant(this ref global::PhysX.PxMat33 @self_)
        {
            return NativeMethods.PxMat33_getDeterminant((global::PhysX.PxMat33*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Transform vector by matrix, equal to v' = M*v</summary>
        public static global::PhysX.PxVec3 Transform(this ref global::PhysX.PxMat33 @self_, global::PhysX.PxVec3* @other)
        {
            return NativeMethods.PxMat33_transform((global::PhysX.PxMat33*)Unsafe.AsPointer(ref @self_), @other);
        }

        /// <summary>Transform vector by matrix transpose, v' = M^t*v</summary>
        public static global::PhysX.PxVec3 TransformTranspose(this ref global::PhysX.PxMat33 @self_, global::PhysX.PxVec3* @other)
        {
            return NativeMethods.PxMat33_transformTranspose((global::PhysX.PxMat33*)Unsafe.AsPointer(ref @self_), @other);
        }

        public static float* Front(this ref global::PhysX.PxMat33 @self_)
        {
            return NativeMethods.PxMat33_front((global::PhysX.PxMat33*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>gets the transformed bounds of the passed AABB (resulting in a bigger AABB).  This version is safe to call for empty bounds.</summary>
        public static global::PhysX.PxBounds3 Bounds3TransformSafe(this ref global::PhysX.PxMat33 @matrix, global::PhysX.PxBounds3* @bounds)
        {
            return NativeMethods.PxBounds3_transformSafe((global::PhysX.PxMat33*)Unsafe.AsPointer(ref @matrix), @bounds);
        }

        /// <summary>gets the transformed bounds of the passed AABB (resulting in a bigger AABB).  Calling this method for empty bounds leads to undefined behavior. Use [`transformSafe`]() instead.</summary>
        public static global::PhysX.PxBounds3 Bounds3TransformFast(this ref global::PhysX.PxMat33 @matrix, global::PhysX.PxBounds3* @bounds)
        {
            return NativeMethods.PxBounds3_transformFast((global::PhysX.PxMat33*)Unsafe.AsPointer(ref @matrix), @bounds);
        }

        /// <summary>Construct from Mat33 and a translation</summary>
        public static global::PhysX.PxMat44 Mat44New9(this ref global::PhysX.PxMat33 @axes, global::PhysX.PxVec3* @position)
        {
            return NativeMethods.PxMat44_new_9((global::PhysX.PxMat33*)Unsafe.AsPointer(ref @axes), @position);
        }

        public static global::PhysX.PxVec3 PhysPxDiagonalize(this ref global::PhysX.PxMat33 @m, global::PhysX.PxQuat* @axes)
        {
            return NativeMethods.phys_PxDiagonalize((global::PhysX.PxMat33*)Unsafe.AsPointer(ref @m), @axes);
        }

        /// <summary>computes a oriented bounding box around the scaled basis.  Bounding box extent.</summary>
        public static global::PhysX.PxVec3 PhysPxOptimizeBoundingBox(this ref global::PhysX.PxMat33 @basis)
        {
            return NativeMethods.phys_PxOptimizeBoundingBox((global::PhysX.PxMat33*)Unsafe.AsPointer(ref @basis));
        }

        /// <summary>Get the entries of the diagonalized inertia tensor and the corresponding reference rotation.  The entries of the diagonalized inertia tensor.</summary>
        public static global::PhysX.PxVec3 MassPropertiesGetMassSpaceInertia(this ref global::PhysX.PxMat33 @inertia, global::PhysX.PxQuat* @massFrame)
        {
            return NativeMethods.PxMassProperties_getMassSpaceInertia((global::PhysX.PxMat33*)Unsafe.AsPointer(ref @inertia), @massFrame);
        }

        /// <summary>Translate an inertia tensor using the parallel axis theorem  The translated inertia tensor.</summary>
        public static global::PhysX.PxMat33 MassPropertiesTranslateInertia(this ref global::PhysX.PxMat33 @inertia, float @mass, global::PhysX.PxVec3* @t)
        {
            return NativeMethods.PxMassProperties_translateInertia((global::PhysX.PxMat33*)Unsafe.AsPointer(ref @inertia), @mass, @t);
        }

        /// <summary>Rotate an inertia tensor around the center of mass  The rotated inertia tensor.</summary>
        public static global::PhysX.PxMat33 MassPropertiesRotateInertia(this ref global::PhysX.PxMat33 @inertia, global::PhysX.PxQuat* @q)
        {
            return NativeMethods.PxMassProperties_rotateInertia((global::PhysX.PxMat33*)Unsafe.AsPointer(ref @inertia), @q);
        }

        /// <summary>Non-uniform scaling of the inertia tensor  The scaled inertia tensor.</summary>
        public static global::PhysX.PxMat33 MassPropertiesScaleInertia(this ref global::PhysX.PxMat33 @inertia, global::PhysX.PxQuat* @scaleRotation, global::PhysX.PxVec3* @scale)
        {
            return NativeMethods.PxMassProperties_scaleInertia((global::PhysX.PxMat33*)Unsafe.AsPointer(ref @inertia), @scaleRotation, @scale);
        }

        #endregion

        #region PhysX.PxQuat(24)

        /// <summary>returns true if quat is identity</summary>
        public static bool IsIdentity(this ref global::PhysX.PxQuat @self_)
        {
            return NativeMethods.PxQuat_isIdentity((global::PhysX.PxQuat*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>returns true if all elements are finite (not NAN or INF, etc.)</summary>
        public static bool IsFinite(this ref global::PhysX.PxQuat @self_)
        {
            return NativeMethods.PxQuat_isFinite((global::PhysX.PxQuat*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>returns true if finite and magnitude is close to unit</summary>
        public static bool IsUnit(this ref global::PhysX.PxQuat @self_)
        {
            return NativeMethods.PxQuat_isUnit((global::PhysX.PxQuat*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>returns true if finite and magnitude is reasonably close to unit to allow for some accumulation of error vs isValid</summary>
        public static bool IsSane(this ref global::PhysX.PxQuat @self_)
        {
            return NativeMethods.PxQuat_isSane((global::PhysX.PxQuat*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>converts this quaternion to angle-axis representation</summary>
        public static void ToRadiansAndUnitAxis(this ref global::PhysX.PxQuat @self_, float* @angle, global::PhysX.PxVec3* @axis)
        {
            NativeMethods.PxQuat_toRadiansAndUnitAxis((global::PhysX.PxQuat*)Unsafe.AsPointer(ref @self_), @angle, @axis);
        }

        /// <summary>Gets the angle between this quat and the identity quaternion.  Unit: Radians</summary>
        public static float GetAngle(this ref global::PhysX.PxQuat @self_)
        {
            return NativeMethods.PxQuat_getAngle((global::PhysX.PxQuat*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Gets the angle between this quat and the argument  Unit: Radians</summary>
        public static float GetAngle1(this ref global::PhysX.PxQuat @self_, global::PhysX.PxQuat* @q)
        {
            return NativeMethods.PxQuat_getAngle_1((global::PhysX.PxQuat*)Unsafe.AsPointer(ref @self_), @q);
        }

        /// <summary>This is the squared 4D vector length, should be 1 for unit quaternions.</summary>
        public static float MagnitudeSquared(this ref global::PhysX.PxQuat @self_)
        {
            return NativeMethods.PxQuat_magnitudeSquared((global::PhysX.PxQuat*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>returns the scalar product of this and other.</summary>
        public static float Dot(this ref global::PhysX.PxQuat @self_, global::PhysX.PxQuat* @v)
        {
            return NativeMethods.PxQuat_dot((global::PhysX.PxQuat*)Unsafe.AsPointer(ref @self_), @v);
        }

        public static global::PhysX.PxQuat GetNormalized(this ref global::PhysX.PxQuat @self_)
        {
            return NativeMethods.PxQuat_getNormalized((global::PhysX.PxQuat*)Unsafe.AsPointer(ref @self_));
        }

        public static float Magnitude(this ref global::PhysX.PxQuat @self_)
        {
            return NativeMethods.PxQuat_magnitude((global::PhysX.PxQuat*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>maps to the closest unit quaternion.</summary>
        public static float NormalizeMut(this ref global::PhysX.PxQuat @self_)
        {
            return NativeMethods.PxQuat_normalize_mut((global::PhysX.PxQuat*)Unsafe.AsPointer(ref @self_));
        }

        public static global::PhysX.PxQuat GetConjugate(this ref global::PhysX.PxQuat @self_)
        {
            return NativeMethods.PxQuat_getConjugate((global::PhysX.PxQuat*)Unsafe.AsPointer(ref @self_));
        }

        public static global::PhysX.PxVec3 GetImaginaryPart(this ref global::PhysX.PxQuat @self_)
        {
            return NativeMethods.PxQuat_getImaginaryPart((global::PhysX.PxQuat*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>brief computes rotation of x-axis</summary>
        public static global::PhysX.PxVec3 GetBasisVector0(this ref global::PhysX.PxQuat @self_)
        {
            return NativeMethods.PxQuat_getBasisVector0((global::PhysX.PxQuat*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>brief computes rotation of y-axis</summary>
        public static global::PhysX.PxVec3 GetBasisVector1(this ref global::PhysX.PxQuat @self_)
        {
            return NativeMethods.PxQuat_getBasisVector1((global::PhysX.PxQuat*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>brief computes rotation of z-axis</summary>
        public static global::PhysX.PxVec3 GetBasisVector2(this ref global::PhysX.PxQuat @self_)
        {
            return NativeMethods.PxQuat_getBasisVector2((global::PhysX.PxQuat*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>rotates passed vec by this (assumed unitary)</summary>
        public static global::PhysX.PxVec3 Rotate(this ref global::PhysX.PxQuat @self_, global::PhysX.PxVec3* @v)
        {
            return NativeMethods.PxQuat_rotate((global::PhysX.PxQuat*)Unsafe.AsPointer(ref @self_), @v);
        }

        /// <summary>inverse rotates passed vec by this (assumed unitary)</summary>
        public static global::PhysX.PxVec3 RotateInv(this ref global::PhysX.PxQuat @self_, global::PhysX.PxVec3* @v)
        {
            return NativeMethods.PxQuat_rotateInv((global::PhysX.PxQuat*)Unsafe.AsPointer(ref @self_), @v);
        }

        public static global::PhysX.PxTransform TransformNew3(this ref global::PhysX.PxQuat @orientation)
        {
            return NativeMethods.PxTransform_new_3((global::PhysX.PxQuat*)Unsafe.AsPointer(ref @orientation));
        }

        /// <summary>Construct from a quaternion</summary>
        public static global::PhysX.PxMat33 Mat33New6(this ref global::PhysX.PxQuat @q)
        {
            return NativeMethods.PxMat33_new_6((global::PhysX.PxQuat*)Unsafe.AsPointer(ref @q));
        }

        /// <summary>Construct from a quaternion</summary>
        public static global::PhysX.PxMat44 Mat44New7(this ref global::PhysX.PxQuat @q)
        {
            return NativeMethods.PxMat44_new_7((global::PhysX.PxQuat*)Unsafe.AsPointer(ref @q));
        }

        /// <summary>return Returns the log of a PxQuat</summary>
        public static global::PhysX.PxVec3 PhysPxLog(this ref global::PhysX.PxQuat @q)
        {
            return NativeMethods.phys_PxLog((global::PhysX.PxQuat*)Unsafe.AsPointer(ref @q));
        }

        /// <summary>Compute from an input quaternion q a pair of quaternions (swing, twist) such that q = swing * twist with the caveats that swing.x = twist.y = twist.z = 0.</summary>
        public static void PhysPxSeparateSwingTwist(this ref global::PhysX.PxQuat @q, global::PhysX.PxQuat* @swing, global::PhysX.PxQuat* @twist)
        {
            NativeMethods.phys_PxSeparateSwingTwist((global::PhysX.PxQuat*)Unsafe.AsPointer(ref @q), @swing, @twist);
        }

        #endregion

        #region PhysX.PxMat44(13)

        public static global::PhysX.PxTransform TransformNew6(this ref global::PhysX.PxMat44 @m)
        {
            return NativeMethods.PxTransform_new_6((global::PhysX.PxMat44*)Unsafe.AsPointer(ref @m));
        }

        /// <summary>Get transposed matrix</summary>
        public static global::PhysX.PxMat44 GetTranspose(this ref global::PhysX.PxMat44 @self_)
        {
            return NativeMethods.PxMat44_getTranspose((global::PhysX.PxMat44*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Transform vector by matrix, equal to v' = M*v</summary>
        public static global::PhysX.PxVec4 Transform(this ref global::PhysX.PxMat44 @self_, global::PhysX.PxVec4* @other)
        {
            return NativeMethods.PxMat44_transform((global::PhysX.PxMat44*)Unsafe.AsPointer(ref @self_), @other);
        }

        /// <summary>Transform vector by matrix, equal to v' = M*v</summary>
        public static global::PhysX.PxVec3 Transform1(this ref global::PhysX.PxMat44 @self_, global::PhysX.PxVec3* @other)
        {
            return NativeMethods.PxMat44_transform_1((global::PhysX.PxMat44*)Unsafe.AsPointer(ref @self_), @other);
        }

        /// <summary>Rotate vector by matrix, equal to v' = M*v</summary>
        public static global::PhysX.PxVec4 Rotate(this ref global::PhysX.PxMat44 @self_, global::PhysX.PxVec4* @other)
        {
            return NativeMethods.PxMat44_rotate((global::PhysX.PxMat44*)Unsafe.AsPointer(ref @self_), @other);
        }

        /// <summary>Rotate vector by matrix, equal to v' = M*v</summary>
        public static global::PhysX.PxVec3 Rotate1(this ref global::PhysX.PxMat44 @self_, global::PhysX.PxVec3* @other)
        {
            return NativeMethods.PxMat44_rotate_1((global::PhysX.PxMat44*)Unsafe.AsPointer(ref @self_), @other);
        }

        public static global::PhysX.PxVec3 GetBasis(this ref global::PhysX.PxMat44 @self_, uint @num)
        {
            return NativeMethods.PxMat44_getBasis((global::PhysX.PxMat44*)Unsafe.AsPointer(ref @self_), @num);
        }

        public static global::PhysX.PxVec3 GetPosition(this ref global::PhysX.PxMat44 @self_)
        {
            return NativeMethods.PxMat44_getPosition((global::PhysX.PxMat44*)Unsafe.AsPointer(ref @self_));
        }

        public static void SetPositionMut(this ref global::PhysX.PxMat44 @self_, global::PhysX.PxVec3* @position)
        {
            NativeMethods.PxMat44_setPosition_mut((global::PhysX.PxMat44*)Unsafe.AsPointer(ref @self_), @position);
        }

        public static float* Front(this ref global::PhysX.PxMat44 @self_)
        {
            return NativeMethods.PxMat44_front((global::PhysX.PxMat44*)Unsafe.AsPointer(ref @self_));
        }

        public static void ScaleMut(this ref global::PhysX.PxMat44 @self_, global::PhysX.PxVec4* @p)
        {
            NativeMethods.PxMat44_scale_mut((global::PhysX.PxMat44*)Unsafe.AsPointer(ref @self_), @p);
        }

        public static global::PhysX.PxMat44 InverseRT(this ref global::PhysX.PxMat44 @self_)
        {
            return NativeMethods.PxMat44_inverseRT((global::PhysX.PxMat44*)Unsafe.AsPointer(ref @self_));
        }

        public static bool IsFinite(this ref global::PhysX.PxMat44 @self_)
        {
            return NativeMethods.PxMat44_isFinite((global::PhysX.PxMat44*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxTransform(17)

        public static global::PhysX.PxTransform GetInverse(this ref global::PhysX.PxTransform @self_)
        {
            return NativeMethods.PxTransform_getInverse((global::PhysX.PxTransform*)Unsafe.AsPointer(ref @self_));
        }

        public static global::PhysX.PxVec3 Transform(this ref global::PhysX.PxTransform @self_, global::PhysX.PxVec3* @input)
        {
            return NativeMethods.PxTransform_transform((global::PhysX.PxTransform*)Unsafe.AsPointer(ref @self_), @input);
        }

        public static global::PhysX.PxVec3 TransformInv(this ref global::PhysX.PxTransform @self_, global::PhysX.PxVec3* @input)
        {
            return NativeMethods.PxTransform_transformInv((global::PhysX.PxTransform*)Unsafe.AsPointer(ref @self_), @input);
        }

        public static global::PhysX.PxVec3 Rotate(this ref global::PhysX.PxTransform @self_, global::PhysX.PxVec3* @input)
        {
            return NativeMethods.PxTransform_rotate((global::PhysX.PxTransform*)Unsafe.AsPointer(ref @self_), @input);
        }

        public static global::PhysX.PxVec3 RotateInv(this ref global::PhysX.PxTransform @self_, global::PhysX.PxVec3* @input)
        {
            return NativeMethods.PxTransform_rotateInv((global::PhysX.PxTransform*)Unsafe.AsPointer(ref @self_), @input);
        }

        /// <summary>Transform transform to parent (returns compound transform: first src, then *this)</summary>
        public static global::PhysX.PxTransform Transform1(this ref global::PhysX.PxTransform @self_, global::PhysX.PxTransform* @src)
        {
            return NativeMethods.PxTransform_transform_1((global::PhysX.PxTransform*)Unsafe.AsPointer(ref @self_), @src);
        }

        /// <summary>returns true if finite and q is a unit quaternion</summary>
        public static bool IsValid(this ref global::PhysX.PxTransform @self_)
        {
            return NativeMethods.PxTransform_isValid((global::PhysX.PxTransform*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>returns true if finite and quat magnitude is reasonably close to unit to allow for some accumulation of error vs isValid</summary>
        public static bool IsSane(this ref global::PhysX.PxTransform @self_)
        {
            return NativeMethods.PxTransform_isSane((global::PhysX.PxTransform*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>returns true if all elems are finite (not NAN or INF, etc.)</summary>
        public static bool IsFinite(this ref global::PhysX.PxTransform @self_)
        {
            return NativeMethods.PxTransform_isFinite((global::PhysX.PxTransform*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Transform transform from parent (returns compound transform: first src, then this-&gt;inverse)</summary>
        public static global::PhysX.PxTransform TransformInv1(this ref global::PhysX.PxTransform @self_, global::PhysX.PxTransform* @src)
        {
            return NativeMethods.PxTransform_transformInv_1((global::PhysX.PxTransform*)Unsafe.AsPointer(ref @self_), @src);
        }

        /// <summary>return a normalized transform (i.e. one in which the quaternion has unit magnitude)</summary>
        public static global::PhysX.PxTransform GetNormalized(this ref global::PhysX.PxTransform @self_)
        {
            return NativeMethods.PxTransform_getNormalized((global::PhysX.PxTransform*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Construct from pose and extent</summary>
        public static global::PhysX.PxBounds3 Bounds3PoseExtent(this ref global::PhysX.PxTransform @pose, global::PhysX.PxVec3* @extent)
        {
            return NativeMethods.PxBounds3_poseExtent((global::PhysX.PxTransform*)Unsafe.AsPointer(ref @pose), @extent);
        }

        /// <summary>gets the transformed bounds of the passed AABB (resulting in a bigger AABB).  This version is safe to call for empty bounds.</summary>
        public static global::PhysX.PxBounds3 Bounds3TransformSafe1(this ref global::PhysX.PxTransform @transform, global::PhysX.PxBounds3* @bounds)
        {
            return NativeMethods.PxBounds3_transformSafe_1((global::PhysX.PxTransform*)Unsafe.AsPointer(ref @transform), @bounds);
        }

        /// <summary>gets the transformed bounds of the passed AABB (resulting in a bigger AABB).  Calling this method for empty bounds leads to undefined behavior. Use [`transformSafe`]() instead.</summary>
        public static global::PhysX.PxBounds3 Bounds3TransformFast1(this ref global::PhysX.PxTransform @transform, global::PhysX.PxBounds3* @bounds)
        {
            return NativeMethods.PxBounds3_transformFast_1((global::PhysX.PxTransform*)Unsafe.AsPointer(ref @transform), @bounds);
        }

        public static global::PhysX.PxMat44 Mat44New10(this ref global::PhysX.PxTransform @t)
        {
            return NativeMethods.PxMat44_new_10((global::PhysX.PxTransform*)Unsafe.AsPointer(ref @t));
        }

        /// <summary>creates a plane equation from a transform, such as the actor transform for a PxPlaneGeometry  the plane</summary>
        public static global::PhysX.PxPlane PhysPxPlaneEquationFromTransform(this ref global::PhysX.PxTransform @pose)
        {
            return NativeMethods.phys_PxPlaneEquationFromTransform((global::PhysX.PxTransform*)Unsafe.AsPointer(ref @pose));
        }

        /// <summary>integrate transform.</summary>
        public static void PhysPxIntegrateTransform(this ref global::PhysX.PxTransform @curTrans, global::PhysX.PxVec3* @linvel, global::PhysX.PxVec3* @angvel, float @timeStep, global::PhysX.PxTransform* @result)
        {
            NativeMethods.phys_PxIntegrateTransform((global::PhysX.PxTransform*)Unsafe.AsPointer(ref @curTrans), @linvel, @angvel, @timeStep, @result);
        }

        #endregion

        #region PhysX.PxBounds3(23)

        /// <summary>Sets empty to true</summary>
        public static void SetEmptyMut(this ref global::PhysX.PxBounds3 @self_)
        {
            NativeMethods.PxBounds3_setEmpty_mut((global::PhysX.PxBounds3*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Sets the bounds to maximum size [-PX_MAX_BOUNDS_EXTENTS, PX_MAX_BOUNDS_EXTENTS].</summary>
        public static void SetMaximalMut(this ref global::PhysX.PxBounds3 @self_)
        {
            NativeMethods.PxBounds3_setMaximal_mut((global::PhysX.PxBounds3*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>expands the volume to include v</summary>
        public static void IncludeMut(this ref global::PhysX.PxBounds3 @self_, global::PhysX.PxVec3* @v)
        {
            NativeMethods.PxBounds3_include_mut((global::PhysX.PxBounds3*)Unsafe.AsPointer(ref @self_), @v);
        }

        /// <summary>expands the volume to include b.</summary>
        public static void IncludeMut1(this ref global::PhysX.PxBounds3 @self_, global::PhysX.PxBounds3* @b)
        {
            NativeMethods.PxBounds3_include_mut_1((global::PhysX.PxBounds3*)Unsafe.AsPointer(ref @self_), @b);
        }

        public static bool IsEmpty(this ref global::PhysX.PxBounds3 @self_)
        {
            return NativeMethods.PxBounds3_isEmpty((global::PhysX.PxBounds3*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>indicates whether the intersection of this and b is empty or not.</summary>
        public static bool Intersects(this ref global::PhysX.PxBounds3 @self_, global::PhysX.PxBounds3* @b)
        {
            return NativeMethods.PxBounds3_intersects((global::PhysX.PxBounds3*)Unsafe.AsPointer(ref @self_), @b);
        }

        /// <summary>computes the 1D-intersection between two AABBs, on a given axis.</summary>
        public static bool Intersects1D(this ref global::PhysX.PxBounds3 @self_, global::PhysX.PxBounds3* @a, uint @axis)
        {
            return NativeMethods.PxBounds3_intersects1D((global::PhysX.PxBounds3*)Unsafe.AsPointer(ref @self_), @a, @axis);
        }

        /// <summary>indicates if these bounds contain v.</summary>
        public static bool Contains(this ref global::PhysX.PxBounds3 @self_, global::PhysX.PxVec3* @v)
        {
            return NativeMethods.PxBounds3_contains((global::PhysX.PxBounds3*)Unsafe.AsPointer(ref @self_), @v);
        }

        /// <summary>checks a box is inside another box.</summary>
        public static bool IsInside(this ref global::PhysX.PxBounds3 @self_, global::PhysX.PxBounds3* @box_)
        {
            return NativeMethods.PxBounds3_isInside((global::PhysX.PxBounds3*)Unsafe.AsPointer(ref @self_), @box_);
        }

        /// <summary>returns the center of this axis aligned box.</summary>
        public static global::PhysX.PxVec3 GetCenter(this ref global::PhysX.PxBounds3 @self_)
        {
            return NativeMethods.PxBounds3_getCenter((global::PhysX.PxBounds3*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>get component of the box's center along a given axis</summary>
        public static float GetCenter1(this ref global::PhysX.PxBounds3 @self_, uint @axis)
        {
            return NativeMethods.PxBounds3_getCenter_1((global::PhysX.PxBounds3*)Unsafe.AsPointer(ref @self_), @axis);
        }

        /// <summary>get component of the box's extents along a given axis</summary>
        public static float GetExtents(this ref global::PhysX.PxBounds3 @self_, uint @axis)
        {
            return NativeMethods.PxBounds3_getExtents((global::PhysX.PxBounds3*)Unsafe.AsPointer(ref @self_), @axis);
        }

        /// <summary>returns the dimensions (width/height/depth) of this axis aligned box.</summary>
        public static global::PhysX.PxVec3 GetDimensions(this ref global::PhysX.PxBounds3 @self_)
        {
            return NativeMethods.PxBounds3_getDimensions((global::PhysX.PxBounds3*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>returns the extents, which are half of the width/height/depth.</summary>
        public static global::PhysX.PxVec3 GetExtents1(this ref global::PhysX.PxBounds3 @self_)
        {
            return NativeMethods.PxBounds3_getExtents_1((global::PhysX.PxBounds3*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>scales the AABB.  This version is safe to call for empty bounds.</summary>
        public static void ScaleSafeMut(this ref global::PhysX.PxBounds3 @self_, float @scale)
        {
            NativeMethods.PxBounds3_scaleSafe_mut((global::PhysX.PxBounds3*)Unsafe.AsPointer(ref @self_), @scale);
        }

        /// <summary>scales the AABB.  Calling this method for empty bounds leads to undefined behavior. Use [`scaleSafe`]() instead.</summary>
        public static void ScaleFastMut(this ref global::PhysX.PxBounds3 @self_, float @scale)
        {
            NativeMethods.PxBounds3_scaleFast_mut((global::PhysX.PxBounds3*)Unsafe.AsPointer(ref @self_), @scale);
        }

        /// <summary>fattens the AABB in all 3 dimensions by the given distance.  This version is safe to call for empty bounds.</summary>
        public static void FattenSafeMut(this ref global::PhysX.PxBounds3 @self_, float @distance)
        {
            NativeMethods.PxBounds3_fattenSafe_mut((global::PhysX.PxBounds3*)Unsafe.AsPointer(ref @self_), @distance);
        }

        /// <summary>fattens the AABB in all 3 dimensions by the given distance.  Calling this method for empty bounds leads to undefined behavior. Use [`fattenSafe`]() instead.</summary>
        public static void FattenFastMut(this ref global::PhysX.PxBounds3 @self_, float @distance)
        {
            NativeMethods.PxBounds3_fattenFast_mut((global::PhysX.PxBounds3*)Unsafe.AsPointer(ref @self_), @distance);
        }

        /// <summary>checks that the AABB values are not NaN</summary>
        public static bool IsFinite(this ref global::PhysX.PxBounds3 @self_)
        {
            return NativeMethods.PxBounds3_isFinite((global::PhysX.PxBounds3*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>checks that the AABB values describe a valid configuration.</summary>
        public static bool IsValid(this ref global::PhysX.PxBounds3 @self_)
        {
            return NativeMethods.PxBounds3_isValid((global::PhysX.PxBounds3*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Finds the closest point in the box to the point p. If p is contained, this will be p, otherwise it will be the closest point on the surface of the box.</summary>
        public static global::PhysX.PxVec3 ClosestPoint(this ref global::PhysX.PxBounds3 @self_, global::PhysX.PxVec3* @p)
        {
            return NativeMethods.PxBounds3_closestPoint((global::PhysX.PxBounds3*)Unsafe.AsPointer(ref @self_), @p);
        }

        /// <summary>computes the bounds for a geometry object</summary>
        public static void GeometryQueryComputeGeomBounds(this ref global::PhysX.PxBounds3 @bounds, global::PhysX.PxGeometry* @geom, global::PhysX.PxTransform* @pose, float @offset, float @inflation, global::PhysX.PxGeometryQueryFlags @queryFlags)
        {
            NativeMethods.PxGeometryQuery_computeGeomBounds((global::PhysX.PxBounds3*)Unsafe.AsPointer(ref @bounds), @geom, @pose, @offset, @inflation, @queryFlags);
        }

        /// <summary>Creates regions for PxSceneDesc, from a global box.  This helper simply subdivides the given global box into a 2D grid of smaller boxes. Each one of those smaller boxes is a region of interest for the broadphase. There are nbSubdiv*nbSubdiv regions in the 2D grid. The function does not subdivide along the given up axis.  This is the simplest setup one can use with PxBroadPhaseType::eMBP. A more sophisticated setup would try to cover the game world with a non-uniform set of regions (i.e. not just a grid).  number of regions written out to the 'regions' array</summary>
        public static uint BroadPhaseExtCreateRegionsFromWorldBounds(this ref global::PhysX.PxBounds3 @regions, global::PhysX.PxBounds3* @globalBounds, uint @nbSubdiv, uint @upAxis)
        {
            return NativeMethods.PxBroadPhaseExt_createRegionsFromWorldBounds((global::PhysX.PxBounds3*)Unsafe.AsPointer(ref @regions), @globalBounds, @nbSubdiv, @upAxis);
        }

        #endregion

        #region PhysX.PxErrorCallback(4)

        public static void Delete(this ref global::PhysX.PxErrorCallback @self_)
        {
            NativeMethods.PxErrorCallback_delete((global::PhysX.PxErrorCallback*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Reports an error code.</summary>
        public static void ReportErrorMut(this ref global::PhysX.PxErrorCallback @self_, global::PhysX.PxErrorCode @code, byte* @message, byte* @file, int @line)
        {
            NativeMethods.PxErrorCallback_reportError_mut((global::PhysX.PxErrorCallback*)Unsafe.AsPointer(ref @self_), @code, @message, @file, @line);
        }

        /// <summary>The default constructor.</summary>
        public static global::PhysX.PxBroadcastingErrorCallback* BroadcastingErrorCallbackNewAlloc(this ref global::PhysX.PxErrorCallback @errorCallback)
        {
            return NativeMethods.PxBroadcastingErrorCallback_new_alloc((global::PhysX.PxErrorCallback*)Unsafe.AsPointer(ref @errorCallback));
        }

        /// <summary>Construct a new PxTaskManager instance with the given [optional] dispatchers</summary>
        public static global::PhysX.PxTaskManager* TaskManagerCreateTaskManager(this ref global::PhysX.PxErrorCallback @errorCallback, global::PhysX.PxCpuDispatcher* @anon_param1)
        {
            return NativeMethods.PxTaskManager_createTaskManager((global::PhysX.PxErrorCallback*)Unsafe.AsPointer(ref @errorCallback), @anon_param1);
        }

        #endregion

        #region PhysX.PxAllocationListener(2)

        /// <summary>callback when memory is allocated.</summary>
        public static void OnAllocationMut(this ref global::PhysX.PxAllocationListener @self_, nuint @size, byte* @typeName, byte* @filename, int @line, void* @allocatedMemory)
        {
            NativeMethods.PxAllocationListener_onAllocation_mut((global::PhysX.PxAllocationListener*)Unsafe.AsPointer(ref @self_), @size, @typeName, @filename, @line, @allocatedMemory);
        }

        /// <summary>callback when memory is deallocated.</summary>
        public static void OnDeallocationMut(this ref global::PhysX.PxAllocationListener @self_, void* @allocatedMemory)
        {
            NativeMethods.PxAllocationListener_onDeallocation_mut((global::PhysX.PxAllocationListener*)Unsafe.AsPointer(ref @self_), @allocatedMemory);
        }

        #endregion

        #region PhysX.PxBroadcastingAllocator(3)

        /// <summary>The default constructor.</summary>
        public static void Delete(this ref global::PhysX.PxBroadcastingAllocator @self_)
        {
            NativeMethods.PxBroadcastingAllocator_delete((global::PhysX.PxBroadcastingAllocator*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Allocates size bytes of memory, which must be 16-byte aligned.  This method should never return NULL.  If you run out of memory, then you should terminate the app or take some other appropriate action.  Threading: This function should be thread safe as it can be called in the context of the user thread and physics processing thread(s).  The allocated block of memory.</summary>
        public static void* AllocateMut(this ref global::PhysX.PxBroadcastingAllocator @self_, nuint @size, byte* @typeName, byte* @filename, int @line)
        {
            return NativeMethods.PxBroadcastingAllocator_allocate_mut((global::PhysX.PxBroadcastingAllocator*)Unsafe.AsPointer(ref @self_), @size, @typeName, @filename, @line);
        }

        /// <summary>Frees memory previously allocated by allocate().  Threading: This function should be thread safe as it can be called in the context of the user thread and physics processing thread(s).</summary>
        public static void DeallocateMut(this ref global::PhysX.PxBroadcastingAllocator @self_, void* @ptr)
        {
            NativeMethods.PxBroadcastingAllocator_deallocate_mut((global::PhysX.PxBroadcastingAllocator*)Unsafe.AsPointer(ref @self_), @ptr);
        }

        #endregion

        #region PhysX.PxBroadcastingErrorCallback(2)

        /// <summary>The default destructor.</summary>
        public static void Delete(this ref global::PhysX.PxBroadcastingErrorCallback @self_)
        {
            NativeMethods.PxBroadcastingErrorCallback_delete((global::PhysX.PxBroadcastingErrorCallback*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Reports an error code.</summary>
        public static void ReportErrorMut(this ref global::PhysX.PxBroadcastingErrorCallback @self_, global::PhysX.PxErrorCode @code, byte* @message, byte* @file, int @line)
        {
            NativeMethods.PxBroadcastingErrorCallback_reportError_mut((global::PhysX.PxBroadcastingErrorCallback*)Unsafe.AsPointer(ref @self_), @code, @message, @file, @line);
        }

        #endregion

        #region PhysX.PxInputStream(2)

        /// <summary>read from the stream. The number of bytes read may be less than the number requested.  the number of bytes read from the stream.</summary>
        public static uint ReadMut(this ref global::PhysX.PxInputStream @self_, void* @dest, uint @count)
        {
            return NativeMethods.PxInputStream_read_mut((global::PhysX.PxInputStream*)Unsafe.AsPointer(ref @self_), @dest, @count);
        }

        public static void Delete(this ref global::PhysX.PxInputStream @self_)
        {
            NativeMethods.PxInputStream_delete((global::PhysX.PxInputStream*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxInputData(5)

        /// <summary>return the length of the input data  size in bytes of the input data</summary>
        public static uint GetLength(this ref global::PhysX.PxInputData @self_)
        {
            return NativeMethods.PxInputData_getLength((global::PhysX.PxInputData*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>seek to the given offset from the start of the data.</summary>
        public static void SeekMut(this ref global::PhysX.PxInputData @self_, uint @offset)
        {
            NativeMethods.PxInputData_seek_mut((global::PhysX.PxInputData*)Unsafe.AsPointer(ref @self_), @offset);
        }

        /// <summary>return the current offset from the start of the data  the offset to seek to.</summary>
        public static uint Tell(this ref global::PhysX.PxInputData @self_)
        {
            return NativeMethods.PxInputData_tell((global::PhysX.PxInputData*)Unsafe.AsPointer(ref @self_));
        }

        public static void Delete(this ref global::PhysX.PxInputData @self_)
        {
            NativeMethods.PxInputData_delete((global::PhysX.PxInputData*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Creates a PxCollection from XML data.  a pointer to a PxCollection if successful or NULL if it failed.</summary>
        public static global::PhysX.PxCollection* SerializationCreateCollectionFromXml(this ref global::PhysX.PxInputData @inputData, global::PhysX.PxCooking* @cooking, global::PhysX.PxSerializationRegistry* @sr, global::PhysX.PxCollection* @externalRefs, global::PhysX.PxStringTable* @stringTable, global::PhysX.PxXmlMiscParameter* @outArgs)
        {
            return NativeMethods.PxSerialization_createCollectionFromXml((global::PhysX.PxInputData*)Unsafe.AsPointer(ref @inputData), @cooking, @sr, @externalRefs, @stringTable, @outArgs);
        }

        #endregion

        #region PhysX.PxOutputStream(5)

        /// <summary>write to the stream. The number of bytes written may be less than the number sent.  the number of bytes written to the stream by this call.</summary>
        public static uint WriteMut(this ref global::PhysX.PxOutputStream @self_, void* @src, uint @count)
        {
            return NativeMethods.PxOutputStream_write_mut((global::PhysX.PxOutputStream*)Unsafe.AsPointer(ref @self_), @src, @count);
        }

        public static void Delete(this ref global::PhysX.PxOutputStream @self_)
        {
            NativeMethods.PxOutputStream_delete((global::PhysX.PxOutputStream*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Put class meta data in stream, used for serialization</summary>
        public static void JointGetBinaryMetaData(this ref global::PhysX.PxOutputStream @stream)
        {
            NativeMethods.PxJoint_getBinaryMetaData((global::PhysX.PxOutputStream*)Unsafe.AsPointer(ref @stream));
        }

        /// <summary>Serializes a physics collection to an XML output stream.  The collection to be serialized needs to be complete  Serialization of objects in a scene that is simultaneously being simulated is not supported and leads to undefined behavior.  true if the collection is successfully serialized.</summary>
        public static bool SerializationSerializeCollectionToXml(this ref global::PhysX.PxOutputStream @outputStream, global::PhysX.PxCollection* @collection, global::PhysX.PxSerializationRegistry* @sr, global::PhysX.PxCooking* @cooking, global::PhysX.PxCollection* @externalRefs, global::PhysX.PxXmlMiscParameter* @inArgs)
        {
            return NativeMethods.PxSerialization_serializeCollectionToXml((global::PhysX.PxOutputStream*)Unsafe.AsPointer(ref @outputStream), @collection, @sr, @cooking, @externalRefs, @inArgs);
        }

        /// <summary>Serializes a collection to a binary stream.  Serializes a collection to a stream. In order to resolve external dependencies the externalReferences collection has to be provided. Optionally names of objects that where set for example with [`PxActor::setName`] are serialized along with the objects.  The collection can be successfully serialized if isSerializable(collection) returns true. See [`isSerializable`].  The implementation of the output stream needs to fulfill the requirements on the memory block input taken by PxSerialization::createCollectionFromBinary.  Serialization of objects in a scene that is simultaneously being simulated is not supported and leads to undefined behavior.  Whether serialization was successful</summary>
        public static bool SerializationSerializeCollectionToBinary(this ref global::PhysX.PxOutputStream @outputStream, global::PhysX.PxCollection* @collection, global::PhysX.PxSerializationRegistry* @sr, global::PhysX.PxCollection* @externalRefs, bool @exportNames)
        {
            return NativeMethods.PxSerialization_serializeCollectionToBinary((global::PhysX.PxOutputStream*)Unsafe.AsPointer(ref @outputStream), @collection, @sr, @externalRefs, @exportNames);
        }

        #endregion

        #region PhysX.PxVec4(14)

        /// <summary>tests for exact zero vector</summary>
        public static bool IsZero(this ref global::PhysX.PxVec4 @self_)
        {
            return NativeMethods.PxVec4_isZero((global::PhysX.PxVec4*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>returns true if all 3 elems of the vector are finite (not NAN or INF, etc.)</summary>
        public static bool IsFinite(this ref global::PhysX.PxVec4 @self_)
        {
            return NativeMethods.PxVec4_isFinite((global::PhysX.PxVec4*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>is normalized - used by API parameter validation</summary>
        public static bool IsNormalized(this ref global::PhysX.PxVec4 @self_)
        {
            return NativeMethods.PxVec4_isNormalized((global::PhysX.PxVec4*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>returns the squared magnitude  Avoids calling PxSqrt()!</summary>
        public static float MagnitudeSquared(this ref global::PhysX.PxVec4 @self_)
        {
            return NativeMethods.PxVec4_magnitudeSquared((global::PhysX.PxVec4*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>returns the magnitude</summary>
        public static float Magnitude(this ref global::PhysX.PxVec4 @self_)
        {
            return NativeMethods.PxVec4_magnitude((global::PhysX.PxVec4*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>returns the scalar product of this and other.</summary>
        public static float Dot(this ref global::PhysX.PxVec4 @self_, global::PhysX.PxVec4* @v)
        {
            return NativeMethods.PxVec4_dot((global::PhysX.PxVec4*)Unsafe.AsPointer(ref @self_), @v);
        }

        /// <summary>returns a unit vector</summary>
        public static global::PhysX.PxVec4 GetNormalized(this ref global::PhysX.PxVec4 @self_)
        {
            return NativeMethods.PxVec4_getNormalized((global::PhysX.PxVec4*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>normalizes the vector in place</summary>
        public static float NormalizeMut(this ref global::PhysX.PxVec4 @self_)
        {
            return NativeMethods.PxVec4_normalize_mut((global::PhysX.PxVec4*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>a[i] * b[i], for all i.</summary>
        public static global::PhysX.PxVec4 Multiply(this ref global::PhysX.PxVec4 @self_, global::PhysX.PxVec4* @a)
        {
            return NativeMethods.PxVec4_multiply((global::PhysX.PxVec4*)Unsafe.AsPointer(ref @self_), @a);
        }

        /// <summary>element-wise minimum</summary>
        public static global::PhysX.PxVec4 Minimum(this ref global::PhysX.PxVec4 @self_, global::PhysX.PxVec4* @v)
        {
            return NativeMethods.PxVec4_minimum((global::PhysX.PxVec4*)Unsafe.AsPointer(ref @self_), @v);
        }

        /// <summary>element-wise maximum</summary>
        public static global::PhysX.PxVec4 Maximum(this ref global::PhysX.PxVec4 @self_, global::PhysX.PxVec4* @v)
        {
            return NativeMethods.PxVec4_maximum((global::PhysX.PxVec4*)Unsafe.AsPointer(ref @self_), @v);
        }

        public static global::PhysX.PxVec3 GetXYZ(this ref global::PhysX.PxVec4 @self_)
        {
            return NativeMethods.PxVec4_getXYZ((global::PhysX.PxVec4*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Construct from four 4-vectors</summary>
        public static global::PhysX.PxMat44 Mat44New3(this ref global::PhysX.PxVec4 @col0, global::PhysX.PxVec4* @col1, global::PhysX.PxVec4* @col2, global::PhysX.PxVec4* @col3)
        {
            return NativeMethods.PxMat44_new_3((global::PhysX.PxVec4*)Unsafe.AsPointer(ref @col0), @col1, @col2, @col3);
        }

        /// <summary>Construct from a diagonal vector</summary>
        public static global::PhysX.PxMat44 Mat44New8(this ref global::PhysX.PxVec4 @diagonal)
        {
            return NativeMethods.PxMat44_new_8((global::PhysX.PxVec4*)Unsafe.AsPointer(ref @diagonal));
        }

        #endregion

        #region PhysX.PxPlane(8)

        public static float Distance(this ref global::PhysX.PxPlane @self_, global::PhysX.PxVec3* @p)
        {
            return NativeMethods.PxPlane_distance((global::PhysX.PxPlane*)Unsafe.AsPointer(ref @self_), @p);
        }

        public static bool Contains(this ref global::PhysX.PxPlane @self_, global::PhysX.PxVec3* @p)
        {
            return NativeMethods.PxPlane_contains((global::PhysX.PxPlane*)Unsafe.AsPointer(ref @self_), @p);
        }

        /// <summary>projects p into the plane</summary>
        public static global::PhysX.PxVec3 Project(this ref global::PhysX.PxPlane @self_, global::PhysX.PxVec3* @p)
        {
            return NativeMethods.PxPlane_project((global::PhysX.PxPlane*)Unsafe.AsPointer(ref @self_), @p);
        }

        /// <summary>find an arbitrary point in the plane</summary>
        public static global::PhysX.PxVec3 PointInPlane(this ref global::PhysX.PxPlane @self_)
        {
            return NativeMethods.PxPlane_pointInPlane((global::PhysX.PxPlane*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>equivalent plane with unit normal</summary>
        public static void NormalizeMut(this ref global::PhysX.PxPlane @self_)
        {
            NativeMethods.PxPlane_normalize_mut((global::PhysX.PxPlane*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>transform plane</summary>
        public static global::PhysX.PxPlane Transform(this ref global::PhysX.PxPlane @self_, global::PhysX.PxTransform* @pose)
        {
            return NativeMethods.PxPlane_transform((global::PhysX.PxPlane*)Unsafe.AsPointer(ref @self_), @pose);
        }

        /// <summary>inverse-transform plane</summary>
        public static global::PhysX.PxPlane InverseTransform(this ref global::PhysX.PxPlane @self_, global::PhysX.PxTransform* @pose)
        {
            return NativeMethods.PxPlane_inverseTransform((global::PhysX.PxPlane*)Unsafe.AsPointer(ref @self_), @pose);
        }

        /// <summary>creates a transform from a plane equation, suitable for an actor transform for a PxPlaneGeometry  a PxTransform which will transform the plane PxPlane(1,0,0,0) to the specified plane</summary>
        public static global::PhysX.PxTransform PhysPxTransformFromPlaneEquation(this ref global::PhysX.PxPlane @plane)
        {
            return NativeMethods.phys_PxTransformFromPlaneEquation((global::PhysX.PxPlane*)Unsafe.AsPointer(ref @plane));
        }

        #endregion

        #region PhysX.PxMutexImpl(4)

        /// <summary>The destructor for Mutex deletes the mutex.</summary>
        public static void Delete(this ref global::PhysX.PxMutexImpl @self_)
        {
            NativeMethods.PxMutexImpl_delete((global::PhysX.PxMutexImpl*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Acquire (lock) the mutex. If the mutex is already locked by another thread, this method blocks until the mutex is unlocked.</summary>
        public static void LockMut(this ref global::PhysX.PxMutexImpl @self_)
        {
            NativeMethods.PxMutexImpl_lock_mut((global::PhysX.PxMutexImpl*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Acquire (lock) the mutex. If the mutex is already locked by another thread, this method returns false without blocking.</summary>
        public static bool TrylockMut(this ref global::PhysX.PxMutexImpl @self_)
        {
            return NativeMethods.PxMutexImpl_trylock_mut((global::PhysX.PxMutexImpl*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Release (unlock) the mutex.</summary>
        public static void UnlockMut(this ref global::PhysX.PxMutexImpl @self_)
        {
            NativeMethods.PxMutexImpl_unlock_mut((global::PhysX.PxMutexImpl*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxReadWriteLock(5)

        public static void Delete(this ref global::PhysX.PxReadWriteLock @self_)
        {
            NativeMethods.PxReadWriteLock_delete((global::PhysX.PxReadWriteLock*)Unsafe.AsPointer(ref @self_));
        }

        public static void LockReaderMut(this ref global::PhysX.PxReadWriteLock @self_, bool @takeLock)
        {
            NativeMethods.PxReadWriteLock_lockReader_mut((global::PhysX.PxReadWriteLock*)Unsafe.AsPointer(ref @self_), @takeLock);
        }

        public static void LockWriterMut(this ref global::PhysX.PxReadWriteLock @self_)
        {
            NativeMethods.PxReadWriteLock_lockWriter_mut((global::PhysX.PxReadWriteLock*)Unsafe.AsPointer(ref @self_));
        }

        public static void UnlockReaderMut(this ref global::PhysX.PxReadWriteLock @self_)
        {
            NativeMethods.PxReadWriteLock_unlockReader_mut((global::PhysX.PxReadWriteLock*)Unsafe.AsPointer(ref @self_));
        }

        public static void UnlockWriterMut(this ref global::PhysX.PxReadWriteLock @self_)
        {
            NativeMethods.PxReadWriteLock_unlockWriter_mut((global::PhysX.PxReadWriteLock*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxProfileScoped(1)

        public static void Delete(this ref global::PhysX.PxProfileScoped @self_)
        {
            NativeMethods.PxProfileScoped_delete((global::PhysX.PxProfileScoped*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxSListEntry(1)

        public static global::PhysX.PxSListEntry* NextMut(this ref global::PhysX.PxSListEntry @self_)
        {
            return NativeMethods.PxSListEntry_next_mut((global::PhysX.PxSListEntry*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxSListImpl(4)

        public static void Delete(this ref global::PhysX.PxSListImpl @self_)
        {
            NativeMethods.PxSListImpl_delete((global::PhysX.PxSListImpl*)Unsafe.AsPointer(ref @self_));
        }

        public static void PushMut(this ref global::PhysX.PxSListImpl @self_, global::PhysX.PxSListEntry* @entry)
        {
            NativeMethods.PxSListImpl_push_mut((global::PhysX.PxSListImpl*)Unsafe.AsPointer(ref @self_), @entry);
        }

        public static global::PhysX.PxSListEntry* PopMut(this ref global::PhysX.PxSListImpl @self_)
        {
            return NativeMethods.PxSListImpl_pop_mut((global::PhysX.PxSListImpl*)Unsafe.AsPointer(ref @self_));
        }

        public static global::PhysX.PxSListEntry* FlushMut(this ref global::PhysX.PxSListImpl @self_)
        {
            return NativeMethods.PxSListImpl_flush_mut((global::PhysX.PxSListImpl*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxSyncImpl(4)

        public static void Delete(this ref global::PhysX.PxSyncImpl @self_)
        {
            NativeMethods.PxSyncImpl_delete((global::PhysX.PxSyncImpl*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Wait on the object for at most the given number of ms. Returns true if the object is signaled. Sync::waitForever will block forever or until the object is signaled.</summary>
        public static bool WaitMut(this ref global::PhysX.PxSyncImpl @self_, uint @milliseconds)
        {
            return NativeMethods.PxSyncImpl_wait_mut((global::PhysX.PxSyncImpl*)Unsafe.AsPointer(ref @self_), @milliseconds);
        }

        /// <summary>Signal the synchronization object, waking all threads waiting on it</summary>
        public static void SetMut(this ref global::PhysX.PxSyncImpl @self_)
        {
            NativeMethods.PxSyncImpl_set_mut((global::PhysX.PxSyncImpl*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Reset the synchronization object</summary>
        public static void ResetMut(this ref global::PhysX.PxSyncImpl @self_)
        {
            NativeMethods.PxSyncImpl_reset_mut((global::PhysX.PxSyncImpl*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxRunnable(2)

        public static void Delete(this ref global::PhysX.PxRunnable @self_)
        {
            NativeMethods.PxRunnable_delete((global::PhysX.PxRunnable*)Unsafe.AsPointer(ref @self_));
        }

        public static void ExecuteMut(this ref global::PhysX.PxRunnable @self_)
        {
            NativeMethods.PxRunnable_execute_mut((global::PhysX.PxRunnable*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxCounterFrequencyToTensOfNanos(1)

        public static ulong ToTensOfNanos(this ref global::PhysX.PxCounterFrequencyToTensOfNanos @self_, ulong @inCounter)
        {
            return NativeMethods.PxCounterFrequencyToTensOfNanos_toTensOfNanos((global::PhysX.PxCounterFrequencyToTensOfNanos*)Unsafe.AsPointer(ref @self_), @inCounter);
        }

        #endregion

        #region PhysX.PxTime(3)

        public static double GetElapsedSecondsMut(this ref global::PhysX.PxTime @self_)
        {
            return NativeMethods.PxTime_getElapsedSeconds_mut((global::PhysX.PxTime*)Unsafe.AsPointer(ref @self_));
        }

        public static double PeekElapsedSecondsMut(this ref global::PhysX.PxTime @self_)
        {
            return NativeMethods.PxTime_peekElapsedSeconds_mut((global::PhysX.PxTime*)Unsafe.AsPointer(ref @self_));
        }

        public static double GetLastTime(this ref global::PhysX.PxTime @self_)
        {
            return NativeMethods.PxTime_getLastTime((global::PhysX.PxTime*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxVec2(13)

        /// <summary>tests for exact zero vector</summary>
        public static bool IsZero(this ref global::PhysX.PxVec2 @self_)
        {
            return NativeMethods.PxVec2_isZero((global::PhysX.PxVec2*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>returns true if all 2 elems of the vector are finite (not NAN or INF, etc.)</summary>
        public static bool IsFinite(this ref global::PhysX.PxVec2 @self_)
        {
            return NativeMethods.PxVec2_isFinite((global::PhysX.PxVec2*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>is normalized - used by API parameter validation</summary>
        public static bool IsNormalized(this ref global::PhysX.PxVec2 @self_)
        {
            return NativeMethods.PxVec2_isNormalized((global::PhysX.PxVec2*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>returns the squared magnitude  Avoids calling PxSqrt()!</summary>
        public static float MagnitudeSquared(this ref global::PhysX.PxVec2 @self_)
        {
            return NativeMethods.PxVec2_magnitudeSquared((global::PhysX.PxVec2*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>returns the magnitude</summary>
        public static float Magnitude(this ref global::PhysX.PxVec2 @self_)
        {
            return NativeMethods.PxVec2_magnitude((global::PhysX.PxVec2*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>returns the scalar product of this and other.</summary>
        public static float Dot(this ref global::PhysX.PxVec2 @self_, global::PhysX.PxVec2* @v)
        {
            return NativeMethods.PxVec2_dot((global::PhysX.PxVec2*)Unsafe.AsPointer(ref @self_), @v);
        }

        /// <summary>returns a unit vector</summary>
        public static global::PhysX.PxVec2 GetNormalized(this ref global::PhysX.PxVec2 @self_)
        {
            return NativeMethods.PxVec2_getNormalized((global::PhysX.PxVec2*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>normalizes the vector in place</summary>
        public static float NormalizeMut(this ref global::PhysX.PxVec2 @self_)
        {
            return NativeMethods.PxVec2_normalize_mut((global::PhysX.PxVec2*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>a[i] * b[i], for all i.</summary>
        public static global::PhysX.PxVec2 Multiply(this ref global::PhysX.PxVec2 @self_, global::PhysX.PxVec2* @a)
        {
            return NativeMethods.PxVec2_multiply((global::PhysX.PxVec2*)Unsafe.AsPointer(ref @self_), @a);
        }

        /// <summary>element-wise minimum</summary>
        public static global::PhysX.PxVec2 Minimum(this ref global::PhysX.PxVec2 @self_, global::PhysX.PxVec2* @v)
        {
            return NativeMethods.PxVec2_minimum((global::PhysX.PxVec2*)Unsafe.AsPointer(ref @self_), @v);
        }

        /// <summary>returns MIN(x, y);</summary>
        public static float MinElement(this ref global::PhysX.PxVec2 @self_)
        {
            return NativeMethods.PxVec2_minElement((global::PhysX.PxVec2*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>element-wise maximum</summary>
        public static global::PhysX.PxVec2 Maximum(this ref global::PhysX.PxVec2 @self_, global::PhysX.PxVec2* @v)
        {
            return NativeMethods.PxVec2_maximum((global::PhysX.PxVec2*)Unsafe.AsPointer(ref @self_), @v);
        }

        /// <summary>returns MAX(x, y);</summary>
        public static float MaxElement(this ref global::PhysX.PxVec2 @self_)
        {
            return NativeMethods.PxVec2_maxElement((global::PhysX.PxVec2*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxRenderBuffer(16)

        public static void Delete(this ref global::PhysX.PxRenderBuffer @self_)
        {
            NativeMethods.PxRenderBuffer_delete((global::PhysX.PxRenderBuffer*)Unsafe.AsPointer(ref @self_));
        }

        public static uint GetNbPoints(this ref global::PhysX.PxRenderBuffer @self_)
        {
            return NativeMethods.PxRenderBuffer_getNbPoints((global::PhysX.PxRenderBuffer*)Unsafe.AsPointer(ref @self_));
        }

        public static global::PhysX.PxDebugPoint* GetPoints(this ref global::PhysX.PxRenderBuffer @self_)
        {
            return NativeMethods.PxRenderBuffer_getPoints((global::PhysX.PxRenderBuffer*)Unsafe.AsPointer(ref @self_));
        }

        public static void AddPointMut(this ref global::PhysX.PxRenderBuffer @self_, global::PhysX.PxDebugPoint* @point)
        {
            NativeMethods.PxRenderBuffer_addPoint_mut((global::PhysX.PxRenderBuffer*)Unsafe.AsPointer(ref @self_), @point);
        }

        public static uint GetNbLines(this ref global::PhysX.PxRenderBuffer @self_)
        {
            return NativeMethods.PxRenderBuffer_getNbLines((global::PhysX.PxRenderBuffer*)Unsafe.AsPointer(ref @self_));
        }

        public static global::PhysX.PxDebugLine* GetLines(this ref global::PhysX.PxRenderBuffer @self_)
        {
            return NativeMethods.PxRenderBuffer_getLines((global::PhysX.PxRenderBuffer*)Unsafe.AsPointer(ref @self_));
        }

        public static void AddLineMut(this ref global::PhysX.PxRenderBuffer @self_, global::PhysX.PxDebugLine* @line)
        {
            NativeMethods.PxRenderBuffer_addLine_mut((global::PhysX.PxRenderBuffer*)Unsafe.AsPointer(ref @self_), @line);
        }

        public static global::PhysX.PxDebugLine* ReserveLinesMut(this ref global::PhysX.PxRenderBuffer @self_, uint @nbLines)
        {
            return NativeMethods.PxRenderBuffer_reserveLines_mut((global::PhysX.PxRenderBuffer*)Unsafe.AsPointer(ref @self_), @nbLines);
        }

        public static global::PhysX.PxDebugPoint* ReservePointsMut(this ref global::PhysX.PxRenderBuffer @self_, uint @nbLines)
        {
            return NativeMethods.PxRenderBuffer_reservePoints_mut((global::PhysX.PxRenderBuffer*)Unsafe.AsPointer(ref @self_), @nbLines);
        }

        public static uint GetNbTriangles(this ref global::PhysX.PxRenderBuffer @self_)
        {
            return NativeMethods.PxRenderBuffer_getNbTriangles((global::PhysX.PxRenderBuffer*)Unsafe.AsPointer(ref @self_));
        }

        public static global::PhysX.PxDebugTriangle* GetTriangles(this ref global::PhysX.PxRenderBuffer @self_)
        {
            return NativeMethods.PxRenderBuffer_getTriangles((global::PhysX.PxRenderBuffer*)Unsafe.AsPointer(ref @self_));
        }

        public static void AddTriangleMut(this ref global::PhysX.PxRenderBuffer @self_, global::PhysX.PxDebugTriangle* @triangle)
        {
            NativeMethods.PxRenderBuffer_addTriangle_mut((global::PhysX.PxRenderBuffer*)Unsafe.AsPointer(ref @self_), @triangle);
        }

        public static void AppendMut(this ref global::PhysX.PxRenderBuffer @self_, global::PhysX.PxRenderBuffer* @other)
        {
            NativeMethods.PxRenderBuffer_append_mut((global::PhysX.PxRenderBuffer*)Unsafe.AsPointer(ref @self_), @other);
        }

        public static void ClearMut(this ref global::PhysX.PxRenderBuffer @self_)
        {
            NativeMethods.PxRenderBuffer_clear_mut((global::PhysX.PxRenderBuffer*)Unsafe.AsPointer(ref @self_));
        }

        public static void ShiftMut(this ref global::PhysX.PxRenderBuffer @self_, global::PhysX.PxVec3* @delta)
        {
            NativeMethods.PxRenderBuffer_shift_mut((global::PhysX.PxRenderBuffer*)Unsafe.AsPointer(ref @self_), @delta);
        }

        public static bool Empty(this ref global::PhysX.PxRenderBuffer @self_)
        {
            return NativeMethods.PxRenderBuffer_empty((global::PhysX.PxRenderBuffer*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxProcessPxBaseCallback(2)

        public static void Delete(this ref global::PhysX.PxProcessPxBaseCallback @self_)
        {
            NativeMethods.PxProcessPxBaseCallback_delete((global::PhysX.PxProcessPxBaseCallback*)Unsafe.AsPointer(ref @self_));
        }

        public static void ProcessMut(this ref global::PhysX.PxProcessPxBaseCallback @self_, global::PhysX.PxBase* @anon_param0)
        {
            NativeMethods.PxProcessPxBaseCallback_process_mut((global::PhysX.PxProcessPxBaseCallback*)Unsafe.AsPointer(ref @self_), @anon_param0);
        }

        #endregion

        #region PhysX.PxSerializationContext(5)

        /// <summary>Registers a reference value corresponding to a PxBase object.  This method is assumed to be called in the implementation of PxSerializer::registerReferences for serialized references that need to be resolved on deserialization.  A reference needs to be associated with exactly one PxBase object in either the collection or the external references collection.  Different kinds of references are supported and need to be specified. In the most common case (PX_SERIAL_REF_KIND_PXBASE) the PxBase object matches the reference value (which is the pointer to the PxBase object). Integer references maybe registered as well (used for internal material indices with PX_SERIAL_REF_KIND_MATERIAL_IDX). Other kinds could be added with the restriction that for pointer types the kind value needs to be marked with the PX_SERIAL_REF_KIND_PTR_TYPE_BIT.</summary>
        public static void RegisterReferenceMut(this ref global::PhysX.PxSerializationContext @self_, global::PhysX.PxBase* @base, uint @kind, nuint @reference)
        {
            NativeMethods.PxSerializationContext_registerReference_mut((global::PhysX.PxSerializationContext*)Unsafe.AsPointer(ref @self_), @base, @kind, @reference);
        }

        /// <summary>Returns the collection that is being serialized.</summary>
        public static global::PhysX.PxCollection* GetCollection(this ref global::PhysX.PxSerializationContext @self_)
        {
            return NativeMethods.PxSerializationContext_getCollection((global::PhysX.PxSerializationContext*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Serializes object data and object extra data.  This function is assumed to be called within the implementation of PxSerializer::exportData and PxSerializer::exportExtraData.</summary>
        public static void WriteDataMut(this ref global::PhysX.PxSerializationContext @self_, void* @data, uint @size)
        {
            NativeMethods.PxSerializationContext_writeData_mut((global::PhysX.PxSerializationContext*)Unsafe.AsPointer(ref @self_), @data, @size);
        }

        /// <summary>Aligns the serialized data.  This function is assumed to be called within the implementation of PxSerializer::exportData and PxSerializer::exportExtraData.</summary>
        public static void AlignDataMut(this ref global::PhysX.PxSerializationContext @self_, uint @alignment)
        {
            NativeMethods.PxSerializationContext_alignData_mut((global::PhysX.PxSerializationContext*)Unsafe.AsPointer(ref @self_), @alignment);
        }

        /// <summary>Helper function to write a name to the extraData if serialization is configured to save names.  This function is assumed to be called within the implementation of PxSerializer::exportExtraData.</summary>
        public static void WriteNameMut(this ref global::PhysX.PxSerializationContext @self_, byte* @name)
        {
            NativeMethods.PxSerializationContext_writeName_mut((global::PhysX.PxSerializationContext*)Unsafe.AsPointer(ref @self_), @name);
        }

        #endregion

        #region PhysX.PxDeserializationContext(3)

        /// <summary>Retrieves a pointer to a deserialized PxBase object given a corresponding deserialized reference value  This method is assumed to be called in the implementation of PxSerializer::createObject in order to update reference values on deserialization.  To update a PxBase reference the corresponding deserialized pointer value needs to be provided in order to retrieve the location of the corresponding deserialized PxBase object. (PxDeserializationContext::translatePxBase simplifies this common case).  For other kinds of references the reverence values need to be updated by deduction given the corresponding PxBase instance.  PxBase object associated with the reference value</summary>
        public static global::PhysX.PxBase* ResolveReference(this ref global::PhysX.PxDeserializationContext @self_, uint @kind, nuint @reference)
        {
            return NativeMethods.PxDeserializationContext_resolveReference((global::PhysX.PxDeserializationContext*)Unsafe.AsPointer(ref @self_), @kind, @reference);
        }

        /// <summary>Helper function to read a name from the extra data during deserialization.  This function is assumed to be called within the implementation of PxSerializer::createObject.</summary>
        public static void ReadNameMut(this ref global::PhysX.PxDeserializationContext @self_, byte** @name)
        {
            NativeMethods.PxDeserializationContext_readName_mut((global::PhysX.PxDeserializationContext*)Unsafe.AsPointer(ref @self_), @name);
        }

        /// <summary>Function to align the extra data stream to a power of 2 alignment  This function is assumed to be called within the implementation of PxSerializer::createObject.</summary>
        public static void AlignExtraDataMut(this ref global::PhysX.PxDeserializationContext @self_, uint @alignment)
        {
            NativeMethods.PxDeserializationContext_alignExtraData_mut((global::PhysX.PxDeserializationContext*)Unsafe.AsPointer(ref @self_), @alignment);
        }

        #endregion

        #region PhysX.PxSerializationRegistry(7)

        /// <summary>Register a serializer for a concrete type</summary>
        public static void RegisterSerializerMut(this ref global::PhysX.PxSerializationRegistry @self_, ushort @type_, global::PhysX.PxSerializer* @serializer)
        {
            NativeMethods.PxSerializationRegistry_registerSerializer_mut((global::PhysX.PxSerializationRegistry*)Unsafe.AsPointer(ref @self_), @type_, @serializer);
        }

        /// <summary>Unregister a serializer for a concrete type, and retrieves the corresponding serializer object.  Unregistered serializer corresponding to type, NULL for types for which no serializer has been registered.</summary>
        public static global::PhysX.PxSerializer* UnregisterSerializerMut(this ref global::PhysX.PxSerializationRegistry @self_, ushort @type_)
        {
            return NativeMethods.PxSerializationRegistry_unregisterSerializer_mut((global::PhysX.PxSerializationRegistry*)Unsafe.AsPointer(ref @self_), @type_);
        }

        /// <summary>Returns PxSerializer corresponding to type  Registered PxSerializer object corresponding to type</summary>
        public static global::PhysX.PxSerializer* GetSerializer(this ref global::PhysX.PxSerializationRegistry @self_, ushort @type_)
        {
            return NativeMethods.PxSerializationRegistry_getSerializer((global::PhysX.PxSerializationRegistry*)Unsafe.AsPointer(ref @self_), @type_);
        }

        /// <summary>Register a RepX serializer for a concrete type</summary>
        public static void RegisterRepXSerializerMut(this ref global::PhysX.PxSerializationRegistry @self_, ushort @type_, global::PhysX.PxRepXSerializer* @serializer)
        {
            NativeMethods.PxSerializationRegistry_registerRepXSerializer_mut((global::PhysX.PxSerializationRegistry*)Unsafe.AsPointer(ref @self_), @type_, @serializer);
        }

        /// <summary>Unregister a RepX serializer for a concrete type, and retrieves the corresponding serializer object.  Unregistered PxRepxSerializer corresponding to type, NULL for types for which no RepX serializer has been registered.</summary>
        public static global::PhysX.PxRepXSerializer* UnregisterRepXSerializerMut(this ref global::PhysX.PxSerializationRegistry @self_, ushort @type_)
        {
            return NativeMethods.PxSerializationRegistry_unregisterRepXSerializer_mut((global::PhysX.PxSerializationRegistry*)Unsafe.AsPointer(ref @self_), @type_);
        }

        /// <summary>Returns RepX serializer given the corresponding type name  Registered PxRepXSerializer object corresponding to type name</summary>
        public static global::PhysX.PxRepXSerializer* GetRepXSerializer(this ref global::PhysX.PxSerializationRegistry @self_, byte* @typeName)
        {
            return NativeMethods.PxSerializationRegistry_getRepXSerializer((global::PhysX.PxSerializationRegistry*)Unsafe.AsPointer(ref @self_), @typeName);
        }

        /// <summary>Releases PxSerializationRegistry instance.  This unregisters all PhysX and PhysXExtension serializers. Make sure to unregister all custom type serializers before releasing the PxSerializationRegistry.</summary>
        public static void ReleaseMut(this ref global::PhysX.PxSerializationRegistry @self_)
        {
            NativeMethods.PxSerializationRegistry_release_mut((global::PhysX.PxSerializationRegistry*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxCollection(18)

        /// <summary>Adds a PxBase object to the collection.  Adds a PxBase object to the collection. Optionally a PxSerialObjectId can be provided in order to resolve dependencies between collections. A PxSerialObjectId value of PX_SERIAL_OBJECT_ID_INVALID means the object remains without id. Objects can be added regardless of other objects they require. If the object is already in the collection, the ID will be set if it was PX_SERIAL_OBJECT_ID_INVALID previously, otherwise the operation fails.</summary>
        public static void AddMut(this ref global::PhysX.PxCollection @self_, global::PhysX.PxBase* @object, ulong @id)
        {
            NativeMethods.PxCollection_add_mut((global::PhysX.PxCollection*)Unsafe.AsPointer(ref @self_), @object, @id);
        }

        /// <summary>Removes a PxBase member object from the collection.  Object needs to be contained by the collection.</summary>
        public static void RemoveMut(this ref global::PhysX.PxCollection @self_, global::PhysX.PxBase* @object)
        {
            NativeMethods.PxCollection_remove_mut((global::PhysX.PxCollection*)Unsafe.AsPointer(ref @self_), @object);
        }

        /// <summary>Returns whether the collection contains a certain PxBase object.  Whether object is contained.</summary>
        public static bool Contains(this ref global::PhysX.PxCollection @self_, global::PhysX.PxBase* @object)
        {
            return NativeMethods.PxCollection_contains((global::PhysX.PxCollection*)Unsafe.AsPointer(ref @self_), @object);
        }

        /// <summary>Adds an id to a member PxBase object.  If the object is already associated with an id within the collection, the id is replaced. May only be called for objects that are members of the collection. The id needs to be unique within the collection.</summary>
        public static void AddIdMut(this ref global::PhysX.PxCollection @self_, global::PhysX.PxBase* @object, ulong @id)
        {
            NativeMethods.PxCollection_addId_mut((global::PhysX.PxCollection*)Unsafe.AsPointer(ref @self_), @object, @id);
        }

        /// <summary>Removes id from a contained PxBase object.  May only be called for ids that are associated with an object in the collection.</summary>
        public static void RemoveIdMut(this ref global::PhysX.PxCollection @self_, ulong @id)
        {
            NativeMethods.PxCollection_removeId_mut((global::PhysX.PxCollection*)Unsafe.AsPointer(ref @self_), @id);
        }

        /// <summary>Adds all PxBase objects and their ids of collection to this collection.  PxBase objects already in this collection are ignored. Object ids need to be conflict free, i.e. the same object may not have two different ids within the two collections.</summary>
        public static void AddMut1(this ref global::PhysX.PxCollection @self_, global::PhysX.PxCollection* @collection)
        {
            NativeMethods.PxCollection_add_mut_1((global::PhysX.PxCollection*)Unsafe.AsPointer(ref @self_), @collection);
        }

        /// <summary>Removes all PxBase objects of collection from this collection.  PxBase objects not present in this collection are ignored. Ids of objects which are removed are also removed.</summary>
        public static void RemoveMut1(this ref global::PhysX.PxCollection @self_, global::PhysX.PxCollection* @collection)
        {
            NativeMethods.PxCollection_remove_mut_1((global::PhysX.PxCollection*)Unsafe.AsPointer(ref @self_), @collection);
        }

        /// <summary>Gets number of PxBase objects in this collection.  Number of objects in this collection</summary>
        public static uint GetNbObjects(this ref global::PhysX.PxCollection @self_)
        {
            return NativeMethods.PxCollection_getNbObjects((global::PhysX.PxCollection*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Gets the PxBase object of this collection given its index.  PxBase object at index index</summary>
        public static global::PhysX.PxBase* GetObject(this ref global::PhysX.PxCollection @self_, uint @index)
        {
            return NativeMethods.PxCollection_getObject((global::PhysX.PxCollection*)Unsafe.AsPointer(ref @self_), @index);
        }

        /// <summary>Copies member PxBase pointers to a user specified buffer.  number of members PxBase objects that have been written to the userBuffer</summary>
        public static uint GetObjects(this ref global::PhysX.PxCollection @self_, global::PhysX.PxBase** @userBuffer, uint @bufferSize, uint @startIndex)
        {
            return NativeMethods.PxCollection_getObjects((global::PhysX.PxCollection*)Unsafe.AsPointer(ref @self_), @userBuffer, @bufferSize, @startIndex);
        }

        /// <summary>Looks for a PxBase object given a PxSerialObjectId value.  If there is no PxBase object in the collection with the given id, NULL is returned.  PxBase object with the given id value or NULL</summary>
        public static global::PhysX.PxBase* Find(this ref global::PhysX.PxCollection @self_, ulong @id)
        {
            return NativeMethods.PxCollection_find((global::PhysX.PxCollection*)Unsafe.AsPointer(ref @self_), @id);
        }

        /// <summary>Gets number of PxSerialObjectId names in this collection.  Number of PxSerialObjectId names in this collection</summary>
        public static uint GetNbIds(this ref global::PhysX.PxCollection @self_)
        {
            return NativeMethods.PxCollection_getNbIds((global::PhysX.PxCollection*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Copies member PxSerialObjectId values to a user specified buffer.  number of members PxSerialObjectId values that have been written to the userBuffer</summary>
        public static uint GetIds(this ref global::PhysX.PxCollection @self_, ulong* @userBuffer, uint @bufferSize, uint @startIndex)
        {
            return NativeMethods.PxCollection_getIds((global::PhysX.PxCollection*)Unsafe.AsPointer(ref @self_), @userBuffer, @bufferSize, @startIndex);
        }

        /// <summary>Gets the PxSerialObjectId name of a PxBase object within the collection.  The PxBase object needs to be a member of the collection.  PxSerialObjectId name of the object or PX_SERIAL_OBJECT_ID_INVALID if the object is unnamed</summary>
        public static ulong GetId(this ref global::PhysX.PxCollection @self_, global::PhysX.PxBase* @object)
        {
            return NativeMethods.PxCollection_getId((global::PhysX.PxCollection*)Unsafe.AsPointer(ref @self_), @object);
        }

        /// <summary>Deletes a collection object.  This function only deletes the collection object, i.e. the container class. It doesn't delete objects that are part of the collection.</summary>
        public static void ReleaseMut(this ref global::PhysX.PxCollection @self_)
        {
            NativeMethods.PxCollection_release_mut((global::PhysX.PxCollection*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Returns whether the collection is serializable with the externalReferences collection.  Some definitions to explain whether a collection can be serialized or not:  For definitions of requires and complete see [`PxSerialization::complete`]  A serializable object is subordinate if it cannot be serialized on its own The following objects are subordinate: - articulation links - articulation joints - joints  A collection C can be serialized with external references collection D iff - C is complete relative to D (no dangling references) - Every object in D required by an object in C has a valid ID (no unnamed references) - Every subordinate object in C is required by another object in C (no orphans)  Whether the collection is serializable</summary>
        public static bool SerializationIsSerializable(this ref global::PhysX.PxCollection @collection, global::PhysX.PxSerializationRegistry* @sr, global::PhysX.PxCollection* @externalReferences)
        {
            return NativeMethods.PxSerialization_isSerializable((global::PhysX.PxCollection*)Unsafe.AsPointer(ref @collection), @sr, @externalReferences);
        }

        /// <summary>Adds to a collection all objects such that it can be successfully serialized.  A collection C is complete relative to an other collection D if every object required by C is either in C or D. This function adds objects to a collection, such that it becomes complete with respect to the exceptFor collection. Completeness is needed for serialization. See [`PxSerialization::serializeCollectionToBinary`], [`PxSerialization::serializeCollectionToXml`].  Sdk objects require other sdk object according to the following rules: - joints require their actors and constraint - rigid actors require their shapes - shapes require their material(s) and mesh (triangle mesh, convex mesh or height field), if any - articulations require their links and joints - aggregates require their actors  If followJoints is specified another rule is added: - actors require their joints  Specifying followJoints will make whole jointed actor chains being added to the collection. Following chains is interrupted whenever a object in exceptFor is encountered.</summary>
        public static void SerializationComplete(this ref global::PhysX.PxCollection @collection, global::PhysX.PxSerializationRegistry* @sr, global::PhysX.PxCollection* @exceptFor, bool @followJoints)
        {
            NativeMethods.PxSerialization_complete((global::PhysX.PxCollection*)Unsafe.AsPointer(ref @collection), @sr, @exceptFor, @followJoints);
        }

        /// <summary>Creates PxSerialObjectId values for unnamed objects in a collection.  Creates PxSerialObjectId names for unnamed objects in a collection starting at a base value and incrementing, skipping values that are already assigned to objects in the collection.</summary>
        public static void SerializationCreateSerialObjectIds(this ref global::PhysX.PxCollection @collection, ulong @base)
        {
            NativeMethods.PxSerialization_createSerialObjectIds((global::PhysX.PxCollection*)Unsafe.AsPointer(ref @collection), @base);
        }

        #endregion

        #region PhysX.PxBase(7)

        /// <summary>Releases the PxBase instance, please check documentation of release in derived class.</summary>
        public static void ReleaseMut(this ref global::PhysX.PxBase @self_)
        {
            NativeMethods.PxBase_release_mut((global::PhysX.PxBase*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Returns string name of dynamic type.  Class name of most derived type of this object.</summary>
        public static byte* GetConcreteTypeName(this ref global::PhysX.PxBase @self_)
        {
            return NativeMethods.PxBase_getConcreteTypeName((global::PhysX.PxBase*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Returns concrete type of object.  PxConcreteType::Enum of serialized object</summary>
        public static ushort GetConcreteType(this ref global::PhysX.PxBase @self_)
        {
            return NativeMethods.PxBase_getConcreteType((global::PhysX.PxBase*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Set PxBaseFlag</summary>
        public static void SetBaseFlagMut(this ref global::PhysX.PxBase @self_, global::PhysX.PxBaseFlag @flag, bool @value)
        {
            NativeMethods.PxBase_setBaseFlag_mut((global::PhysX.PxBase*)Unsafe.AsPointer(ref @self_), @flag, @value);
        }

        /// <summary>Set PxBaseFlags</summary>
        public static void SetBaseFlagsMut(this ref global::PhysX.PxBase @self_, global::PhysX.PxBaseFlags @inFlags)
        {
            NativeMethods.PxBase_setBaseFlags_mut((global::PhysX.PxBase*)Unsafe.AsPointer(ref @self_), @inFlags);
        }

        /// <summary>Returns PxBaseFlags  PxBaseFlags</summary>
        public static global::PhysX.PxBaseFlags GetBaseFlags(this ref global::PhysX.PxBase @self_)
        {
            return NativeMethods.PxBase_getBaseFlags((global::PhysX.PxBase*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Whether the object is subordinate.  A class is subordinate, if it can only be instantiated in the context of another class.  Whether the class is subordinate</summary>
        public static bool IsReleasable(this ref global::PhysX.PxBase @self_)
        {
            return NativeMethods.PxBase_isReleasable((global::PhysX.PxBase*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxRefCounted(3)

        /// <summary>Decrements the reference count of the object and releases it if the new reference count is zero.</summary>
        public static void ReleaseMut(this ref global::PhysX.PxRefCounted @self_)
        {
            NativeMethods.PxRefCounted_release_mut((global::PhysX.PxRefCounted*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Returns the reference count of the object.  At creation, the reference count of the object is 1. Every other object referencing this object increments the count by 1. When the reference count reaches 0, and only then, the object gets destroyed automatically.  the current reference count.</summary>
        public static uint GetReferenceCount(this ref global::PhysX.PxRefCounted @self_)
        {
            return NativeMethods.PxRefCounted_getReferenceCount((global::PhysX.PxRefCounted*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Acquires a counted reference to this object.  This method increases the reference count of the object by 1. Decrement the reference count by calling release()</summary>
        public static void AcquireReferenceMut(this ref global::PhysX.PxRefCounted @self_)
        {
            NativeMethods.PxRefCounted_acquireReference_mut((global::PhysX.PxRefCounted*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxTolerancesScale(5)

        /// <summary>Returns true if the descriptor is valid.  true if the current settings are valid (returns always true).</summary>
        public static bool IsValid(this ref global::PhysX.PxTolerancesScale @self_)
        {
            return NativeMethods.PxTolerancesScale_isValid((global::PhysX.PxTolerancesScale*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>constructor sets to default.</summary>
        public static global::PhysX.PxSceneDesc SceneDescNew(this ref global::PhysX.PxTolerancesScale @scale)
        {
            return NativeMethods.PxSceneDesc_new((global::PhysX.PxTolerancesScale*)Unsafe.AsPointer(ref @scale));
        }

        public static global::PhysX.PxCookingParams CookingParamsNew(this ref global::PhysX.PxTolerancesScale @sc)
        {
            return NativeMethods.PxCookingParams_new((global::PhysX.PxTolerancesScale*)Unsafe.AsPointer(ref @sc));
        }

        /// <summary>construct a linear hard limit</summary>
        public static global::PhysX.PxJointLinearLimit JointLinearLimitNew(this ref global::PhysX.PxTolerancesScale @scale, float @extent, float @contactDist_deprecated)
        {
            return NativeMethods.PxJointLinearLimit_new((global::PhysX.PxTolerancesScale*)Unsafe.AsPointer(ref @scale), @extent, @contactDist_deprecated);
        }

        /// <summary>Construct a linear hard limit pair. The lower distance value must be less than the upper distance value.</summary>
        public static global::PhysX.PxJointLinearLimitPair JointLinearLimitPairNew(this ref global::PhysX.PxTolerancesScale @scale, float @lowerLimit, float @upperLimit, float @contactDist_deprecated)
        {
            return NativeMethods.PxJointLinearLimitPair_new((global::PhysX.PxTolerancesScale*)Unsafe.AsPointer(ref @scale), @lowerLimit, @upperLimit, @contactDist_deprecated);
        }

        #endregion

        #region PhysX.PxStringTable(2)

        /// <summary>Allocate a new string.  *Always* a valid null terminated string.  \"\" is returned if \"\" or null is passed in.</summary>
        public static byte* AllocateStrMut(this ref global::PhysX.PxStringTable @self_, byte* @inSrc)
        {
            return NativeMethods.PxStringTable_allocateStr_mut((global::PhysX.PxStringTable*)Unsafe.AsPointer(ref @self_), @inSrc);
        }

        /// <summary>Release the string table and all the strings associated with it.</summary>
        public static void ReleaseMut(this ref global::PhysX.PxStringTable @self_)
        {
            NativeMethods.PxStringTable_release_mut((global::PhysX.PxStringTable*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxSerializer(9)

        /// <summary>Returns string name of dynamic type.  Class name of most derived type of this object.</summary>
        public static byte* GetConcreteTypeName(this ref global::PhysX.PxSerializer @self_)
        {
            return NativeMethods.PxSerializer_getConcreteTypeName((global::PhysX.PxSerializer*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Adds required objects to the collection.  This method does not add the required objects recursively, e.g. objects required by required objects.</summary>
        public static void RequiresObjects(this ref global::PhysX.PxSerializer @self_, global::PhysX.PxBase* @anon_param0, global::PhysX.PxProcessPxBaseCallback* @anon_param1)
        {
            NativeMethods.PxSerializer_requiresObjects((global::PhysX.PxSerializer*)Unsafe.AsPointer(ref @self_), @anon_param0, @anon_param1);
        }

        /// <summary>Whether the object is subordinate.  A class is subordinate, if it can only be instantiated in the context of another class.  Whether the class is subordinate</summary>
        public static bool IsSubordinate(this ref global::PhysX.PxSerializer @self_)
        {
            return NativeMethods.PxSerializer_isSubordinate((global::PhysX.PxSerializer*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Exports object's extra data to stream.</summary>
        public static void ExportExtraData(this ref global::PhysX.PxSerializer @self_, global::PhysX.PxBase* @anon_param0, global::PhysX.PxSerializationContext* @anon_param1)
        {
            NativeMethods.PxSerializer_exportExtraData((global::PhysX.PxSerializer*)Unsafe.AsPointer(ref @self_), @anon_param0, @anon_param1);
        }

        /// <summary>Exports object's data to stream.</summary>
        public static void ExportData(this ref global::PhysX.PxSerializer @self_, global::PhysX.PxBase* @anon_param0, global::PhysX.PxSerializationContext* @anon_param1)
        {
            NativeMethods.PxSerializer_exportData((global::PhysX.PxSerializer*)Unsafe.AsPointer(ref @self_), @anon_param0, @anon_param1);
        }

        /// <summary>Register references that the object maintains to other objects.</summary>
        public static void RegisterReferences(this ref global::PhysX.PxSerializer @self_, global::PhysX.PxBase* @obj, global::PhysX.PxSerializationContext* @s)
        {
            NativeMethods.PxSerializer_registerReferences((global::PhysX.PxSerializer*)Unsafe.AsPointer(ref @self_), @obj, @s);
        }

        /// <summary>Returns size needed to create the class instance.  sizeof class instance.</summary>
        public static nuint GetClassSize(this ref global::PhysX.PxSerializer @self_)
        {
            return NativeMethods.PxSerializer_getClassSize((global::PhysX.PxSerializer*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Create object at a given address, resolve references and import extra data.  Created PxBase pointer (needs to be identical to address before increment).</summary>
        public static global::PhysX.PxBase* CreateObject(this ref global::PhysX.PxSerializer @self_, byte** @address, global::PhysX.PxDeserializationContext* @context)
        {
            return NativeMethods.PxSerializer_createObject((global::PhysX.PxSerializer*)Unsafe.AsPointer(ref @self_), @address, @context);
        }

        /// <summary>*******************************************************************************************************************</summary>
        public static void Delete(this ref global::PhysX.PxSerializer @self_)
        {
            NativeMethods.PxSerializer_delete((global::PhysX.PxSerializer*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxInsertionCallback(1)

        /// <summary>Builds object (TriangleMesh, Heightfield, ConvexMesh or BVH) from given data in PxPhysics.  PxBase Created object in PxPhysics.</summary>
        public static global::PhysX.PxBase* BuildObjectFromDataMut(this ref global::PhysX.PxInsertionCallback @self_, global::PhysX.PxConcreteType @type_, void* @data)
        {
            return NativeMethods.PxInsertionCallback_buildObjectFromData_mut((global::PhysX.PxInsertionCallback*)Unsafe.AsPointer(ref @self_), @type_, @data);
        }

        #endregion

        #region PhysX.PxTaskManager(11)

        /// <summary>Set the user-provided dispatcher object for CPU tasks</summary>
        public static void SetCpuDispatcherMut(this ref global::PhysX.PxTaskManager @self_, global::PhysX.PxCpuDispatcher* @ref_)
        {
            NativeMethods.PxTaskManager_setCpuDispatcher_mut((global::PhysX.PxTaskManager*)Unsafe.AsPointer(ref @self_), @ref_);
        }

        /// <summary>Get the user-provided dispatcher object for CPU tasks  The CPU dispatcher object.</summary>
        public static global::PhysX.PxCpuDispatcher* GetCpuDispatcher(this ref global::PhysX.PxTaskManager @self_)
        {
            return NativeMethods.PxTaskManager_getCpuDispatcher((global::PhysX.PxTaskManager*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Reset any dependencies between Tasks  Will be called at the start of every frame before tasks are submitted.</summary>
        public static void ResetDependenciesMut(this ref global::PhysX.PxTaskManager @self_)
        {
            NativeMethods.PxTaskManager_resetDependencies_mut((global::PhysX.PxTaskManager*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Called by the owning scene to start the task graph.  All tasks with ref count of 1 will be dispatched.</summary>
        public static void StartSimulationMut(this ref global::PhysX.PxTaskManager @self_)
        {
            NativeMethods.PxTaskManager_startSimulation_mut((global::PhysX.PxTaskManager*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Called by the owning scene at the end of a simulation step.</summary>
        public static void StopSimulationMut(this ref global::PhysX.PxTaskManager @self_)
        {
            NativeMethods.PxTaskManager_stopSimulation_mut((global::PhysX.PxTaskManager*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Called by the worker threads to inform the PxTaskManager that a task has completed processing.</summary>
        public static void TaskCompletedMut(this ref global::PhysX.PxTaskManager @self_, global::PhysX.PxTask* @task)
        {
            NativeMethods.PxTaskManager_taskCompleted_mut((global::PhysX.PxTaskManager*)Unsafe.AsPointer(ref @self_), @task);
        }

        /// <summary>Retrieve a task by name  The ID of the task with that name, or eNOT_PRESENT if not found</summary>
        public static uint GetNamedTaskMut(this ref global::PhysX.PxTaskManager @self_, byte* @name)
        {
            return NativeMethods.PxTaskManager_getNamedTask_mut((global::PhysX.PxTaskManager*)Unsafe.AsPointer(ref @self_), @name);
        }

        /// <summary>Submit a task with a unique name.  The ID of the task with that name, or eNOT_PRESENT if not found</summary>
        public static uint SubmitNamedTaskMut(this ref global::PhysX.PxTaskManager @self_, global::PhysX.PxTask* @task, byte* @name, global::PhysX.PxTaskType @type_)
        {
            return NativeMethods.PxTaskManager_submitNamedTask_mut((global::PhysX.PxTaskManager*)Unsafe.AsPointer(ref @self_), @task, @name, @type_);
        }

        /// <summary>Submit an unnamed task.  The ID of the task with that name, or eNOT_PRESENT if not found</summary>
        public static uint SubmitUnnamedTaskMut(this ref global::PhysX.PxTaskManager @self_, global::PhysX.PxTask* @task, global::PhysX.PxTaskType @type_)
        {
            return NativeMethods.PxTaskManager_submitUnnamedTask_mut((global::PhysX.PxTaskManager*)Unsafe.AsPointer(ref @self_), @task, @type_);
        }

        /// <summary>Retrieve a task given a task ID  The task associated with the ID</summary>
        public static global::PhysX.PxTask* GetTaskFromIDMut(this ref global::PhysX.PxTaskManager @self_, uint @id)
        {
            return NativeMethods.PxTaskManager_getTaskFromID_mut((global::PhysX.PxTaskManager*)Unsafe.AsPointer(ref @self_), @id);
        }

        /// <summary>Release the PxTaskManager object, referenced dispatchers will not be released</summary>
        public static void ReleaseMut(this ref global::PhysX.PxTaskManager @self_)
        {
            NativeMethods.PxTaskManager_release_mut((global::PhysX.PxTaskManager*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxCpuDispatcher(3)

        /// <summary>Called by the TaskManager when a task is to be queued for execution.  Upon receiving a task, the dispatcher should schedule the task to run. After the task has been run, it should call the release() method and discard its pointer.</summary>
        public static void SubmitTaskMut(this ref global::PhysX.PxCpuDispatcher @self_, global::PhysX.PxBaseTask* @task)
        {
            NativeMethods.PxCpuDispatcher_submitTask_mut((global::PhysX.PxCpuDispatcher*)Unsafe.AsPointer(ref @self_), @task);
        }

        /// <summary>Returns the number of available worker threads for this dispatcher.  The SDK will use this count to control how many tasks are submitted. By matching the number of tasks with the number of execution units task overhead can be reduced.</summary>
        public static uint GetWorkerCount(this ref global::PhysX.PxCpuDispatcher @self_)
        {
            return NativeMethods.PxCpuDispatcher_getWorkerCount((global::PhysX.PxCpuDispatcher*)Unsafe.AsPointer(ref @self_));
        }

        public static void Delete(this ref global::PhysX.PxCpuDispatcher @self_)
        {
            NativeMethods.PxCpuDispatcher_delete((global::PhysX.PxCpuDispatcher*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxBaseTask(9)

        /// <summary>The user-implemented run method where the task's work should be performed  run() methods must be thread safe, stack friendly (no alloca, etc), and must never block.</summary>
        public static void RunMut(this ref global::PhysX.PxBaseTask @self_)
        {
            NativeMethods.PxBaseTask_run_mut((global::PhysX.PxBaseTask*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Return a user-provided task name for profiling purposes.  It does not have to be unique, but unique names are helpful.  The name of this task</summary>
        public static byte* GetName(this ref global::PhysX.PxBaseTask @self_)
        {
            return NativeMethods.PxBaseTask_getName((global::PhysX.PxBaseTask*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Implemented by derived implementation classes</summary>
        public static void AddReferenceMut(this ref global::PhysX.PxBaseTask @self_)
        {
            NativeMethods.PxBaseTask_addReference_mut((global::PhysX.PxBaseTask*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Implemented by derived implementation classes</summary>
        public static void RemoveReferenceMut(this ref global::PhysX.PxBaseTask @self_)
        {
            NativeMethods.PxBaseTask_removeReference_mut((global::PhysX.PxBaseTask*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Implemented by derived implementation classes</summary>
        public static int GetReference(this ref global::PhysX.PxBaseTask @self_)
        {
            return NativeMethods.PxBaseTask_getReference((global::PhysX.PxBaseTask*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Implemented by derived implementation classes  A task may assume in its release() method that the task system no longer holds references to it - so it may safely run its destructor, recycle itself, etc. provided no additional user references to the task exist</summary>
        public static void ReleaseMut(this ref global::PhysX.PxBaseTask @self_)
        {
            NativeMethods.PxBaseTask_release_mut((global::PhysX.PxBaseTask*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Return PxTaskManager to which this task was submitted  Note, can return NULL if task was not submitted, or has been completed.</summary>
        public static global::PhysX.PxTaskManager* GetTaskManager(this ref global::PhysX.PxBaseTask @self_)
        {
            return NativeMethods.PxBaseTask_getTaskManager((global::PhysX.PxBaseTask*)Unsafe.AsPointer(ref @self_));
        }

        public static void SetContextIdMut(this ref global::PhysX.PxBaseTask @self_, ulong @id)
        {
            NativeMethods.PxBaseTask_setContextId_mut((global::PhysX.PxBaseTask*)Unsafe.AsPointer(ref @self_), @id);
        }

        public static ulong GetContextId(this ref global::PhysX.PxBaseTask @self_)
        {
            return NativeMethods.PxBaseTask_getContextId((global::PhysX.PxBaseTask*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxTask(8)

        /// <summary>Release method implementation</summary>
        public static void ReleaseMut(this ref global::PhysX.PxTask @self_)
        {
            NativeMethods.PxTask_release_mut((global::PhysX.PxTask*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Inform the PxTaskManager this task must finish before the given</summary>
        public static void FinishBeforeMut(this ref global::PhysX.PxTask @self_, uint @taskID)
        {
            NativeMethods.PxTask_finishBefore_mut((global::PhysX.PxTask*)Unsafe.AsPointer(ref @self_), @taskID);
        }

        /// <summary>Inform the PxTaskManager this task cannot start until the given</summary>
        public static void StartAfterMut(this ref global::PhysX.PxTask @self_, uint @taskID)
        {
            NativeMethods.PxTask_startAfter_mut((global::PhysX.PxTask*)Unsafe.AsPointer(ref @self_), @taskID);
        }

        /// <summary>Manually increment this task's reference count. The task will not be allowed to run until removeReference() is called.</summary>
        public static void AddReferenceMut(this ref global::PhysX.PxTask @self_)
        {
            NativeMethods.PxTask_addReference_mut((global::PhysX.PxTask*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Manually decrement this task's reference count. If the reference count reaches zero, the task will be dispatched.</summary>
        public static void RemoveReferenceMut(this ref global::PhysX.PxTask @self_)
        {
            NativeMethods.PxTask_removeReference_mut((global::PhysX.PxTask*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Return the ref-count for this task</summary>
        public static int GetReference(this ref global::PhysX.PxTask @self_)
        {
            return NativeMethods.PxTask_getReference((global::PhysX.PxTask*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Return the unique ID for this task</summary>
        public static uint GetTaskID(this ref global::PhysX.PxTask @self_)
        {
            return NativeMethods.PxTask_getTaskID((global::PhysX.PxTask*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Called by PxTaskManager at submission time for initialization  Perform simulation step initialization here.</summary>
        public static void SubmittedMut(this ref global::PhysX.PxTask @self_)
        {
            NativeMethods.PxTask_submitted_mut((global::PhysX.PxTask*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxLightCpuTask(7)

        /// <summary>Initialize this task and specify the task that will have its ref count decremented on completion.  Submission is deferred until the task's mRefCount is decremented to zero. Note that we only use the PxTaskManager to query the appropriate dispatcher.</summary>
        public static void SetContinuationMut(this ref global::PhysX.PxLightCpuTask @self_, global::PhysX.PxTaskManager* @tm, global::PhysX.PxBaseTask* @c)
        {
            NativeMethods.PxLightCpuTask_setContinuation_mut((global::PhysX.PxLightCpuTask*)Unsafe.AsPointer(ref @self_), @tm, @c);
        }

        /// <summary>Initialize this task and specify the task that will have its ref count decremented on completion.  This overload of setContinuation() queries the PxTaskManager from the continuation task, which cannot be NULL.</summary>
        public static void SetContinuationMut1(this ref global::PhysX.PxLightCpuTask @self_, global::PhysX.PxBaseTask* @c)
        {
            NativeMethods.PxLightCpuTask_setContinuation_mut_1((global::PhysX.PxLightCpuTask*)Unsafe.AsPointer(ref @self_), @c);
        }

        /// <summary>Retrieves continuation task</summary>
        public static global::PhysX.PxBaseTask* GetContinuation(this ref global::PhysX.PxLightCpuTask @self_)
        {
            return NativeMethods.PxLightCpuTask_getContinuation((global::PhysX.PxLightCpuTask*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Manually decrement this task's reference count. If the reference count reaches zero, the task will be dispatched.</summary>
        public static void RemoveReferenceMut(this ref global::PhysX.PxLightCpuTask @self_)
        {
            NativeMethods.PxLightCpuTask_removeReference_mut((global::PhysX.PxLightCpuTask*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Return the ref-count for this task</summary>
        public static int GetReference(this ref global::PhysX.PxLightCpuTask @self_)
        {
            return NativeMethods.PxLightCpuTask_getReference((global::PhysX.PxLightCpuTask*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Manually increment this task's reference count. The task will not be allowed to run until removeReference() is called.</summary>
        public static void AddReferenceMut(this ref global::PhysX.PxLightCpuTask @self_)
        {
            NativeMethods.PxLightCpuTask_addReference_mut((global::PhysX.PxLightCpuTask*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>called by CpuDispatcher after run method has completed  Decrements the continuation task's reference count, if specified.</summary>
        public static void ReleaseMut(this ref global::PhysX.PxLightCpuTask @self_)
        {
            NativeMethods.PxLightCpuTask_release_mut((global::PhysX.PxLightCpuTask*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxGeometry(8)

        /// <summary>Returns the type of the geometry.  The type of the object.</summary>
        public static global::PhysX.PxGeometryType GetType(this ref global::PhysX.PxGeometry @self_)
        {
            return NativeMethods.PxGeometry_getType((global::PhysX.PxGeometry*)Unsafe.AsPointer(ref @self_));
        }

        public static global::PhysX.PxGeometryHolder HolderNew1(this ref global::PhysX.PxGeometry @geometry)
        {
            return NativeMethods.PxGeometryHolder_new_1((global::PhysX.PxGeometry*)Unsafe.AsPointer(ref @geometry));
        }

        /// <summary>Overlap test for two geometry objects.  All combinations are supported except:  PxPlaneGeometry vs. {PxPlaneGeometry, PxTriangleMeshGeometry, PxHeightFieldGeometry}  PxTriangleMeshGeometry vs. PxHeightFieldGeometry  PxHeightFieldGeometry vs. PxHeightFieldGeometry  Anything involving PxParticleSystemGeometry, PxTetrahedronMeshGeometry or PxHairSystemGeometry.  True if the two geometry objects overlap</summary>
        public static bool QueryOverlap(this ref global::PhysX.PxGeometry @geom0, global::PhysX.PxTransform* @pose0, global::PhysX.PxGeometry* @geom1, global::PhysX.PxTransform* @pose1, global::PhysX.PxGeometryQueryFlags @queryFlags, global::PhysX.PxQueryThreadContext* @threadContext)
        {
            return NativeMethods.PxGeometryQuery_overlap((global::PhysX.PxGeometry*)Unsafe.AsPointer(ref @geom0), @pose0, @geom1, @pose1, @queryFlags, @threadContext);
        }

        /// <summary>Checks if provided geometry is valid.  True if geometry is valid.</summary>
        public static bool QueryIsValid(this ref global::PhysX.PxGeometry @geom)
        {
            return NativeMethods.PxGeometryQuery_isValid((global::PhysX.PxGeometry*)Unsafe.AsPointer(ref @geom));
        }

        /// <summary>Find the mesh triangles which touch the specified geometry object.  For mesh-vs-mesh overlap tests, please use the specialized function below.  Returned triangle indices can be used with [`getTriangle`]() to retrieve the triangle properties.  Number of overlaps found, i.e. number of elements written to the results buffer</summary>
        public static uint MeshQueryFindOverlapTriangleMesh(this ref global::PhysX.PxGeometry @geom, global::PhysX.PxTransform* @geomPose, global::PhysX.PxTriangleMeshGeometry* @meshGeom, global::PhysX.PxTransform* @meshPose, uint* @results, uint @maxResults, uint @startIndex, bool* @overflow, global::PhysX.PxGeometryQueryFlags @queryFlags)
        {
            return NativeMethods.PxMeshQuery_findOverlapTriangleMesh((global::PhysX.PxGeometry*)Unsafe.AsPointer(ref @geom), @geomPose, @meshGeom, @meshPose, @results, @maxResults, @startIndex, @overflow, @queryFlags);
        }

        /// <summary>Find the height field triangles which touch the specified geometry object.  Returned triangle indices can be used with [`getTriangle`]() to retrieve the triangle properties.  Number of overlaps found, i.e. number of elements written to the results buffer</summary>
        public static uint MeshQueryFindOverlapHeightField(this ref global::PhysX.PxGeometry @geom, global::PhysX.PxTransform* @geomPose, global::PhysX.PxHeightFieldGeometry* @hfGeom, global::PhysX.PxTransform* @hfPose, uint* @results, uint @maxResults, uint @startIndex, bool* @overflow, global::PhysX.PxGeometryQueryFlags @queryFlags)
        {
            return NativeMethods.PxMeshQuery_findOverlapHeightField((global::PhysX.PxGeometry*)Unsafe.AsPointer(ref @geom), @geomPose, @hfGeom, @hfPose, @results, @maxResults, @startIndex, @overflow, @queryFlags);
        }

        /// <summary>Compute mass properties based on a provided geometry structure.  This constructor assumes the geometry has a density of 1. Mass and inertia tensor scale linearly with density.</summary>
        public static global::PhysX.PxMassProperties MassPropertiesNew2(this ref global::PhysX.PxGeometry @geometry)
        {
            return NativeMethods.PxMassProperties_new_2((global::PhysX.PxGeometry*)Unsafe.AsPointer(ref @geometry));
        }

        /// <summary>Creates a shape sampler  Returns the sampler</summary>
        public static global::PhysX.PxPoissonSampler* PhysPxCreateShapeSampler(this ref global::PhysX.PxGeometry @geometry, global::PhysX.PxTransform* @transform, global::PhysX.PxBounds3* @worldBounds, float @initialSamplingRadius, int @numSampleAttemptsAroundPoint)
        {
            return NativeMethods.phys_PxCreateShapeSampler((global::PhysX.PxGeometry*)Unsafe.AsPointer(ref @geometry), @transform, @worldBounds, @initialSamplingRadius, @numSampleAttemptsAroundPoint);
        }

        #endregion

        #region PhysX.PxBoxGeometry(1)

        /// <summary>Returns true if the geometry is valid.  True if the current settings are valid  A valid box has a positive extent in each direction (halfExtents.x &gt; 0, halfExtents.y &gt; 0, halfExtents.z &gt; 0). It is illegal to call PxRigidActor::createShape and PxPhysics::createShape with a box that has zero extent in any direction.</summary>
        public static bool IsValid(this ref global::PhysX.PxBoxGeometry @self_)
        {
            return NativeMethods.PxBoxGeometry_isValid((global::PhysX.PxBoxGeometry*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxBVHRaycastCallback(2)

        public static void Delete(this ref global::PhysX.PxBVHRaycastCallback @self_)
        {
            NativeMethods.PxBVHRaycastCallback_delete((global::PhysX.PxBVHRaycastCallback*)Unsafe.AsPointer(ref @self_));
        }

        public static bool ReportHitMut(this ref global::PhysX.PxBVHRaycastCallback @self_, uint @boundsIndex, float* @distance)
        {
            return NativeMethods.PxBVHRaycastCallback_reportHit_mut((global::PhysX.PxBVHRaycastCallback*)Unsafe.AsPointer(ref @self_), @boundsIndex, @distance);
        }

        #endregion

        #region PhysX.PxBVHOverlapCallback(2)

        public static void Delete(this ref global::PhysX.PxBVHOverlapCallback @self_)
        {
            NativeMethods.PxBVHOverlapCallback_delete((global::PhysX.PxBVHOverlapCallback*)Unsafe.AsPointer(ref @self_));
        }

        public static bool ReportHitMut(this ref global::PhysX.PxBVHOverlapCallback @self_, uint @boundsIndex)
        {
            return NativeMethods.PxBVHOverlapCallback_reportHit_mut((global::PhysX.PxBVHOverlapCallback*)Unsafe.AsPointer(ref @self_), @boundsIndex);
        }

        #endregion

        #region PhysX.PxBVHTraversalCallback(3)

        public static void Delete(this ref global::PhysX.PxBVHTraversalCallback @self_)
        {
            NativeMethods.PxBVHTraversalCallback_delete((global::PhysX.PxBVHTraversalCallback*)Unsafe.AsPointer(ref @self_));
        }

        public static bool VisitNodeMut(this ref global::PhysX.PxBVHTraversalCallback @self_, global::PhysX.PxBounds3* @bounds)
        {
            return NativeMethods.PxBVHTraversalCallback_visitNode_mut((global::PhysX.PxBVHTraversalCallback*)Unsafe.AsPointer(ref @self_), @bounds);
        }

        public static bool ReportLeafMut(this ref global::PhysX.PxBVHTraversalCallback @self_, uint @nbPrims, uint* @prims)
        {
            return NativeMethods.PxBVHTraversalCallback_reportLeaf_mut((global::PhysX.PxBVHTraversalCallback*)Unsafe.AsPointer(ref @self_), @nbPrims, @prims);
        }

        #endregion

        #region PhysX.PxBVH(12)

        /// <summary>Raycast test against a BVH.  false if query has been aborted</summary>
        public static bool Raycast(this ref global::PhysX.PxBVH @self_, global::PhysX.PxVec3* @origin, global::PhysX.PxVec3* @unitDir, float @maxDist, global::PhysX.PxBVHRaycastCallback* @cb, global::PhysX.PxGeometryQueryFlags @queryFlags)
        {
            return NativeMethods.PxBVH_raycast((global::PhysX.PxBVH*)Unsafe.AsPointer(ref @self_), @origin, @unitDir, @maxDist, @cb, @queryFlags);
        }

        /// <summary>Sweep test against a BVH.  false if query has been aborted</summary>
        public static bool Sweep(this ref global::PhysX.PxBVH @self_, global::PhysX.PxGeometry* @geom, global::PhysX.PxTransform* @pose, global::PhysX.PxVec3* @unitDir, float @maxDist, global::PhysX.PxBVHRaycastCallback* @cb, global::PhysX.PxGeometryQueryFlags @queryFlags)
        {
            return NativeMethods.PxBVH_sweep((global::PhysX.PxBVH*)Unsafe.AsPointer(ref @self_), @geom, @pose, @unitDir, @maxDist, @cb, @queryFlags);
        }

        /// <summary>Overlap test against a BVH.  false if query has been aborted</summary>
        public static bool Overlap(this ref global::PhysX.PxBVH @self_, global::PhysX.PxGeometry* @geom, global::PhysX.PxTransform* @pose, global::PhysX.PxBVHOverlapCallback* @cb, global::PhysX.PxGeometryQueryFlags @queryFlags)
        {
            return NativeMethods.PxBVH_overlap((global::PhysX.PxBVH*)Unsafe.AsPointer(ref @self_), @geom, @pose, @cb, @queryFlags);
        }

        /// <summary>Frustum culling test against a BVH.  This is similar in spirit to an overlap query using a convex object around the frustum. However this specialized query has better performance, and can support more than the 6 planes of a frustum, which can be useful in portal-based engines.  On the other hand this test only returns a conservative number of bounds, i.e. some of the returned bounds may actually be outside the frustum volume, close to it but not touching it. This is usually an ok performance trade-off when the function is used for view-frustum culling.  false if query has been aborted</summary>
        public static bool Cull(this ref global::PhysX.PxBVH @self_, uint @nbPlanes, global::PhysX.PxPlane* @planes, global::PhysX.PxBVHOverlapCallback* @cb, global::PhysX.PxGeometryQueryFlags @queryFlags)
        {
            return NativeMethods.PxBVH_cull((global::PhysX.PxBVH*)Unsafe.AsPointer(ref @self_), @nbPlanes, @planes, @cb, @queryFlags);
        }

        /// <summary>Returns the number of bounds in the BVH.  You can use [`getBounds`]() to retrieve the bounds.  These are the user-defined bounds passed to the BVH builder, not the internal bounds around each BVH node.  Number of bounds in the BVH.</summary>
        public static uint GetNbBounds(this ref global::PhysX.PxBVH @self_)
        {
            return NativeMethods.PxBVH_getNbBounds((global::PhysX.PxBVH*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Retrieve the read-only bounds in the BVH.  These are the user-defined bounds passed to the BVH builder, not the internal bounds around each BVH node.</summary>
        public static global::PhysX.PxBounds3* GetBounds(this ref global::PhysX.PxBVH @self_)
        {
            return NativeMethods.PxBVH_getBounds((global::PhysX.PxBVH*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Retrieve the bounds in the BVH.  These bounds can be modified. Call refit() after modifications are done.  These are the user-defined bounds passed to the BVH builder, not the internal bounds around each BVH node.</summary>
        public static global::PhysX.PxBounds3* GetBoundsForModificationMut(this ref global::PhysX.PxBVH @self_)
        {
            return NativeMethods.PxBVH_getBoundsForModification_mut((global::PhysX.PxBVH*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Refit the BVH.  This function \"refits\" the tree, i.e. takes the new (leaf) bounding boxes into account and recomputes all the BVH bounds accordingly. This is an O(n) operation with n = number of bounds in the BVH.  This works best with minor bounds modifications, i.e. when the bounds remain close to their initial values. With large modifications the tree quality degrades more and more, and subsequent query performance suffers. It might be a better strategy to create a brand new BVH if bounds change drastically.  This function refits the whole tree after an arbitrary number of bounds have potentially been modified by users (via getBoundsForModification()). If you only have a small number of bounds to update, it might be more efficient to use setBounds() and partialRefit() instead.</summary>
        public static void RefitMut(this ref global::PhysX.PxBVH @self_)
        {
            NativeMethods.PxBVH_refit_mut((global::PhysX.PxBVH*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Update single bounds.  This is an alternative to getBoundsForModification() / refit(). If you only have a small set of bounds to update, it can be inefficient to call the refit() function, because it refits the whole BVH.  Instead, one can update individual bounds with this updateBounds() function. It sets the new bounds and marks the corresponding BVH nodes for partial refit. Once all the individual bounds have been updated, call partialRefit() to only refit the subset of marked nodes.  true if success</summary>
        public static bool UpdateBoundsMut(this ref global::PhysX.PxBVH @self_, uint @boundsIndex, global::PhysX.PxBounds3* @newBounds)
        {
            return NativeMethods.PxBVH_updateBounds_mut((global::PhysX.PxBVH*)Unsafe.AsPointer(ref @self_), @boundsIndex, @newBounds);
        }

        /// <summary>Refits subset of marked nodes.  This is an alternative to the refit() function, to be called after updateBounds() calls. See updateBounds() for details.</summary>
        public static void PartialRefitMut(this ref global::PhysX.PxBVH @self_)
        {
            NativeMethods.PxBVH_partialRefit_mut((global::PhysX.PxBVH*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Generic BVH traversal function.  This can be used to implement custom BVH traversal functions if provided ones are not enough. In particular this can be used to visualize the tree's bounds.  false if query has been aborted</summary>
        public static bool Traverse(this ref global::PhysX.PxBVH @self_, global::PhysX.PxBVHTraversalCallback* @cb)
        {
            return NativeMethods.PxBVH_traverse((global::PhysX.PxBVH*)Unsafe.AsPointer(ref @self_), @cb);
        }

        public static byte* GetConcreteTypeName(this ref global::PhysX.PxBVH @self_)
        {
            return NativeMethods.PxBVH_getConcreteTypeName((global::PhysX.PxBVH*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxCapsuleGeometry(1)

        /// <summary>Returns true if the geometry is valid.  True if the current settings are valid.  A valid capsule has radius &gt; 0, halfHeight &gt;= 0. It is illegal to call PxRigidActor::createShape and PxPhysics::createShape with a capsule that has zero radius or height.</summary>
        public static bool IsValid(this ref global::PhysX.PxCapsuleGeometry @self_)
        {
            return NativeMethods.PxCapsuleGeometry_isValid((global::PhysX.PxCapsuleGeometry*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxConvexMesh(12)

        /// <summary>Returns the number of vertices.  Number of vertices.</summary>
        public static uint GetNbVertices(this ref global::PhysX.PxConvexMesh @self_)
        {
            return NativeMethods.PxConvexMesh_getNbVertices((global::PhysX.PxConvexMesh*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Returns the vertices.  Array of vertices.</summary>
        public static global::PhysX.PxVec3* GetVertices(this ref global::PhysX.PxConvexMesh @self_)
        {
            return NativeMethods.PxConvexMesh_getVertices((global::PhysX.PxConvexMesh*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Returns the index buffer.  Index buffer.</summary>
        public static byte* GetIndexBuffer(this ref global::PhysX.PxConvexMesh @self_)
        {
            return NativeMethods.PxConvexMesh_getIndexBuffer((global::PhysX.PxConvexMesh*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Returns the number of polygons.  Number of polygons.</summary>
        public static uint GetNbPolygons(this ref global::PhysX.PxConvexMesh @self_)
        {
            return NativeMethods.PxConvexMesh_getNbPolygons((global::PhysX.PxConvexMesh*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Returns the polygon data.  True if success.</summary>
        public static bool GetPolygonData(this ref global::PhysX.PxConvexMesh @self_, uint @index, global::PhysX.PxHullPolygon* @data)
        {
            return NativeMethods.PxConvexMesh_getPolygonData((global::PhysX.PxConvexMesh*)Unsafe.AsPointer(ref @self_), @index, @data);
        }

        /// <summary>Decrements the reference count of a convex mesh and releases it if the new reference count is zero.</summary>
        public static void ReleaseMut(this ref global::PhysX.PxConvexMesh @self_)
        {
            NativeMethods.PxConvexMesh_release_mut((global::PhysX.PxConvexMesh*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Returns the mass properties of the mesh assuming unit density.  The following relationship holds between mass and volume:  mass = volume * density  The mass of a unit density mesh is equal to its volume, so this function returns the volume of the mesh.  Similarly, to obtain the localInertia of an identically shaped object with a uniform density of d, simply multiply the localInertia of the unit density mesh by d.</summary>
        public static void GetMassInformation(this ref global::PhysX.PxConvexMesh @self_, float* @mass, global::PhysX.PxMat33* @localInertia, global::PhysX.PxVec3* @localCenterOfMass)
        {
            NativeMethods.PxConvexMesh_getMassInformation((global::PhysX.PxConvexMesh*)Unsafe.AsPointer(ref @self_), @mass, @localInertia, @localCenterOfMass);
        }

        /// <summary>Returns the local-space (vertex space) AABB from the convex mesh.  local-space bounds</summary>
        public static global::PhysX.PxBounds3 GetLocalBounds(this ref global::PhysX.PxConvexMesh @self_)
        {
            return NativeMethods.PxConvexMesh_getLocalBounds((global::PhysX.PxConvexMesh*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Returns the local-space Signed Distance Field for this mesh if it has one.  local-space SDF.</summary>
        public static float* GetSDF(this ref global::PhysX.PxConvexMesh @self_)
        {
            return NativeMethods.PxConvexMesh_getSDF((global::PhysX.PxConvexMesh*)Unsafe.AsPointer(ref @self_));
        }

        public static byte* GetConcreteTypeName(this ref global::PhysX.PxConvexMesh @self_)
        {
            return NativeMethods.PxConvexMesh_getConcreteTypeName((global::PhysX.PxConvexMesh*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>This method decides whether a convex mesh is gpu compatible. If the total number of vertices are more than 64 or any number of vertices in a polygon is more than 32, or convex hull data was not cooked with GPU data enabled during cooking or was loaded from a serialized collection, the convex hull is incompatible with GPU collision detection. Otherwise it is compatible.  True if the convex hull is gpu compatible</summary>
        public static bool IsGpuCompatible(this ref global::PhysX.PxConvexMesh @self_)
        {
            return NativeMethods.PxConvexMesh_isGpuCompatible((global::PhysX.PxConvexMesh*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Constructor. By default creates an empty object with a NULL mesh and identity scale.</summary>
        public static global::PhysX.PxConvexMeshGeometry GeometryNew(this ref global::PhysX.PxConvexMesh @mesh, global::PhysX.PxMeshScale* @scaling, global::PhysX.PxConvexMeshGeometryFlags @flags)
        {
            return NativeMethods.PxConvexMeshGeometry_new((global::PhysX.PxConvexMesh*)Unsafe.AsPointer(ref @mesh), @scaling, @flags);
        }

        #endregion

        #region PhysX.PxMeshScale(7)

        /// <summary>Returns true if the scaling is an identity transformation.</summary>
        public static bool IsIdentity(this ref global::PhysX.PxMeshScale @self_)
        {
            return NativeMethods.PxMeshScale_isIdentity((global::PhysX.PxMeshScale*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Returns the inverse of this scaling transformation.</summary>
        public static global::PhysX.PxMeshScale GetInverse(this ref global::PhysX.PxMeshScale @self_)
        {
            return NativeMethods.PxMeshScale_getInverse((global::PhysX.PxMeshScale*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Converts this transformation to a 3x3 matrix representation.</summary>
        public static global::PhysX.PxMat33 ToMat33(this ref global::PhysX.PxMeshScale @self_)
        {
            return NativeMethods.PxMeshScale_toMat33((global::PhysX.PxMeshScale*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Returns true if combination of negative scale components will cause the triangle normal to flip. The SDK will flip the normals internally.</summary>
        public static bool HasNegativeDeterminant(this ref global::PhysX.PxMeshScale @self_)
        {
            return NativeMethods.PxMeshScale_hasNegativeDeterminant((global::PhysX.PxMeshScale*)Unsafe.AsPointer(ref @self_));
        }

        public static global::PhysX.PxVec3 Transform(this ref global::PhysX.PxMeshScale @self_, global::PhysX.PxVec3* @v)
        {
            return NativeMethods.PxMeshScale_transform((global::PhysX.PxMeshScale*)Unsafe.AsPointer(ref @self_), @v);
        }

        public static bool IsValidForTriangleMesh(this ref global::PhysX.PxMeshScale @self_)
        {
            return NativeMethods.PxMeshScale_isValidForTriangleMesh((global::PhysX.PxMeshScale*)Unsafe.AsPointer(ref @self_));
        }

        public static bool IsValidForConvexMesh(this ref global::PhysX.PxMeshScale @self_)
        {
            return NativeMethods.PxMeshScale_isValidForConvexMesh((global::PhysX.PxMeshScale*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxConvexMeshGeometry(2)

        /// <summary>Returns true if the geometry is valid.  True if the current settings are valid for shape creation.  A valid convex mesh has a positive scale value in each direction (scale.x &gt; 0, scale.y &gt; 0, scale.z &gt; 0). It is illegal to call PxRigidActor::createShape and PxPhysics::createShape with a convex that has zero extent in any direction.</summary>
        public static bool IsValid(this ref global::PhysX.PxConvexMeshGeometry @self_)
        {
            return NativeMethods.PxConvexMeshGeometry_isValid((global::PhysX.PxConvexMeshGeometry*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Computes closest polygon of the convex hull geometry for a given impact point and impact direction. When doing sweeps against a scene, one might want to delay the rather expensive computation of the hit face index for convexes until it is clear the information is really needed and then use this method to get the corresponding face index.  Closest face index of the convex geometry.</summary>
        public static uint PhysPxFindFaceIndex(this ref global::PhysX.PxConvexMeshGeometry @convexGeom, global::PhysX.PxTransform* @geomPose, global::PhysX.PxVec3* @impactPos, global::PhysX.PxVec3* @unitDir)
        {
            return NativeMethods.phys_PxFindFaceIndex((global::PhysX.PxConvexMeshGeometry*)Unsafe.AsPointer(ref @convexGeom), @geomPose, @impactPos, @unitDir);
        }

        #endregion

        #region PhysX.PxSphereGeometry(1)

        /// <summary>Returns true if the geometry is valid.  True if the current settings are valid  A valid sphere has radius &gt; 0. It is illegal to call PxRigidActor::createShape and PxPhysics::createShape with a sphere that has zero radius.</summary>
        public static bool IsValid(this ref global::PhysX.PxSphereGeometry @self_)
        {
            return NativeMethods.PxSphereGeometry_isValid((global::PhysX.PxSphereGeometry*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxPlaneGeometry(1)

        /// <summary>Returns true if the geometry is valid.  True if the current settings are valid</summary>
        public static bool IsValid(this ref global::PhysX.PxPlaneGeometry @self_)
        {
            return NativeMethods.PxPlaneGeometry_isValid((global::PhysX.PxPlaneGeometry*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxTriangleMesh(17)

        /// <summary>Constructor. By default creates an empty object with a NULL mesh and identity scale.</summary>
        public static global::PhysX.PxTriangleMeshGeometry GeometryNew(this ref global::PhysX.PxTriangleMesh @mesh, global::PhysX.PxMeshScale* @scaling, global::PhysX.PxMeshGeometryFlags @flags)
        {
            return NativeMethods.PxTriangleMeshGeometry_new((global::PhysX.PxTriangleMesh*)Unsafe.AsPointer(ref @mesh), @scaling, @flags);
        }

        /// <summary>Returns the number of vertices.  number of vertices</summary>
        public static uint GetNbVertices(this ref global::PhysX.PxTriangleMesh @self_)
        {
            return NativeMethods.PxTriangleMesh_getNbVertices((global::PhysX.PxTriangleMesh*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Returns the vertices.  array of vertices</summary>
        public static global::PhysX.PxVec3* GetVertices(this ref global::PhysX.PxTriangleMesh @self_)
        {
            return NativeMethods.PxTriangleMesh_getVertices((global::PhysX.PxTriangleMesh*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Returns all mesh vertices for modification.  This function will return the vertices of the mesh so that their positions can be changed in place. After modifying the vertices you must call refitBVH for the refitting to actually take place. This function maintains the old mesh topology (triangle indices).  inplace vertex coordinates for each existing mesh vertex.  It is recommended to use this feature for scene queries only.  Size of array returned is equal to the number returned by getNbVertices().  This function operates on cooked vertex indices.  This means the index mapping and vertex count can be different from what was provided as an input to the cooking routine.  To achieve unchanged 1-to-1 index mapping with orignal mesh data (before cooking) please use the following cooking flags:  eWELD_VERTICES = 0, eDISABLE_CLEAN_MESH = 1.  It is also recommended to make sure that a call to validateTriangleMesh returns true if mesh cleaning is disabled.</summary>
        public static global::PhysX.PxVec3* GetVerticesForModificationMut(this ref global::PhysX.PxTriangleMesh @self_)
        {
            return NativeMethods.PxTriangleMesh_getVerticesForModification_mut((global::PhysX.PxTriangleMesh*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Refits BVH for mesh vertices.  This function will refit the mesh BVH to correctly enclose the new positions updated by getVerticesForModification. Mesh BVH will not be reoptimized by this function so significantly different new positions will cause significantly reduced performance.  New bounds for the entire mesh.  For PxMeshMidPhase::eBVH34 trees the refit operation is only available on non-quantized trees (see PxBVH34MidphaseDesc::quantized)  PhysX does not keep a mapping from the mesh to mesh shapes that reference it.  Call PxShape::setGeometry on each shape which references the mesh, to ensure that internal data structures are updated to reflect the new geometry.  PxShape::setGeometry does not guarantee correct/continuous behavior when objects are resting on top of old or new geometry.  It is also recommended to make sure that a call to validateTriangleMesh returns true if mesh cleaning is disabled.  Active edges information will be lost during refit, the rigid body mesh contact generation might not perform as expected.</summary>
        public static global::PhysX.PxBounds3 RefitBVHMut(this ref global::PhysX.PxTriangleMesh @self_)
        {
            return NativeMethods.PxTriangleMesh_refitBVH_mut((global::PhysX.PxTriangleMesh*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Returns the number of triangles.  number of triangles</summary>
        public static uint GetNbTriangles(this ref global::PhysX.PxTriangleMesh @self_)
        {
            return NativeMethods.PxTriangleMesh_getNbTriangles((global::PhysX.PxTriangleMesh*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Returns the triangle indices.  The indices can be 16 or 32bit depending on the number of triangles in the mesh. Call getTriangleMeshFlags() to know if the indices are 16 or 32 bits.  The number of indices is the number of triangles * 3.  array of triangles</summary>
        public static void* GetTriangles(this ref global::PhysX.PxTriangleMesh @self_)
        {
            return NativeMethods.PxTriangleMesh_getTriangles((global::PhysX.PxTriangleMesh*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Reads the PxTriangleMesh flags.  See the list of flags [`PxTriangleMeshFlag`]  The values of the PxTriangleMesh flags.</summary>
        public static global::PhysX.PxTriangleMeshFlags GetTriangleMeshFlags(this ref global::PhysX.PxTriangleMesh @self_)
        {
            return NativeMethods.PxTriangleMesh_getTriangleMeshFlags((global::PhysX.PxTriangleMesh*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Returns the triangle remapping table.  The triangles are internally sorted according to various criteria. Hence the internal triangle order does not always match the original (user-defined) order. The remapping table helps finding the old indices knowing the new ones:  remapTable[ internalTriangleIndex ] = originalTriangleIndex  the remapping table (or NULL if 'PxCookingParams::suppressTriangleMeshRemapTable' has been used)</summary>
        public static uint* GetTrianglesRemap(this ref global::PhysX.PxTriangleMesh @self_)
        {
            return NativeMethods.PxTriangleMesh_getTrianglesRemap((global::PhysX.PxTriangleMesh*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Decrements the reference count of a triangle mesh and releases it if the new reference count is zero.</summary>
        public static void ReleaseMut(this ref global::PhysX.PxTriangleMesh @self_)
        {
            NativeMethods.PxTriangleMesh_release_mut((global::PhysX.PxTriangleMesh*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Returns material table index of given triangle  This function takes a post cooking triangle index.  Material table index, or 0xffff if no per-triangle materials are used</summary>
        public static ushort GetTriangleMaterialIndex(this ref global::PhysX.PxTriangleMesh @self_, uint @triangleIndex)
        {
            return NativeMethods.PxTriangleMesh_getTriangleMaterialIndex((global::PhysX.PxTriangleMesh*)Unsafe.AsPointer(ref @self_), @triangleIndex);
        }

        /// <summary>Returns the local-space (vertex space) AABB from the triangle mesh.  local-space bounds</summary>
        public static global::PhysX.PxBounds3 GetLocalBounds(this ref global::PhysX.PxTriangleMesh @self_)
        {
            return NativeMethods.PxTriangleMesh_getLocalBounds((global::PhysX.PxTriangleMesh*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Returns the local-space Signed Distance Field for this mesh if it has one.  local-space SDF.</summary>
        public static float* GetSDF(this ref global::PhysX.PxTriangleMesh @self_)
        {
            return NativeMethods.PxTriangleMesh_getSDF((global::PhysX.PxTriangleMesh*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Returns the resolution of the local-space dense SDF.</summary>
        public static void GetSDFDimensions(this ref global::PhysX.PxTriangleMesh @self_, uint* @numX, uint* @numY, uint* @numZ)
        {
            NativeMethods.PxTriangleMesh_getSDFDimensions((global::PhysX.PxTriangleMesh*)Unsafe.AsPointer(ref @self_), @numX, @numY, @numZ);
        }

        /// <summary>Sets whether this mesh should be preferred for SDF projection.  By default, meshes are flagged as preferring projection and the decisions on which mesh to project is based on the triangle and vertex count. The model with the fewer triangles is projected onto the SDF of the more detailed mesh. If one of the meshes is set to prefer SDF projection (default) and the other is set to not prefer SDF projection, model flagged as preferring SDF projection will be projected onto the model flagged as not preferring, regardless of the detail of the respective meshes. Where both models are flagged as preferring no projection, the less detailed model will be projected as before.</summary>
        public static void SetPreferSDFProjectionMut(this ref global::PhysX.PxTriangleMesh @self_, bool @preferProjection)
        {
            NativeMethods.PxTriangleMesh_setPreferSDFProjection_mut((global::PhysX.PxTriangleMesh*)Unsafe.AsPointer(ref @self_), @preferProjection);
        }

        /// <summary>Returns whether this mesh prefers SDF projection.  whether this mesh prefers SDF projection.</summary>
        public static bool GetPreferSDFProjection(this ref global::PhysX.PxTriangleMesh @self_)
        {
            return NativeMethods.PxTriangleMesh_getPreferSDFProjection((global::PhysX.PxTriangleMesh*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Returns the mass properties of the mesh assuming unit density.  The following relationship holds between mass and volume:  mass = volume * density  The mass of a unit density mesh is equal to its volume, so this function returns the volume of the mesh.  Similarly, to obtain the localInertia of an identically shaped object with a uniform density of d, simply multiply the localInertia of the unit density mesh by d.</summary>
        public static void GetMassInformation(this ref global::PhysX.PxTriangleMesh @self_, float* @mass, global::PhysX.PxMat33* @localInertia, global::PhysX.PxVec3* @localCenterOfMass)
        {
            NativeMethods.PxTriangleMesh_getMassInformation((global::PhysX.PxTriangleMesh*)Unsafe.AsPointer(ref @self_), @mass, @localInertia, @localCenterOfMass);
        }

        #endregion

        #region PhysX.PxTriangleMeshGeometry(2)

        /// <summary>Returns true if the geometry is valid.  True if the current settings are valid for shape creation.  A valid triangle mesh has a positive scale value in each direction (scale.scale.x &gt; 0, scale.scale.y &gt; 0, scale.scale.z &gt; 0). It is illegal to call PxRigidActor::createShape and PxPhysics::createShape with a triangle mesh that has zero extents in any direction.</summary>
        public static bool IsValid(this ref global::PhysX.PxTriangleMeshGeometry @self_)
        {
            return NativeMethods.PxTriangleMeshGeometry_isValid((global::PhysX.PxTriangleMeshGeometry*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Retrieves triangle data from a triangle ID.  This function can be used together with [`findOverlapTriangleMesh`]() to retrieve triangle properties.  This function will flip the triangle normal whenever triGeom.scale.hasNegativeDeterminant() is true.</summary>
        public static void MeshQueryGetTriangle(this ref global::PhysX.PxTriangleMeshGeometry @triGeom, global::PhysX.PxTransform* @transform, uint @triangleIndex, global::PhysX.PxTriangle* @triangle, uint* @vertexIndices, uint* @adjacencyIndices)
        {
            NativeMethods.PxMeshQuery_getTriangle((global::PhysX.PxTriangleMeshGeometry*)Unsafe.AsPointer(ref @triGeom), @transform, @triangleIndex, @triangle, @vertexIndices, @adjacencyIndices);
        }

        #endregion

        #region PhysX.PxHeightField(16)

        /// <summary>Constructor.</summary>
        public static global::PhysX.PxHeightFieldGeometry GeometryNew(this ref global::PhysX.PxHeightField @hf, global::PhysX.PxMeshGeometryFlags @flags, float @heightScale_, float @rowScale_, float @columnScale_)
        {
            return NativeMethods.PxHeightFieldGeometry_new((global::PhysX.PxHeightField*)Unsafe.AsPointer(ref @hf), @flags, @heightScale_, @rowScale_, @columnScale_);
        }

        /// <summary>Decrements the reference count of a height field and releases it if the new reference count is zero.</summary>
        public static void ReleaseMut(this ref global::PhysX.PxHeightField @self_)
        {
            NativeMethods.PxHeightField_release_mut((global::PhysX.PxHeightField*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Writes out the sample data array.  The user provides destBufferSize bytes storage at destBuffer. The data is formatted and arranged as PxHeightFieldDesc.samples.  The number of bytes written.</summary>
        public static uint SaveCells(this ref global::PhysX.PxHeightField @self_, void* @destBuffer, uint @destBufferSize)
        {
            return NativeMethods.PxHeightField_saveCells((global::PhysX.PxHeightField*)Unsafe.AsPointer(ref @self_), @destBuffer, @destBufferSize);
        }

        /// <summary>Replaces a rectangular subfield in the sample data array.  The user provides the description of a rectangular subfield in subfieldDesc. The data is formatted and arranged as PxHeightFieldDesc.samples.  True on success, false on failure. Failure can occur due to format mismatch.  Modified samples are constrained to the same height quantization range as the original heightfield. Source samples that are out of range of target heightfield will be clipped with no error. PhysX does not keep a mapping from the heightfield to heightfield shapes that reference it. Call PxShape::setGeometry on each shape which references the height field, to ensure that internal data structures are updated to reflect the new geometry. Please note that PxShape::setGeometry does not guarantee correct/continuous behavior when objects are resting on top of old or new geometry.</summary>
        public static bool ModifySamplesMut(this ref global::PhysX.PxHeightField @self_, int @startCol, int @startRow, global::PhysX.PxHeightFieldDesc* @subfieldDesc, bool @shrinkBounds)
        {
            return NativeMethods.PxHeightField_modifySamples_mut((global::PhysX.PxHeightField*)Unsafe.AsPointer(ref @self_), @startCol, @startRow, @subfieldDesc, @shrinkBounds);
        }

        /// <summary>Retrieves the number of sample rows in the samples array.  The number of sample rows in the samples array.</summary>
        public static uint GetNbRows(this ref global::PhysX.PxHeightField @self_)
        {
            return NativeMethods.PxHeightField_getNbRows((global::PhysX.PxHeightField*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Retrieves the number of sample columns in the samples array.  The number of sample columns in the samples array.</summary>
        public static uint GetNbColumns(this ref global::PhysX.PxHeightField @self_)
        {
            return NativeMethods.PxHeightField_getNbColumns((global::PhysX.PxHeightField*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Retrieves the format of the sample data.  The format of the sample data.</summary>
        public static global::PhysX.PxHeightFieldFormat GetFormat(this ref global::PhysX.PxHeightField @self_)
        {
            return NativeMethods.PxHeightField_getFormat((global::PhysX.PxHeightField*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Retrieves the offset in bytes between consecutive samples in the array.  The offset in bytes between consecutive samples in the array.</summary>
        public static uint GetSampleStride(this ref global::PhysX.PxHeightField @self_)
        {
            return NativeMethods.PxHeightField_getSampleStride((global::PhysX.PxHeightField*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Retrieves the convex edge threshold.  The convex edge threshold.</summary>
        public static float GetConvexEdgeThreshold(this ref global::PhysX.PxHeightField @self_)
        {
            return NativeMethods.PxHeightField_getConvexEdgeThreshold((global::PhysX.PxHeightField*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Retrieves the flags bits, combined from values of the enum ::PxHeightFieldFlag.  The flags bits, combined from values of the enum ::PxHeightFieldFlag.</summary>
        public static global::PhysX.PxHeightFieldFlags GetFlags(this ref global::PhysX.PxHeightField @self_)
        {
            return NativeMethods.PxHeightField_getFlags((global::PhysX.PxHeightField*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Retrieves the height at the given coordinates in grid space.  The height at the given coordinates or 0 if the coordinates are out of range.</summary>
        public static float GetHeight(this ref global::PhysX.PxHeightField @self_, float @x, float @z)
        {
            return NativeMethods.PxHeightField_getHeight((global::PhysX.PxHeightField*)Unsafe.AsPointer(ref @self_), @x, @z);
        }

        /// <summary>Returns material table index of given triangle  This function takes a post cooking triangle index.  Material table index, or 0xffff if no per-triangle materials are used</summary>
        public static ushort GetTriangleMaterialIndex(this ref global::PhysX.PxHeightField @self_, uint @triangleIndex)
        {
            return NativeMethods.PxHeightField_getTriangleMaterialIndex((global::PhysX.PxHeightField*)Unsafe.AsPointer(ref @self_), @triangleIndex);
        }

        /// <summary>Returns a triangle face normal for a given triangle index  This function takes a post cooking triangle index.  Triangle normal for a given triangle index</summary>
        public static global::PhysX.PxVec3 GetTriangleNormal(this ref global::PhysX.PxHeightField @self_, uint @triangleIndex)
        {
            return NativeMethods.PxHeightField_getTriangleNormal((global::PhysX.PxHeightField*)Unsafe.AsPointer(ref @self_), @triangleIndex);
        }

        /// <summary>Returns heightfield sample of given row and column  Heightfield sample</summary>
        public static global::PhysX.PxHeightFieldSample* GetSample(this ref global::PhysX.PxHeightField @self_, uint @row, uint @column)
        {
            return NativeMethods.PxHeightField_getSample((global::PhysX.PxHeightField*)Unsafe.AsPointer(ref @self_), @row, @column);
        }

        /// <summary>Returns the number of times the heightfield data has been modified  This method returns the number of times modifySamples has been called on this heightfield, so that code that has retained state that depends on the heightfield can efficiently determine whether it has been modified.  the number of times the heightfield sample data has been modified.</summary>
        public static uint GetTimestamp(this ref global::PhysX.PxHeightField @self_)
        {
            return NativeMethods.PxHeightField_getTimestamp((global::PhysX.PxHeightField*)Unsafe.AsPointer(ref @self_));
        }

        public static byte* GetConcreteTypeName(this ref global::PhysX.PxHeightField @self_)
        {
            return NativeMethods.PxHeightField_getConcreteTypeName((global::PhysX.PxHeightField*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxHeightFieldGeometry(2)

        /// <summary>Returns true if the geometry is valid.  True if the current settings are valid  A valid height field has a positive scale value in each direction (heightScale &gt; 0, rowScale &gt; 0, columnScale &gt; 0). It is illegal to call PxRigidActor::createShape and PxPhysics::createShape with a height field that has zero extents in any direction.</summary>
        public static bool IsValid(this ref global::PhysX.PxHeightFieldGeometry @self_)
        {
            return NativeMethods.PxHeightFieldGeometry_isValid((global::PhysX.PxHeightFieldGeometry*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Retrieves triangle data from a triangle ID.  This function can be used together with [`findOverlapHeightField`]() to retrieve triangle properties.  This function will flip the triangle normal whenever triGeom.scale.hasNegativeDeterminant() is true.  TriangleIndex is an index used in internal format, which does have an index out of the bounds in last row. To traverse all tri indices in the HF, the following code can be applied: for (PxU32 row = 0; row &lt; (nbRows - 1); row++) { for (PxU32 col = 0; col &lt; (nbCols - 1); col++) { for (PxU32 k = 0; k &lt; 2; k++) { const PxU32 triIndex = 2 * (row*nbCols + col) + k; .... } } }</summary>
        public static void MeshQueryGetTriangle1(this ref global::PhysX.PxHeightFieldGeometry @hfGeom, global::PhysX.PxTransform* @transform, uint @triangleIndex, global::PhysX.PxTriangle* @triangle, uint* @vertexIndices, uint* @adjacencyIndices)
        {
            NativeMethods.PxMeshQuery_getTriangle_1((global::PhysX.PxHeightFieldGeometry*)Unsafe.AsPointer(ref @hfGeom), @transform, @triangleIndex, @triangle, @vertexIndices, @adjacencyIndices);
        }

        #endregion

        #region PhysX.PxParticleSystemGeometry(1)

        /// <summary>Returns true if the geometry is valid.  True if the current settings are valid for shape creation.</summary>
        public static bool IsValid(this ref global::PhysX.PxParticleSystemGeometry @self_)
        {
            return NativeMethods.PxParticleSystemGeometry_isValid((global::PhysX.PxParticleSystemGeometry*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxHairSystemGeometry(1)

        /// <summary>Returns true if the geometry is valid.  True if the current settings are valid for shape creation.</summary>
        public static bool IsValid(this ref global::PhysX.PxHairSystemGeometry @self_)
        {
            return NativeMethods.PxHairSystemGeometry_isValid((global::PhysX.PxHairSystemGeometry*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxTetrahedronMesh(11)

        /// <summary>Constructor. By default creates an empty object with a NULL mesh and identity scale.</summary>
        public static global::PhysX.PxTetrahedronMeshGeometry GeometryNew(this ref global::PhysX.PxTetrahedronMesh @mesh)
        {
            return NativeMethods.PxTetrahedronMeshGeometry_new((global::PhysX.PxTetrahedronMesh*)Unsafe.AsPointer(ref @mesh));
        }

        /// <summary>Returns the number of vertices.  number of vertices</summary>
        public static uint GetNbVertices(this ref global::PhysX.PxTetrahedronMesh @self_)
        {
            return NativeMethods.PxTetrahedronMesh_getNbVertices((global::PhysX.PxTetrahedronMesh*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Returns the vertices  array of vertices</summary>
        public static global::PhysX.PxVec3* GetVertices(this ref global::PhysX.PxTetrahedronMesh @self_)
        {
            return NativeMethods.PxTetrahedronMesh_getVertices((global::PhysX.PxTetrahedronMesh*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Returns the number of tetrahedrons.  number of tetrahedrons</summary>
        public static uint GetNbTetrahedrons(this ref global::PhysX.PxTetrahedronMesh @self_)
        {
            return NativeMethods.PxTetrahedronMesh_getNbTetrahedrons((global::PhysX.PxTetrahedronMesh*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Returns the tetrahedron indices.  The indices can be 16 or 32bit depending on the number of tetrahedrons in the mesh. Call getTetrahedronMeshFlags() to know if the indices are 16 or 32 bits.  The number of indices is the number of tetrahedrons * 4.  array of tetrahedrons</summary>
        public static void* GetTetrahedrons(this ref global::PhysX.PxTetrahedronMesh @self_)
        {
            return NativeMethods.PxTetrahedronMesh_getTetrahedrons((global::PhysX.PxTetrahedronMesh*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Reads the PxTetrahedronMesh flags.  See the list of flags [`PxTetrahedronMeshFlags`]  The values of the PxTetrahedronMesh flags.</summary>
        public static global::PhysX.PxTetrahedronMeshFlags GetTetrahedronMeshFlags(this ref global::PhysX.PxTetrahedronMesh @self_)
        {
            return NativeMethods.PxTetrahedronMesh_getTetrahedronMeshFlags((global::PhysX.PxTetrahedronMesh*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Returns the tetrahedra remapping table.  The tetrahedra are internally sorted according to various criteria. Hence the internal tetrahedron order does not always match the original (user-defined) order. The remapping table helps finding the old indices knowing the new ones:  remapTable[ internalTetrahedronIndex ] = originalTetrahedronIndex  the remapping table (or NULL if 'PxCookingParams::suppressTriangleMeshRemapTable' has been used)</summary>
        public static uint* GetTetrahedraRemap(this ref global::PhysX.PxTetrahedronMesh @self_)
        {
            return NativeMethods.PxTetrahedronMesh_getTetrahedraRemap((global::PhysX.PxTetrahedronMesh*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Returns the local-space (vertex space) AABB from the tetrahedron mesh.  local-space bounds</summary>
        public static global::PhysX.PxBounds3 GetLocalBounds(this ref global::PhysX.PxTetrahedronMesh @self_)
        {
            return NativeMethods.PxTetrahedronMesh_getLocalBounds((global::PhysX.PxTetrahedronMesh*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Decrements the reference count of a tetrahedron mesh and releases it if the new reference count is zero.</summary>
        public static void ReleaseMut(this ref global::PhysX.PxTetrahedronMesh @self_)
        {
            NativeMethods.PxTetrahedronMesh_release_mut((global::PhysX.PxTetrahedronMesh*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Returns the index of the tetrahedron that contains a point  The index of the tetrahedon containing the point, -1 if not tetrahedron contains the opoint</summary>
        public static int ExtFindTetrahedronContainingPoint(this ref global::PhysX.PxTetrahedronMesh @mesh, global::PhysX.PxVec3* @point, global::PhysX.PxVec4* @bary, float @tolerance)
        {
            return NativeMethods.PxTetrahedronMeshExt_findTetrahedronContainingPoint((global::PhysX.PxTetrahedronMesh*)Unsafe.AsPointer(ref @mesh), @point, @bary, @tolerance);
        }

        /// <summary>Returns the index of the tetrahedron closest to a point  The index of the tetrahedon closest to the point</summary>
        public static int ExtFindTetrahedronClosestToPoint(this ref global::PhysX.PxTetrahedronMesh @mesh, global::PhysX.PxVec3* @point, global::PhysX.PxVec4* @bary)
        {
            return NativeMethods.PxTetrahedronMeshExt_findTetrahedronClosestToPoint((global::PhysX.PxTetrahedronMesh*)Unsafe.AsPointer(ref @mesh), @point, @bary);
        }

        #endregion

        #region PhysX.PxTetrahedronMeshGeometry(1)

        /// <summary>Returns true if the geometry is valid.  True if the current settings are valid for shape creation.  A valid tetrahedron mesh has a positive scale value in each direction (scale.scale.x &gt; 0, scale.scale.y &gt; 0, scale.scale.z &gt; 0). It is illegal to call PxRigidActor::createShape and PxPhysics::createShape with a tetrahedron mesh that has zero extents in any direction.</summary>
        public static bool IsValid(this ref global::PhysX.PxTetrahedronMeshGeometry @self_)
        {
            return NativeMethods.PxTetrahedronMeshGeometry_isValid((global::PhysX.PxTetrahedronMeshGeometry*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxLocationHit(1)

        /// <summary>For raycast hits: true for shapes overlapping with raycast origin.  For sweep hits: true for shapes overlapping at zero sweep distance.</summary>
        public static bool HadInitialOverlap(this ref global::PhysX.PxLocationHit @self_)
        {
            return NativeMethods.PxLocationHit_hadInitialOverlap((global::PhysX.PxLocationHit*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxCustomGeometryCallbacks(9)

        /// <summary>Return custom type. The type purpose is for user to differentiate custom geometries. Not used by PhysX.  Unique ID of a custom geometry type.  User should use DECLARE_CUSTOM_GEOMETRY_TYPE and IMPLEMENT_CUSTOM_GEOMETRY_TYPE intead of overwriting this function.</summary>
        public static global::PhysX.PxCustomGeometryType GetCustomType(this ref global::PhysX.PxCustomGeometryCallbacks @self_)
        {
            return NativeMethods.PxCustomGeometryCallbacks_getCustomType((global::PhysX.PxCustomGeometryCallbacks*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Return local bounds.  Bounding box in the geometry local space.</summary>
        public static global::PhysX.PxBounds3 GetLocalBounds(this ref global::PhysX.PxCustomGeometryCallbacks @self_, global::PhysX.PxGeometry* @geometry)
        {
            return NativeMethods.PxCustomGeometryCallbacks_getLocalBounds((global::PhysX.PxCustomGeometryCallbacks*)Unsafe.AsPointer(ref @self_), @geometry);
        }

        /// <summary>Raycast. Cast a ray against the geometry in given pose.  Number of hits.</summary>
        public static uint Raycast(this ref global::PhysX.PxCustomGeometryCallbacks @self_, global::PhysX.PxVec3* @origin, global::PhysX.PxVec3* @unitDir, global::PhysX.PxGeometry* @geom, global::PhysX.PxTransform* @pose, float @maxDist, global::PhysX.PxHitFlags @hitFlags, uint @maxHits, global::PhysX.PxGeomRaycastHit* @rayHits, uint @stride, global::PhysX.PxQueryThreadContext* @threadContext)
        {
            return NativeMethods.PxCustomGeometryCallbacks_raycast((global::PhysX.PxCustomGeometryCallbacks*)Unsafe.AsPointer(ref @self_), @origin, @unitDir, @geom, @pose, @maxDist, @hitFlags, @maxHits, @rayHits, @stride, @threadContext);
        }

        /// <summary>Overlap. Test if geometries overlap.  True if there is overlap. False otherwise.</summary>
        public static bool Overlap(this ref global::PhysX.PxCustomGeometryCallbacks @self_, global::PhysX.PxGeometry* @geom0, global::PhysX.PxTransform* @pose0, global::PhysX.PxGeometry* @geom1, global::PhysX.PxTransform* @pose1, global::PhysX.PxQueryThreadContext* @threadContext)
        {
            return NativeMethods.PxCustomGeometryCallbacks_overlap((global::PhysX.PxCustomGeometryCallbacks*)Unsafe.AsPointer(ref @self_), @geom0, @pose0, @geom1, @pose1, @threadContext);
        }

        /// <summary>Sweep. Sweep one geometry against the other.  True if there is hit. False otherwise.</summary>
        public static bool Sweep(this ref global::PhysX.PxCustomGeometryCallbacks @self_, global::PhysX.PxVec3* @unitDir, float @maxDist, global::PhysX.PxGeometry* @geom0, global::PhysX.PxTransform* @pose0, global::PhysX.PxGeometry* @geom1, global::PhysX.PxTransform* @pose1, global::PhysX.PxGeomSweepHit* @sweepHit, global::PhysX.PxHitFlags @hitFlags, float @inflation, global::PhysX.PxQueryThreadContext* @threadContext)
        {
            return NativeMethods.PxCustomGeometryCallbacks_sweep((global::PhysX.PxCustomGeometryCallbacks*)Unsafe.AsPointer(ref @self_), @unitDir, @maxDist, @geom0, @pose0, @geom1, @pose1, @sweepHit, @hitFlags, @inflation, @threadContext);
        }

        /// <summary>Compute custom geometry mass properties. For geometries usable with dynamic rigidbodies.</summary>
        public static void ComputeMassProperties(this ref global::PhysX.PxCustomGeometryCallbacks @self_, global::PhysX.PxGeometry* @geometry, global::PhysX.PxMassProperties* @massProperties)
        {
            NativeMethods.PxCustomGeometryCallbacks_computeMassProperties((global::PhysX.PxCustomGeometryCallbacks*)Unsafe.AsPointer(ref @self_), @geometry, @massProperties);
        }

        /// <summary>Compatible with PhysX's PCM feature. Allows to optimize contact generation.</summary>
        public static bool UsePersistentContactManifold(this ref global::PhysX.PxCustomGeometryCallbacks @self_, global::PhysX.PxGeometry* @geometry, float* @breakingThreshold)
        {
            return NativeMethods.PxCustomGeometryCallbacks_usePersistentContactManifold((global::PhysX.PxCustomGeometryCallbacks*)Unsafe.AsPointer(ref @self_), @geometry, @breakingThreshold);
        }

        public static void Delete(this ref global::PhysX.PxCustomGeometryCallbacks @self_)
        {
            NativeMethods.PxCustomGeometryCallbacks_delete((global::PhysX.PxCustomGeometryCallbacks*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Constructor.</summary>
        public static global::PhysX.PxCustomGeometry CustomGeometryNew1(this ref global::PhysX.PxCustomGeometryCallbacks @_callbacks)
        {
            return NativeMethods.PxCustomGeometry_new_1((global::PhysX.PxCustomGeometryCallbacks*)Unsafe.AsPointer(ref @_callbacks));
        }

        #endregion

        #region PhysX.PxCustomGeometry(2)

        /// <summary>Returns true if the geometry is valid.  True if the current settings are valid for shape creation.</summary>
        public static bool IsValid(this ref global::PhysX.PxCustomGeometry @self_)
        {
            return NativeMethods.PxCustomGeometry_isValid((global::PhysX.PxCustomGeometry*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Returns the custom type of the custom geometry.</summary>
        public static global::PhysX.PxCustomGeometryType GetCustomType(this ref global::PhysX.PxCustomGeometry @self_)
        {
            return NativeMethods.PxCustomGeometry_getCustomType((global::PhysX.PxCustomGeometry*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxGeometryHolder(26)

        public static global::PhysX.PxGeometryType GetType(this ref global::PhysX.PxGeometryHolder @self_)
        {
            return NativeMethods.PxGeometryHolder_getType((global::PhysX.PxGeometryHolder*)Unsafe.AsPointer(ref @self_));
        }

        public static global::PhysX.PxGeometry* AnyMut(this ref global::PhysX.PxGeometryHolder @self_)
        {
            return NativeMethods.PxGeometryHolder_any_mut((global::PhysX.PxGeometryHolder*)Unsafe.AsPointer(ref @self_));
        }

        public static global::PhysX.PxGeometry* Any(this ref global::PhysX.PxGeometryHolder @self_)
        {
            return NativeMethods.PxGeometryHolder_any((global::PhysX.PxGeometryHolder*)Unsafe.AsPointer(ref @self_));
        }

        public static global::PhysX.PxSphereGeometry* SphereMut(this ref global::PhysX.PxGeometryHolder @self_)
        {
            return NativeMethods.PxGeometryHolder_sphere_mut((global::PhysX.PxGeometryHolder*)Unsafe.AsPointer(ref @self_));
        }

        public static global::PhysX.PxSphereGeometry* Sphere(this ref global::PhysX.PxGeometryHolder @self_)
        {
            return NativeMethods.PxGeometryHolder_sphere((global::PhysX.PxGeometryHolder*)Unsafe.AsPointer(ref @self_));
        }

        public static global::PhysX.PxPlaneGeometry* PlaneMut(this ref global::PhysX.PxGeometryHolder @self_)
        {
            return NativeMethods.PxGeometryHolder_plane_mut((global::PhysX.PxGeometryHolder*)Unsafe.AsPointer(ref @self_));
        }

        public static global::PhysX.PxPlaneGeometry* Plane(this ref global::PhysX.PxGeometryHolder @self_)
        {
            return NativeMethods.PxGeometryHolder_plane((global::PhysX.PxGeometryHolder*)Unsafe.AsPointer(ref @self_));
        }

        public static global::PhysX.PxCapsuleGeometry* CapsuleMut(this ref global::PhysX.PxGeometryHolder @self_)
        {
            return NativeMethods.PxGeometryHolder_capsule_mut((global::PhysX.PxGeometryHolder*)Unsafe.AsPointer(ref @self_));
        }

        public static global::PhysX.PxCapsuleGeometry* Capsule(this ref global::PhysX.PxGeometryHolder @self_)
        {
            return NativeMethods.PxGeometryHolder_capsule((global::PhysX.PxGeometryHolder*)Unsafe.AsPointer(ref @self_));
        }

        public static global::PhysX.PxBoxGeometry* BoxMut(this ref global::PhysX.PxGeometryHolder @self_)
        {
            return NativeMethods.PxGeometryHolder_box_mut((global::PhysX.PxGeometryHolder*)Unsafe.AsPointer(ref @self_));
        }

        public static global::PhysX.PxBoxGeometry* Box(this ref global::PhysX.PxGeometryHolder @self_)
        {
            return NativeMethods.PxGeometryHolder_box((global::PhysX.PxGeometryHolder*)Unsafe.AsPointer(ref @self_));
        }

        public static global::PhysX.PxConvexMeshGeometry* ConvexMeshMut(this ref global::PhysX.PxGeometryHolder @self_)
        {
            return NativeMethods.PxGeometryHolder_convexMesh_mut((global::PhysX.PxGeometryHolder*)Unsafe.AsPointer(ref @self_));
        }

        public static global::PhysX.PxConvexMeshGeometry* ConvexMesh(this ref global::PhysX.PxGeometryHolder @self_)
        {
            return NativeMethods.PxGeometryHolder_convexMesh((global::PhysX.PxGeometryHolder*)Unsafe.AsPointer(ref @self_));
        }

        public static global::PhysX.PxTetrahedronMeshGeometry* TetMeshMut(this ref global::PhysX.PxGeometryHolder @self_)
        {
            return NativeMethods.PxGeometryHolder_tetMesh_mut((global::PhysX.PxGeometryHolder*)Unsafe.AsPointer(ref @self_));
        }

        public static global::PhysX.PxTetrahedronMeshGeometry* TetMesh(this ref global::PhysX.PxGeometryHolder @self_)
        {
            return NativeMethods.PxGeometryHolder_tetMesh((global::PhysX.PxGeometryHolder*)Unsafe.AsPointer(ref @self_));
        }

        public static global::PhysX.PxTriangleMeshGeometry* TriangleMeshMut(this ref global::PhysX.PxGeometryHolder @self_)
        {
            return NativeMethods.PxGeometryHolder_triangleMesh_mut((global::PhysX.PxGeometryHolder*)Unsafe.AsPointer(ref @self_));
        }

        public static global::PhysX.PxTriangleMeshGeometry* TriangleMesh(this ref global::PhysX.PxGeometryHolder @self_)
        {
            return NativeMethods.PxGeometryHolder_triangleMesh((global::PhysX.PxGeometryHolder*)Unsafe.AsPointer(ref @self_));
        }

        public static global::PhysX.PxHeightFieldGeometry* HeightFieldMut(this ref global::PhysX.PxGeometryHolder @self_)
        {
            return NativeMethods.PxGeometryHolder_heightField_mut((global::PhysX.PxGeometryHolder*)Unsafe.AsPointer(ref @self_));
        }

        public static global::PhysX.PxHeightFieldGeometry* HeightField(this ref global::PhysX.PxGeometryHolder @self_)
        {
            return NativeMethods.PxGeometryHolder_heightField((global::PhysX.PxGeometryHolder*)Unsafe.AsPointer(ref @self_));
        }

        public static global::PhysX.PxParticleSystemGeometry* ParticleSystemMut(this ref global::PhysX.PxGeometryHolder @self_)
        {
            return NativeMethods.PxGeometryHolder_particleSystem_mut((global::PhysX.PxGeometryHolder*)Unsafe.AsPointer(ref @self_));
        }

        public static global::PhysX.PxParticleSystemGeometry* ParticleSystem(this ref global::PhysX.PxGeometryHolder @self_)
        {
            return NativeMethods.PxGeometryHolder_particleSystem((global::PhysX.PxGeometryHolder*)Unsafe.AsPointer(ref @self_));
        }

        public static global::PhysX.PxHairSystemGeometry* HairSystemMut(this ref global::PhysX.PxGeometryHolder @self_)
        {
            return NativeMethods.PxGeometryHolder_hairSystem_mut((global::PhysX.PxGeometryHolder*)Unsafe.AsPointer(ref @self_));
        }

        public static global::PhysX.PxHairSystemGeometry* HairSystem(this ref global::PhysX.PxGeometryHolder @self_)
        {
            return NativeMethods.PxGeometryHolder_hairSystem((global::PhysX.PxGeometryHolder*)Unsafe.AsPointer(ref @self_));
        }

        public static global::PhysX.PxCustomGeometry* CustomMut(this ref global::PhysX.PxGeometryHolder @self_)
        {
            return NativeMethods.PxGeometryHolder_custom_mut((global::PhysX.PxGeometryHolder*)Unsafe.AsPointer(ref @self_));
        }

        public static global::PhysX.PxCustomGeometry* Custom(this ref global::PhysX.PxGeometryHolder @self_)
        {
            return NativeMethods.PxGeometryHolder_custom((global::PhysX.PxGeometryHolder*)Unsafe.AsPointer(ref @self_));
        }

        public static void StoreAnyMut(this ref global::PhysX.PxGeometryHolder @self_, global::PhysX.PxGeometry* @geometry)
        {
            NativeMethods.PxGeometryHolder_storeAny_mut((global::PhysX.PxGeometryHolder*)Unsafe.AsPointer(ref @self_), @geometry);
        }

        #endregion

        #region PhysX.PxHeightFieldSample(3)

        public static byte TessFlag(this ref global::PhysX.PxHeightFieldSample @self_)
        {
            return NativeMethods.PxHeightFieldSample_tessFlag((global::PhysX.PxHeightFieldSample*)Unsafe.AsPointer(ref @self_));
        }

        public static void SetTessFlagMut(this ref global::PhysX.PxHeightFieldSample @self_)
        {
            NativeMethods.PxHeightFieldSample_setTessFlag_mut((global::PhysX.PxHeightFieldSample*)Unsafe.AsPointer(ref @self_));
        }

        public static void ClearTessFlagMut(this ref global::PhysX.PxHeightFieldSample @self_)
        {
            NativeMethods.PxHeightFieldSample_clearTessFlag_mut((global::PhysX.PxHeightFieldSample*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxHeightFieldDesc(4)

        /// <summary>(re)sets the structure to the default.</summary>
        public static void SetToDefaultMut(this ref global::PhysX.PxHeightFieldDesc @self_)
        {
            NativeMethods.PxHeightFieldDesc_setToDefault_mut((global::PhysX.PxHeightFieldDesc*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Returns true if the descriptor is valid.  True if the current settings are valid.</summary>
        public static bool IsValid(this ref global::PhysX.PxHeightFieldDesc @self_)
        {
            return NativeMethods.PxHeightFieldDesc_isValid((global::PhysX.PxHeightFieldDesc*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Cooks a heightfield. The results are written to the stream.  To create a heightfield object there is an option to precompute some of calculations done while loading the heightfield data.  cookHeightField() allows a heightfield description to be cooked into a binary stream suitable for loading and performing collision detection at runtime.  true on success</summary>
        public static bool PhysPxCookHeightField(this ref global::PhysX.PxHeightFieldDesc @desc, global::PhysX.PxOutputStream* @stream)
        {
            return NativeMethods.phys_PxCookHeightField((global::PhysX.PxHeightFieldDesc*)Unsafe.AsPointer(ref @desc), @stream);
        }

        /// <summary>Cooks and creates a heightfield mesh and inserts it into PxPhysics.  PxHeightField pointer on success</summary>
        public static global::PhysX.PxHeightField* PhysPxCreateHeightField(this ref global::PhysX.PxHeightFieldDesc @desc, global::PhysX.PxInsertionCallback* @insertionCallback)
        {
            return NativeMethods.phys_PxCreateHeightField((global::PhysX.PxHeightFieldDesc*)Unsafe.AsPointer(ref @desc), @insertionCallback);
        }

        #endregion

        #region PhysX.PxSimpleTriangleMesh(2)

        /// <summary>(re)sets the structure to the default.</summary>
        public static void SetToDefaultMut(this ref global::PhysX.PxSimpleTriangleMesh @self_)
        {
            NativeMethods.PxSimpleTriangleMesh_setToDefault_mut((global::PhysX.PxSimpleTriangleMesh*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>returns true if the current settings are valid</summary>
        public static bool IsValid(this ref global::PhysX.PxSimpleTriangleMesh @self_)
        {
            return NativeMethods.PxSimpleTriangleMesh_isValid((global::PhysX.PxSimpleTriangleMesh*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxTriangle(5)

        /// <summary>Destructor</summary>
        public static void Delete(this ref global::PhysX.PxTriangle @self_)
        {
            NativeMethods.PxTriangle_delete((global::PhysX.PxTriangle*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Compute the normal of the Triangle.</summary>
        public static void Normal(this ref global::PhysX.PxTriangle @self_, global::PhysX.PxVec3* @_normal)
        {
            NativeMethods.PxTriangle_normal((global::PhysX.PxTriangle*)Unsafe.AsPointer(ref @self_), @_normal);
        }

        /// <summary>Compute the unnormalized normal of the triangle.</summary>
        public static void DenormalizedNormal(this ref global::PhysX.PxTriangle @self_, global::PhysX.PxVec3* @_normal)
        {
            NativeMethods.PxTriangle_denormalizedNormal((global::PhysX.PxTriangle*)Unsafe.AsPointer(ref @self_), @_normal);
        }

        /// <summary>Compute the area of the triangle.  Area of the triangle.</summary>
        public static float Area(this ref global::PhysX.PxTriangle @self_)
        {
            return NativeMethods.PxTriangle_area((global::PhysX.PxTriangle*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Computes a point on the triangle from u and v barycentric coordinates.</summary>
        public static global::PhysX.PxVec3 PointFromUV(this ref global::PhysX.PxTriangle @self_, float @u, float @v)
        {
            return NativeMethods.PxTriangle_pointFromUV((global::PhysX.PxTriangle*)Unsafe.AsPointer(ref @self_), @u, @v);
        }

        #endregion

        #region PhysX.PxTrianglePadded(1)

        public static void Delete(this ref global::PhysX.PxTrianglePadded @self_)
        {
            NativeMethods.PxTrianglePadded_delete((global::PhysX.PxTrianglePadded*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxTetrahedron(1)

        /// <summary>Destructor</summary>
        public static void Delete(this ref global::PhysX.PxTetrahedron @self_)
        {
            NativeMethods.PxTetrahedron_delete((global::PhysX.PxTetrahedron*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxSoftBodyAuxData(1)

        /// <summary>Decrements the reference count of a tetrahedron mesh and releases it if the new reference count is zero.</summary>
        public static void ReleaseMut(this ref global::PhysX.PxSoftBodyAuxData @self_)
        {
            NativeMethods.PxSoftBodyAuxData_release_mut((global::PhysX.PxSoftBodyAuxData*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxSoftBodyMesh(7)

        /// <summary>Const accecssor to the softbody's collision mesh.</summary>
        public static global::PhysX.PxTetrahedronMesh* GetCollisionMesh(this ref global::PhysX.PxSoftBodyMesh @self_)
        {
            return NativeMethods.PxSoftBodyMesh_getCollisionMesh((global::PhysX.PxSoftBodyMesh*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Accecssor to the softbody's collision mesh.</summary>
        public static global::PhysX.PxTetrahedronMesh* GetCollisionMeshMut(this ref global::PhysX.PxSoftBodyMesh @self_)
        {
            return NativeMethods.PxSoftBodyMesh_getCollisionMesh_mut((global::PhysX.PxSoftBodyMesh*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Const accessor to the softbody's simulation mesh.</summary>
        public static global::PhysX.PxTetrahedronMesh* GetSimulationMesh(this ref global::PhysX.PxSoftBodyMesh @self_)
        {
            return NativeMethods.PxSoftBodyMesh_getSimulationMesh((global::PhysX.PxSoftBodyMesh*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Accecssor to the softbody's simulation mesh.</summary>
        public static global::PhysX.PxTetrahedronMesh* GetSimulationMeshMut(this ref global::PhysX.PxSoftBodyMesh @self_)
        {
            return NativeMethods.PxSoftBodyMesh_getSimulationMesh_mut((global::PhysX.PxSoftBodyMesh*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Const accessor to the softbodies simulation state.</summary>
        public static global::PhysX.PxSoftBodyAuxData* GetSoftBodyAuxData(this ref global::PhysX.PxSoftBodyMesh @self_)
        {
            return NativeMethods.PxSoftBodyMesh_getSoftBodyAuxData((global::PhysX.PxSoftBodyMesh*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Accessor to the softbody's auxilary data like mass and rest pose information</summary>
        public static global::PhysX.PxSoftBodyAuxData* GetSoftBodyAuxDataMut(this ref global::PhysX.PxSoftBodyMesh @self_)
        {
            return NativeMethods.PxSoftBodyMesh_getSoftBodyAuxData_mut((global::PhysX.PxSoftBodyMesh*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Decrements the reference count of a tetrahedron mesh and releases it if the new reference count is zero.</summary>
        public static void ReleaseMut(this ref global::PhysX.PxSoftBodyMesh @self_)
        {
            NativeMethods.PxSoftBodyMesh_release_mut((global::PhysX.PxSoftBodyMesh*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxCollisionMeshMappingData(1)

        public static void ReleaseMut(this ref global::PhysX.PxCollisionMeshMappingData @self_)
        {
            NativeMethods.PxCollisionMeshMappingData_release_mut((global::PhysX.PxCollisionMeshMappingData*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxCollisionTetrahedronMeshData(5)

        public static global::PhysX.PxTetrahedronMeshData* GetMesh(this ref global::PhysX.PxCollisionTetrahedronMeshData @self_)
        {
            return NativeMethods.PxCollisionTetrahedronMeshData_getMesh((global::PhysX.PxCollisionTetrahedronMeshData*)Unsafe.AsPointer(ref @self_));
        }

        public static global::PhysX.PxTetrahedronMeshData* GetMeshMut(this ref global::PhysX.PxCollisionTetrahedronMeshData @self_)
        {
            return NativeMethods.PxCollisionTetrahedronMeshData_getMesh_mut((global::PhysX.PxCollisionTetrahedronMeshData*)Unsafe.AsPointer(ref @self_));
        }

        public static global::PhysX.PxSoftBodyCollisionData* GetData(this ref global::PhysX.PxCollisionTetrahedronMeshData @self_)
        {
            return NativeMethods.PxCollisionTetrahedronMeshData_getData((global::PhysX.PxCollisionTetrahedronMeshData*)Unsafe.AsPointer(ref @self_));
        }

        public static global::PhysX.PxSoftBodyCollisionData* GetDataMut(this ref global::PhysX.PxCollisionTetrahedronMeshData @self_)
        {
            return NativeMethods.PxCollisionTetrahedronMeshData_getData_mut((global::PhysX.PxCollisionTetrahedronMeshData*)Unsafe.AsPointer(ref @self_));
        }

        public static void ReleaseMut(this ref global::PhysX.PxCollisionTetrahedronMeshData @self_)
        {
            NativeMethods.PxCollisionTetrahedronMeshData_release_mut((global::PhysX.PxCollisionTetrahedronMeshData*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxSimulationTetrahedronMeshData(3)

        public static global::PhysX.PxTetrahedronMeshData* GetMeshMut(this ref global::PhysX.PxSimulationTetrahedronMeshData @self_)
        {
            return NativeMethods.PxSimulationTetrahedronMeshData_getMesh_mut((global::PhysX.PxSimulationTetrahedronMeshData*)Unsafe.AsPointer(ref @self_));
        }

        public static global::PhysX.PxSoftBodySimulationData* GetDataMut(this ref global::PhysX.PxSimulationTetrahedronMeshData @self_)
        {
            return NativeMethods.PxSimulationTetrahedronMeshData_getData_mut((global::PhysX.PxSimulationTetrahedronMeshData*)Unsafe.AsPointer(ref @self_));
        }

        public static void ReleaseMut(this ref global::PhysX.PxSimulationTetrahedronMeshData @self_)
        {
            NativeMethods.PxSimulationTetrahedronMeshData_release_mut((global::PhysX.PxSimulationTetrahedronMeshData*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxActor(18)

        /// <summary>Deletes the actor.  Do not keep a reference to the deleted instance.  If the actor belongs to a [`PxAggregate`] object, it is automatically removed from the aggregate.</summary>
        public static void ReleaseMut(this ref global::PhysX.PxActor @self_)
        {
            NativeMethods.PxActor_release_mut((global::PhysX.PxActor*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Retrieves the type of actor.  The actor type of the actor.</summary>
        public static global::PhysX.PxActorType GetType(this ref global::PhysX.PxActor @self_)
        {
            return NativeMethods.PxActor_getType((global::PhysX.PxActor*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Retrieves the scene which this actor belongs to.  Owner Scene. NULL if not part of a scene.</summary>
        public static global::PhysX.PxScene* GetScene(this ref global::PhysX.PxActor @self_)
        {
            return NativeMethods.PxActor_getScene((global::PhysX.PxActor*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Sets a name string for the object that can be retrieved with getName().  This is for debugging and is not used by the SDK. The string is not copied by the SDK, only the pointer is stored.  Default: NULL</summary>
        public static void SetNameMut(this ref global::PhysX.PxActor @self_, byte* @name)
        {
            NativeMethods.PxActor_setName_mut((global::PhysX.PxActor*)Unsafe.AsPointer(ref @self_), @name);
        }

        /// <summary>Retrieves the name string set with setName().  Name string associated with object.</summary>
        public static byte* GetName(this ref global::PhysX.PxActor @self_)
        {
            return NativeMethods.PxActor_getName((global::PhysX.PxActor*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Retrieves the axis aligned bounding box enclosing the actor.  It is not allowed to use this method while the simulation is running (except during PxScene::collide(), in PxContactModifyCallback or in contact report callbacks).  The actor's bounding box.</summary>
        public static global::PhysX.PxBounds3 GetWorldBounds(this ref global::PhysX.PxActor @self_, float @inflation)
        {
            return NativeMethods.PxActor_getWorldBounds((global::PhysX.PxActor*)Unsafe.AsPointer(ref @self_), @inflation);
        }

        /// <summary>Raises or clears a particular actor flag.  See the list of flags [`PxActorFlag`]  Sleeping: Does NOT wake the actor up automatically.</summary>
        public static void SetActorFlagMut(this ref global::PhysX.PxActor @self_, global::PhysX.PxActorFlag @flag, bool @value)
        {
            NativeMethods.PxActor_setActorFlag_mut((global::PhysX.PxActor*)Unsafe.AsPointer(ref @self_), @flag, @value);
        }

        /// <summary>Sets the actor flags.  See the list of flags [`PxActorFlag`]</summary>
        public static void SetActorFlagsMut(this ref global::PhysX.PxActor @self_, global::PhysX.PxActorFlags @inFlags)
        {
            NativeMethods.PxActor_setActorFlags_mut((global::PhysX.PxActor*)Unsafe.AsPointer(ref @self_), @inFlags);
        }

        /// <summary>Reads the PxActor flags.  See the list of flags [`PxActorFlag`]  The values of the PxActor flags.</summary>
        public static global::PhysX.PxActorFlags GetActorFlags(this ref global::PhysX.PxActor @self_)
        {
            return NativeMethods.PxActor_getActorFlags((global::PhysX.PxActor*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Assigns dynamic actors a dominance group identifier.  PxDominanceGroup is a 5 bit group identifier (legal range from 0 to 31).  The PxScene::setDominanceGroupPair() lets you set certain behaviors for pairs of dominance groups. By default every dynamic actor is created in group 0.  Default: 0  Sleeping: Changing the dominance group does NOT wake the actor up automatically.</summary>
        public static void SetDominanceGroupMut(this ref global::PhysX.PxActor @self_, byte @dominanceGroup)
        {
            NativeMethods.PxActor_setDominanceGroup_mut((global::PhysX.PxActor*)Unsafe.AsPointer(ref @self_), @dominanceGroup);
        }

        /// <summary>Retrieves the value set with setDominanceGroup().  The dominance group of this actor.</summary>
        public static byte GetDominanceGroup(this ref global::PhysX.PxActor @self_)
        {
            return NativeMethods.PxActor_getDominanceGroup((global::PhysX.PxActor*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Sets the owner client of an actor.  This cannot be done once the actor has been placed into a scene.  Default: PX_DEFAULT_CLIENT</summary>
        public static void SetOwnerClientMut(this ref global::PhysX.PxActor @self_, byte @inClient)
        {
            NativeMethods.PxActor_setOwnerClient_mut((global::PhysX.PxActor*)Unsafe.AsPointer(ref @self_), @inClient);
        }

        /// <summary>Returns the owner client that was specified at creation time.  This value cannot be changed once the object is placed into the scene.</summary>
        public static byte GetOwnerClient(this ref global::PhysX.PxActor @self_)
        {
            return NativeMethods.PxActor_getOwnerClient((global::PhysX.PxActor*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Retrieves the aggregate the actor might be a part of.  The aggregate the actor is a part of, or NULL if the actor does not belong to an aggregate.</summary>
        public static global::PhysX.PxAggregate* GetAggregate(this ref global::PhysX.PxActor @self_)
        {
            return NativeMethods.PxActor_getAggregate((global::PhysX.PxActor*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Retrieves the value set with PxSetGroup()  Collision group is an integer between 0 and 31.  The collision group this actor belongs to</summary>
        public static ushort PhysPxGetGroup(this ref global::PhysX.PxActor @actor)
        {
            return NativeMethods.phys_PxGetGroup((global::PhysX.PxActor*)Unsafe.AsPointer(ref @actor));
        }

        /// <summary>Sets which collision group this actor is part of  Collision group is an integer between 0 and 31.</summary>
        public static void PhysPxSetGroup(this ref global::PhysX.PxActor @actor, ushort @collisionGroup)
        {
            NativeMethods.phys_PxSetGroup((global::PhysX.PxActor*)Unsafe.AsPointer(ref @actor), @collisionGroup);
        }

        /// <summary>Gets 64-bit mask used for collision filtering. See comments for PxGroupsMask  The group mask for the actor.</summary>
        public static global::PhysX.PxGroupsMask PhysPxGetGroupsMask(this ref global::PhysX.PxActor @actor)
        {
            return NativeMethods.phys_PxGetGroupsMask((global::PhysX.PxActor*)Unsafe.AsPointer(ref @actor));
        }

        /// <summary>Sets 64-bit mask used for collision filtering. See comments for PxGroupsMask</summary>
        public static void PhysPxSetGroupsMask(this ref global::PhysX.PxActor @actor, global::PhysX.PxGroupsMask* @mask)
        {
            NativeMethods.phys_PxSetGroupsMask((global::PhysX.PxActor*)Unsafe.AsPointer(ref @actor), @mask);
        }

        #endregion

        #region PhysX.PxAggregate(11)

        /// <summary>Deletes the aggregate object.  Deleting the PxAggregate object does not delete the aggregated actors. If the PxAggregate object belongs to a scene, the aggregated actors are automatically re-inserted in that scene. If you intend to delete both the PxAggregate and its actors, it is best to release the actors first, then release the PxAggregate when it is empty.</summary>
        public static void ReleaseMut(this ref global::PhysX.PxAggregate @self_)
        {
            NativeMethods.PxAggregate_release_mut((global::PhysX.PxAggregate*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Adds an actor to the aggregate object.  A warning is output if the total number of actors is reached, or if the incoming actor already belongs to an aggregate.  If the aggregate belongs to a scene, adding an actor to the aggregate also adds the actor to that scene.  If the actor already belongs to a scene, a warning is output and the call is ignored. You need to remove the actor from the scene first, before adding it to the aggregate.  When a BVH is provided the actor shapes are grouped together. The scene query pruning structure inside PhysX SDK will store/update one bound per actor. The scene queries against such an actor will query actor bounds and then make a local space query against the provided BVH, which is in actor's local space.</summary>
        public static bool AddActorMut(this ref global::PhysX.PxAggregate @self_, global::PhysX.PxActor* @actor, global::PhysX.PxBVH* @bvh)
        {
            return NativeMethods.PxAggregate_addActor_mut((global::PhysX.PxAggregate*)Unsafe.AsPointer(ref @self_), @actor, @bvh);
        }

        /// <summary>Removes an actor from the aggregate object.  A warning is output if the incoming actor does not belong to the aggregate. Otherwise the actor is removed from the aggregate. If the aggregate belongs to a scene, the actor is reinserted in that scene. If you intend to delete the actor, it is best to call [`PxActor::release`]() directly. That way the actor will be automatically removed from its aggregate (if any) and not reinserted in a scene.</summary>
        public static bool RemoveActorMut(this ref global::PhysX.PxAggregate @self_, global::PhysX.PxActor* @actor)
        {
            return NativeMethods.PxAggregate_removeActor_mut((global::PhysX.PxAggregate*)Unsafe.AsPointer(ref @self_), @actor);
        }

        /// <summary>Adds an articulation to the aggregate object.  A warning is output if the total number of actors is reached (every articulation link counts as an actor), or if the incoming articulation already belongs to an aggregate.  If the aggregate belongs to a scene, adding an articulation to the aggregate also adds the articulation to that scene.  If the articulation already belongs to a scene, a warning is output and the call is ignored. You need to remove the articulation from the scene first, before adding it to the aggregate.</summary>
        public static bool AddArticulationMut(this ref global::PhysX.PxAggregate @self_, global::PhysX.PxArticulationReducedCoordinate* @articulation)
        {
            return NativeMethods.PxAggregate_addArticulation_mut((global::PhysX.PxAggregate*)Unsafe.AsPointer(ref @self_), @articulation);
        }

        /// <summary>Removes an articulation from the aggregate object.  A warning is output if the incoming articulation does not belong to the aggregate. Otherwise the articulation is removed from the aggregate. If the aggregate belongs to a scene, the articulation is reinserted in that scene. If you intend to delete the articulation, it is best to call [`PxArticulationReducedCoordinate::release`]() directly. That way the articulation will be automatically removed from its aggregate (if any) and not reinserted in a scene.</summary>
        public static bool RemoveArticulationMut(this ref global::PhysX.PxAggregate @self_, global::PhysX.PxArticulationReducedCoordinate* @articulation)
        {
            return NativeMethods.PxAggregate_removeArticulation_mut((global::PhysX.PxAggregate*)Unsafe.AsPointer(ref @self_), @articulation);
        }

        /// <summary>Returns the number of actors contained in the aggregate.  You can use [`getActors`]() to retrieve the actor pointers.  Number of actors contained in the aggregate.</summary>
        public static uint GetNbActors(this ref global::PhysX.PxAggregate @self_)
        {
            return NativeMethods.PxAggregate_getNbActors((global::PhysX.PxAggregate*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Retrieves max amount of shapes that can be contained in the aggregate.  Max shape size.</summary>
        public static uint GetMaxNbShapes(this ref global::PhysX.PxAggregate @self_)
        {
            return NativeMethods.PxAggregate_getMaxNbShapes((global::PhysX.PxAggregate*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Retrieve all actors contained in the aggregate.  You can retrieve the number of actor pointers by calling [`getNbActors`]()  Number of actor pointers written to the buffer.</summary>
        public static uint GetActors(this ref global::PhysX.PxAggregate @self_, global::PhysX.PxActor** @userBuffer, uint @bufferSize, uint @startIndex)
        {
            return NativeMethods.PxAggregate_getActors((global::PhysX.PxAggregate*)Unsafe.AsPointer(ref @self_), @userBuffer, @bufferSize, @startIndex);
        }

        /// <summary>Retrieves the scene which this aggregate belongs to.  Owner Scene. NULL if not part of a scene.</summary>
        public static global::PhysX.PxScene* GetSceneMut(this ref global::PhysX.PxAggregate @self_)
        {
            return NativeMethods.PxAggregate_getScene_mut((global::PhysX.PxAggregate*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Retrieves aggregate's self-collision flag.  self-collision flag</summary>
        public static bool GetSelfCollision(this ref global::PhysX.PxAggregate @self_)
        {
            return NativeMethods.PxAggregate_getSelfCollision((global::PhysX.PxAggregate*)Unsafe.AsPointer(ref @self_));
        }

        public static byte* GetConcreteTypeName(this ref global::PhysX.PxAggregate @self_)
        {
            return NativeMethods.PxAggregate_getConcreteTypeName((global::PhysX.PxAggregate*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxConstraintVisualizer(6)

        /// <summary>Visualize joint frames</summary>
        public static void VisualizeJointFramesMut(this ref global::PhysX.PxConstraintVisualizer @self_, global::PhysX.PxTransform* @parent, global::PhysX.PxTransform* @child)
        {
            NativeMethods.PxConstraintVisualizer_visualizeJointFrames_mut((global::PhysX.PxConstraintVisualizer*)Unsafe.AsPointer(ref @self_), @parent, @child);
        }

        /// <summary>Visualize joint linear limit</summary>
        public static void VisualizeLinearLimitMut(this ref global::PhysX.PxConstraintVisualizer @self_, global::PhysX.PxTransform* @t0, global::PhysX.PxTransform* @t1, float @value, bool @active)
        {
            NativeMethods.PxConstraintVisualizer_visualizeLinearLimit_mut((global::PhysX.PxConstraintVisualizer*)Unsafe.AsPointer(ref @self_), @t0, @t1, @value, @active);
        }

        /// <summary>Visualize joint angular limit</summary>
        public static void VisualizeAngularLimitMut(this ref global::PhysX.PxConstraintVisualizer @self_, global::PhysX.PxTransform* @t0, float @lower, float @upper, bool @active)
        {
            NativeMethods.PxConstraintVisualizer_visualizeAngularLimit_mut((global::PhysX.PxConstraintVisualizer*)Unsafe.AsPointer(ref @self_), @t0, @lower, @upper, @active);
        }

        /// <summary>Visualize limit cone</summary>
        public static void VisualizeLimitConeMut(this ref global::PhysX.PxConstraintVisualizer @self_, global::PhysX.PxTransform* @t, float @tanQSwingY, float @tanQSwingZ, bool @active)
        {
            NativeMethods.PxConstraintVisualizer_visualizeLimitCone_mut((global::PhysX.PxConstraintVisualizer*)Unsafe.AsPointer(ref @self_), @t, @tanQSwingY, @tanQSwingZ, @active);
        }

        /// <summary>Visualize joint double cone</summary>
        public static void VisualizeDoubleConeMut(this ref global::PhysX.PxConstraintVisualizer @self_, global::PhysX.PxTransform* @t, float @angle, bool @active)
        {
            NativeMethods.PxConstraintVisualizer_visualizeDoubleCone_mut((global::PhysX.PxConstraintVisualizer*)Unsafe.AsPointer(ref @self_), @t, @angle, @active);
        }

        /// <summary>Visualize line</summary>
        public static void VisualizeLineMut(this ref global::PhysX.PxConstraintVisualizer @self_, global::PhysX.PxVec3* @p0, global::PhysX.PxVec3* @p1, uint @color)
        {
            NativeMethods.PxConstraintVisualizer_visualizeLine_mut((global::PhysX.PxConstraintVisualizer*)Unsafe.AsPointer(ref @self_), @p0, @p1, @color);
        }

        #endregion

        #region PhysX.PxConstraintConnector(8)

        /// <summary>Pre-simulation data preparation when the constraint is marked dirty, this function is called at the start of the simulation step for the SDK to copy the constraint data block.</summary>
        public static void* PrepareDataMut(this ref global::PhysX.PxConstraintConnector @self_)
        {
            return NativeMethods.PxConstraintConnector_prepareData_mut((global::PhysX.PxConstraintConnector*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Constraint release callback  When the SDK deletes a PxConstraint object this function is called by the SDK. In general custom constraints should not be deleted directly by applications: rather, the constraint should respond to a release() request by calling PxConstraint::release(), then wait for this call to release its own resources.  This function is also called when a PxConstraint object is deleted on cleanup due to destruction of the PxPhysics object.</summary>
        public static void OnConstraintReleaseMut(this ref global::PhysX.PxConstraintConnector @self_)
        {
            NativeMethods.PxConstraintConnector_onConstraintRelease_mut((global::PhysX.PxConstraintConnector*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Center-of-mass shift callback  This function is called by the SDK when the CoM of one of the actors is moved. Since the API specifies constraint positions relative to actors, and the constraint shader functions are supplied with coordinates relative to bodies, some synchronization is usually required when the application moves an object's center of mass.</summary>
        public static void OnComShiftMut(this ref global::PhysX.PxConstraintConnector @self_, uint @actor)
        {
            NativeMethods.PxConstraintConnector_onComShift_mut((global::PhysX.PxConstraintConnector*)Unsafe.AsPointer(ref @self_), @actor);
        }

        /// <summary>Origin shift callback  This function is called by the SDK when the scene origin gets shifted and allows to adjust custom data which contains world space transforms.  If the adjustments affect constraint shader data, it is necessary to call PxConstraint::markDirty() to make sure that the data gets synced at the beginning of the next simulation step.</summary>
        public static void OnOriginShiftMut(this ref global::PhysX.PxConstraintConnector @self_, global::PhysX.PxVec3* @shift)
        {
            NativeMethods.PxConstraintConnector_onOriginShift_mut((global::PhysX.PxConstraintConnector*)Unsafe.AsPointer(ref @self_), @shift);
        }

        /// <summary>Obtain a reference to a PxBase interface if the constraint has one.  If the constraint does not implement the PxBase interface, it should return NULL.</summary>
        public static global::PhysX.PxBase* GetSerializableMut(this ref global::PhysX.PxConstraintConnector @self_)
        {
            return NativeMethods.PxConstraintConnector_getSerializable_mut((global::PhysX.PxConstraintConnector*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Obtain the pointer to the constraint's constant data</summary>
        public static void* GetConstantBlock(this ref global::PhysX.PxConstraintConnector @self_)
        {
            return NativeMethods.PxConstraintConnector_getConstantBlock((global::PhysX.PxConstraintConnector*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Let the connector know it has been connected to a constraint.</summary>
        public static void ConnectToConstraintMut(this ref global::PhysX.PxConstraintConnector @self_, global::PhysX.PxConstraint* @anon_param0)
        {
            NativeMethods.PxConstraintConnector_connectToConstraint_mut((global::PhysX.PxConstraintConnector*)Unsafe.AsPointer(ref @self_), @anon_param0);
        }

        /// <summary>virtual destructor</summary>
        public static void Delete(this ref global::PhysX.PxConstraintConnector @self_)
        {
            NativeMethods.PxConstraintConnector_delete((global::PhysX.PxConstraintConnector*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxSolverBodyData(1)

        public static float ProjectVelocity(this ref global::PhysX.PxSolverBodyData @self_, global::PhysX.PxVec3* @lin, global::PhysX.PxVec3* @ang)
        {
            return NativeMethods.PxSolverBodyData_projectVelocity((global::PhysX.PxSolverBodyData*)Unsafe.AsPointer(ref @self_), @lin, @ang);
        }

        #endregion

        #region PhysX.PxSolverConstraintPrepDesc(1)

        public static void Delete(this ref global::PhysX.PxSolverConstraintPrepDesc @self_)
        {
            NativeMethods.PxSolverConstraintPrepDesc_delete((global::PhysX.PxSolverConstraintPrepDesc*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxConstraintAllocator(3)

        /// <summary>Allocates constraint data. It is the application's responsibility to release this memory after PxSolveConstraints has completed.  The allocated memory. This address must be 16-byte aligned.</summary>
        public static byte* ReserveConstraintDataMut(this ref global::PhysX.PxConstraintAllocator @self_, uint @byteSize)
        {
            return NativeMethods.PxConstraintAllocator_reserveConstraintData_mut((global::PhysX.PxConstraintAllocator*)Unsafe.AsPointer(ref @self_), @byteSize);
        }

        /// <summary>Allocates friction data. Friction data can be retained by the application for a given pair and provided as an input to PxSolverContactDesc to improve simulation stability. It is the application's responsibility to release this memory. If this memory is released, the application should ensure it does not pass pointers to this memory to PxSolverContactDesc.  The allocated memory. This address must be 4-byte aligned.</summary>
        public static byte* ReserveFrictionDataMut(this ref global::PhysX.PxConstraintAllocator @self_, uint @byteSize)
        {
            return NativeMethods.PxConstraintAllocator_reserveFrictionData_mut((global::PhysX.PxConstraintAllocator*)Unsafe.AsPointer(ref @self_), @byteSize);
        }

        public static void Delete(this ref global::PhysX.PxConstraintAllocator @self_)
        {
            NativeMethods.PxConstraintAllocator_delete((global::PhysX.PxConstraintAllocator*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxTGSSolverBodyVel(1)

        public static float ProjectVelocity(this ref global::PhysX.PxTGSSolverBodyVel @self_, global::PhysX.PxVec3* @lin, global::PhysX.PxVec3* @ang)
        {
            return NativeMethods.PxTGSSolverBodyVel_projectVelocity((global::PhysX.PxTGSSolverBodyVel*)Unsafe.AsPointer(ref @self_), @lin, @ang);
        }

        #endregion

        #region PhysX.PxTGSSolverBodyData(1)

        public static float ProjectVelocity(this ref global::PhysX.PxTGSSolverBodyData @self_, global::PhysX.PxVec3* @linear, global::PhysX.PxVec3* @angular)
        {
            return NativeMethods.PxTGSSolverBodyData_projectVelocity((global::PhysX.PxTGSSolverBodyData*)Unsafe.AsPointer(ref @self_), @linear, @angular);
        }

        #endregion

        #region PhysX.PxTGSSolverConstraintPrepDesc(1)

        public static void Delete(this ref global::PhysX.PxTGSSolverConstraintPrepDesc @self_)
        {
            NativeMethods.PxTGSSolverConstraintPrepDesc_delete((global::PhysX.PxTGSSolverConstraintPrepDesc*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxArticulationAttachment(14)

        /// <summary>Sets the spring rest length for the sub-tendon from the root to this leaf attachment.  Setting this on non-leaf attachments has no effect.</summary>
        public static void SetRestLengthMut(this ref global::PhysX.PxArticulationAttachment @self_, float @restLength)
        {
            NativeMethods.PxArticulationAttachment_setRestLength_mut((global::PhysX.PxArticulationAttachment*)Unsafe.AsPointer(ref @self_), @restLength);
        }

        /// <summary>Gets the spring rest length for the sub-tendon from the root to this leaf attachment.  The rest length.</summary>
        public static float GetRestLength(this ref global::PhysX.PxArticulationAttachment @self_)
        {
            return NativeMethods.PxArticulationAttachment_getRestLength((global::PhysX.PxArticulationAttachment*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Sets the low and high limit on the length of the sub-tendon from the root to this leaf attachment.  Setting this on non-leaf attachments has no effect.</summary>
        public static void SetLimitParametersMut(this ref global::PhysX.PxArticulationAttachment @self_, global::PhysX.PxArticulationTendonLimit* @parameters)
        {
            NativeMethods.PxArticulationAttachment_setLimitParameters_mut((global::PhysX.PxArticulationAttachment*)Unsafe.AsPointer(ref @self_), @parameters);
        }

        /// <summary>Gets the low and high limit on the length of the sub-tendon from the root to this leaf attachment.  Struct with the low and high limit.</summary>
        public static global::PhysX.PxArticulationTendonLimit GetLimitParameters(this ref global::PhysX.PxArticulationAttachment @self_)
        {
            return NativeMethods.PxArticulationAttachment_getLimitParameters((global::PhysX.PxArticulationAttachment*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Sets the attachment's relative offset in the link actor frame.</summary>
        public static void SetRelativeOffsetMut(this ref global::PhysX.PxArticulationAttachment @self_, global::PhysX.PxVec3* @offset)
        {
            NativeMethods.PxArticulationAttachment_setRelativeOffset_mut((global::PhysX.PxArticulationAttachment*)Unsafe.AsPointer(ref @self_), @offset);
        }

        /// <summary>Gets the attachment's relative offset in the link actor frame.  The relative offset in the link actor frame.</summary>
        public static global::PhysX.PxVec3 GetRelativeOffset(this ref global::PhysX.PxArticulationAttachment @self_)
        {
            return NativeMethods.PxArticulationAttachment_getRelativeOffset((global::PhysX.PxArticulationAttachment*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Sets the attachment coefficient.</summary>
        public static void SetCoefficientMut(this ref global::PhysX.PxArticulationAttachment @self_, float @coefficient)
        {
            NativeMethods.PxArticulationAttachment_setCoefficient_mut((global::PhysX.PxArticulationAttachment*)Unsafe.AsPointer(ref @self_), @coefficient);
        }

        /// <summary>Gets the attachment coefficient.  The scale that the distance between this attachment and its parent is multiplied by when summing up the spatial tendon's length.</summary>
        public static float GetCoefficient(this ref global::PhysX.PxArticulationAttachment @self_)
        {
            return NativeMethods.PxArticulationAttachment_getCoefficient((global::PhysX.PxArticulationAttachment*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Gets the articulation link.  The articulation link that this attachment is attached to.</summary>
        public static global::PhysX.PxArticulationLink* GetLink(this ref global::PhysX.PxArticulationAttachment @self_)
        {
            return NativeMethods.PxArticulationAttachment_getLink((global::PhysX.PxArticulationAttachment*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Gets the parent attachment.  The parent attachment.</summary>
        public static global::PhysX.PxArticulationAttachment* GetParent(this ref global::PhysX.PxArticulationAttachment @self_)
        {
            return NativeMethods.PxArticulationAttachment_getParent((global::PhysX.PxArticulationAttachment*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Indicates that this attachment is a leaf, and thus defines a sub-tendon from the root to this attachment.  True: This attachment is a leaf and has zero children; False: Not a leaf.</summary>
        public static bool IsLeaf(this ref global::PhysX.PxArticulationAttachment @self_)
        {
            return NativeMethods.PxArticulationAttachment_isLeaf((global::PhysX.PxArticulationAttachment*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Gets the spatial tendon that the attachment is a part of.  The tendon.</summary>
        public static global::PhysX.PxArticulationSpatialTendon* GetTendon(this ref global::PhysX.PxArticulationAttachment @self_)
        {
            return NativeMethods.PxArticulationAttachment_getTendon((global::PhysX.PxArticulationAttachment*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Releases the attachment.  Releasing the attachment is not allowed while the articulation is in a scene. In order to release the attachment, remove and then re-add the articulation to the scene.</summary>
        public static void ReleaseMut(this ref global::PhysX.PxArticulationAttachment @self_)
        {
            NativeMethods.PxArticulationAttachment_release_mut((global::PhysX.PxArticulationAttachment*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Returns the string name of the dynamic type.  The string name.</summary>
        public static byte* GetConcreteTypeName(this ref global::PhysX.PxArticulationAttachment @self_)
        {
            return NativeMethods.PxArticulationAttachment_getConcreteTypeName((global::PhysX.PxArticulationAttachment*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxArticulationTendonJoint(7)

        /// <summary>Sets the tendon joint coefficient.  RecipCoefficient is commonly expected to be 1/coefficient, but it can be set to different values to tune behavior; for example, zero can be used to have a joint axis only participate in the length computation of the tendon, but not have any tendon force applied to it.</summary>
        public static void SetCoefficientMut(this ref global::PhysX.PxArticulationTendonJoint @self_, global::PhysX.PxArticulationAxis @axis, float @coefficient, float @recipCoefficient)
        {
            NativeMethods.PxArticulationTendonJoint_setCoefficient_mut((global::PhysX.PxArticulationTendonJoint*)Unsafe.AsPointer(ref @self_), @axis, @coefficient, @recipCoefficient);
        }

        /// <summary>Gets the tendon joint coefficient.</summary>
        public static void GetCoefficient(this ref global::PhysX.PxArticulationTendonJoint @self_, global::PhysX.PxArticulationAxis* @axis, float* @coefficient, float* @recipCoefficient)
        {
            NativeMethods.PxArticulationTendonJoint_getCoefficient((global::PhysX.PxArticulationTendonJoint*)Unsafe.AsPointer(ref @self_), @axis, @coefficient, @recipCoefficient);
        }

        /// <summary>Gets the articulation link.  The articulation link (and its incoming joint in particular) that this tendon joint is associated with.</summary>
        public static global::PhysX.PxArticulationLink* GetLink(this ref global::PhysX.PxArticulationTendonJoint @self_)
        {
            return NativeMethods.PxArticulationTendonJoint_getLink((global::PhysX.PxArticulationTendonJoint*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Gets the parent tendon joint.  The parent tendon joint.</summary>
        public static global::PhysX.PxArticulationTendonJoint* GetParent(this ref global::PhysX.PxArticulationTendonJoint @self_)
        {
            return NativeMethods.PxArticulationTendonJoint_getParent((global::PhysX.PxArticulationTendonJoint*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Gets the tendon that the joint is a part of.  The tendon.</summary>
        public static global::PhysX.PxArticulationFixedTendon* GetTendon(this ref global::PhysX.PxArticulationTendonJoint @self_)
        {
            return NativeMethods.PxArticulationTendonJoint_getTendon((global::PhysX.PxArticulationTendonJoint*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Releases a tendon joint.  Releasing a tendon joint is not allowed while the articulation is in a scene. In order to release the joint, remove and then re-add the articulation to the scene.</summary>
        public static void ReleaseMut(this ref global::PhysX.PxArticulationTendonJoint @self_)
        {
            NativeMethods.PxArticulationTendonJoint_release_mut((global::PhysX.PxArticulationTendonJoint*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Returns the string name of the dynamic type.  The string name.</summary>
        public static byte* GetConcreteTypeName(this ref global::PhysX.PxArticulationTendonJoint @self_)
        {
            return NativeMethods.PxArticulationTendonJoint_getConcreteTypeName((global::PhysX.PxArticulationTendonJoint*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxArticulationTendon(10)

        /// <summary>Sets the spring stiffness term acting on the tendon length.</summary>
        public static void SetStiffnessMut(this ref global::PhysX.PxArticulationTendon @self_, float @stiffness)
        {
            NativeMethods.PxArticulationTendon_setStiffness_mut((global::PhysX.PxArticulationTendon*)Unsafe.AsPointer(ref @self_), @stiffness);
        }

        /// <summary>Gets the spring stiffness of the tendon.  The spring stiffness.</summary>
        public static float GetStiffness(this ref global::PhysX.PxArticulationTendon @self_)
        {
            return NativeMethods.PxArticulationTendon_getStiffness((global::PhysX.PxArticulationTendon*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Sets the damping term acting both on the tendon length and tendon-length limits.</summary>
        public static void SetDampingMut(this ref global::PhysX.PxArticulationTendon @self_, float @damping)
        {
            NativeMethods.PxArticulationTendon_setDamping_mut((global::PhysX.PxArticulationTendon*)Unsafe.AsPointer(ref @self_), @damping);
        }

        /// <summary>Gets the damping term acting both on the tendon length and tendon-length limits.  The damping term.</summary>
        public static float GetDamping(this ref global::PhysX.PxArticulationTendon @self_)
        {
            return NativeMethods.PxArticulationTendon_getDamping((global::PhysX.PxArticulationTendon*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Sets the limit stiffness term acting on the tendon's length limits.  For spatial tendons, this parameter applies to all its leaf attachments / sub-tendons.</summary>
        public static void SetLimitStiffnessMut(this ref global::PhysX.PxArticulationTendon @self_, float @stiffness)
        {
            NativeMethods.PxArticulationTendon_setLimitStiffness_mut((global::PhysX.PxArticulationTendon*)Unsafe.AsPointer(ref @self_), @stiffness);
        }

        /// <summary>Gets the limit stiffness term acting on the tendon's length limits.  For spatial tendons, this parameter applies to all its leaf attachments / sub-tendons.  The limit stiffness term.</summary>
        public static float GetLimitStiffness(this ref global::PhysX.PxArticulationTendon @self_)
        {
            return NativeMethods.PxArticulationTendon_getLimitStiffness((global::PhysX.PxArticulationTendon*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Sets the length offset term for the tendon.  An offset defines an amount to be added to the accumulated length computed for the tendon. It allows the application to actuate the tendon by shortening or lengthening it.</summary>
        public static void SetOffsetMut(this ref global::PhysX.PxArticulationTendon @self_, float @offset, bool @autowake)
        {
            NativeMethods.PxArticulationTendon_setOffset_mut((global::PhysX.PxArticulationTendon*)Unsafe.AsPointer(ref @self_), @offset, @autowake);
        }

        /// <summary>Gets the length offset term for the tendon.  The offset term.</summary>
        public static float GetOffset(this ref global::PhysX.PxArticulationTendon @self_)
        {
            return NativeMethods.PxArticulationTendon_getOffset((global::PhysX.PxArticulationTendon*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Gets the articulation that the tendon is a part of.  The articulation.</summary>
        public static global::PhysX.PxArticulationReducedCoordinate* GetArticulation(this ref global::PhysX.PxArticulationTendon @self_)
        {
            return NativeMethods.PxArticulationTendon_getArticulation((global::PhysX.PxArticulationTendon*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Releases a tendon to remove it from the articulation and free its associated memory.  When an articulation is released, its attached tendons are automatically released.  Releasing a tendon is not allowed while the articulation is in a scene. In order to release the tendon, remove and then re-add the articulation to the scene.</summary>
        public static void ReleaseMut(this ref global::PhysX.PxArticulationTendon @self_)
        {
            NativeMethods.PxArticulationTendon_release_mut((global::PhysX.PxArticulationTendon*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxArticulationSpatialTendon(4)

        /// <summary>Creates an articulation attachment and adds it to the list of children in the parent attachment.  Creating an attachment is not allowed while the articulation is in a scene. In order to add the attachment, remove and then re-add the articulation to the scene.  The newly-created attachment if creation was successful, otherwise a null pointer.</summary>
        public static global::PhysX.PxArticulationAttachment* CreateAttachmentMut(this ref global::PhysX.PxArticulationSpatialTendon @self_, global::PhysX.PxArticulationAttachment* @parent, float @coefficient, global::PhysX.PxVec3 @relativeOffset, global::PhysX.PxArticulationLink* @link)
        {
            return NativeMethods.PxArticulationSpatialTendon_createAttachment_mut((global::PhysX.PxArticulationSpatialTendon*)Unsafe.AsPointer(ref @self_), @parent, @coefficient, @relativeOffset, @link);
        }

        /// <summary>Fills a user-provided buffer of attachment pointers with the set of attachments.  The number of attachments that were filled into the user buffer.</summary>
        public static uint GetAttachments(this ref global::PhysX.PxArticulationSpatialTendon @self_, global::PhysX.PxArticulationAttachment** @userBuffer, uint @bufferSize, uint @startIndex)
        {
            return NativeMethods.PxArticulationSpatialTendon_getAttachments((global::PhysX.PxArticulationSpatialTendon*)Unsafe.AsPointer(ref @self_), @userBuffer, @bufferSize, @startIndex);
        }

        /// <summary>Returns the number of attachments in the tendon.  The number of attachments.</summary>
        public static uint GetNbAttachments(this ref global::PhysX.PxArticulationSpatialTendon @self_)
        {
            return NativeMethods.PxArticulationSpatialTendon_getNbAttachments((global::PhysX.PxArticulationSpatialTendon*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Returns the string name of the dynamic type.  The string name.</summary>
        public static byte* GetConcreteTypeName(this ref global::PhysX.PxArticulationSpatialTendon @self_)
        {
            return NativeMethods.PxArticulationSpatialTendon_getConcreteTypeName((global::PhysX.PxArticulationSpatialTendon*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxArticulationFixedTendon(8)

        /// <summary>Creates an articulation tendon joint and adds it to the list of children in the parent tendon joint.  Creating a tendon joint is not allowed while the articulation is in a scene. In order to add the joint, remove and then re-add the articulation to the scene.  The newly-created tendon joint if creation was successful, otherwise a null pointer.  - The axis motion must not be configured as PxArticulationMotion::eLOCKED. - The axis cannot be part of a fixed joint, i.e. joint configured as PxArticulationJointType::eFIX.</summary>
        public static global::PhysX.PxArticulationTendonJoint* CreateTendonJointMut(this ref global::PhysX.PxArticulationFixedTendon @self_, global::PhysX.PxArticulationTendonJoint* @parent, global::PhysX.PxArticulationAxis @axis, float @coefficient, float @recipCoefficient, global::PhysX.PxArticulationLink* @link)
        {
            return NativeMethods.PxArticulationFixedTendon_createTendonJoint_mut((global::PhysX.PxArticulationFixedTendon*)Unsafe.AsPointer(ref @self_), @parent, @axis, @coefficient, @recipCoefficient, @link);
        }

        /// <summary>Fills a user-provided buffer of tendon-joint pointers with the set of tendon joints.  The number of tendon joints filled into the user buffer.</summary>
        public static uint GetTendonJoints(this ref global::PhysX.PxArticulationFixedTendon @self_, global::PhysX.PxArticulationTendonJoint** @userBuffer, uint @bufferSize, uint @startIndex)
        {
            return NativeMethods.PxArticulationFixedTendon_getTendonJoints((global::PhysX.PxArticulationFixedTendon*)Unsafe.AsPointer(ref @self_), @userBuffer, @bufferSize, @startIndex);
        }

        /// <summary>Returns the number of tendon joints in the tendon.  The number of tendon joints.</summary>
        public static uint GetNbTendonJoints(this ref global::PhysX.PxArticulationFixedTendon @self_)
        {
            return NativeMethods.PxArticulationFixedTendon_getNbTendonJoints((global::PhysX.PxArticulationFixedTendon*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Sets the spring rest length of the tendon.  The accumulated \"length\" of a fixed tendon is a linear combination of the joint axis positions that the tendon is associated with, scaled by the respective tendon joints' coefficients. As such, when the joint positions of all joints are zero, the accumulated length of a fixed tendon is zero.  The spring of the tendon is not exerting any force on the articulation when the rest length is equal to the tendon's accumulated length plus the tendon offset.</summary>
        public static void SetRestLengthMut(this ref global::PhysX.PxArticulationFixedTendon @self_, float @restLength)
        {
            NativeMethods.PxArticulationFixedTendon_setRestLength_mut((global::PhysX.PxArticulationFixedTendon*)Unsafe.AsPointer(ref @self_), @restLength);
        }

        /// <summary>Gets the spring rest length of the tendon.  The spring rest length of the tendon.</summary>
        public static float GetRestLength(this ref global::PhysX.PxArticulationFixedTendon @self_)
        {
            return NativeMethods.PxArticulationFixedTendon_getRestLength((global::PhysX.PxArticulationFixedTendon*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Sets the low and high limit on the length of the tendon.  The limits, together with the damping and limit stiffness parameters, act on the accumulated length of the tendon.</summary>
        public static void SetLimitParametersMut(this ref global::PhysX.PxArticulationFixedTendon @self_, global::PhysX.PxArticulationTendonLimit* @parameter)
        {
            NativeMethods.PxArticulationFixedTendon_setLimitParameters_mut((global::PhysX.PxArticulationFixedTendon*)Unsafe.AsPointer(ref @self_), @parameter);
        }

        /// <summary>Gets the low and high limit on the length of the tendon.  Struct with the low and high limit.</summary>
        public static global::PhysX.PxArticulationTendonLimit GetLimitParameters(this ref global::PhysX.PxArticulationFixedTendon @self_)
        {
            return NativeMethods.PxArticulationFixedTendon_getLimitParameters((global::PhysX.PxArticulationFixedTendon*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Returns the string name of the dynamic type.  The string name.</summary>
        public static byte* GetConcreteTypeName(this ref global::PhysX.PxArticulationFixedTendon @self_)
        {
            return NativeMethods.PxArticulationFixedTendon_getConcreteTypeName((global::PhysX.PxArticulationFixedTendon*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxArticulationCache(1)

        /// <summary>Releases an articulation cache.</summary>
        public static void ReleaseMut(this ref global::PhysX.PxArticulationCache @self_)
        {
            NativeMethods.PxArticulationCache_release_mut((global::PhysX.PxArticulationCache*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxArticulationSensor(10)

        /// <summary>Releases the sensor.  Releasing a sensor is not allowed while the articulation is in a scene. In order to release a sensor, remove and then re-add the articulation to the scene.</summary>
        public static void ReleaseMut(this ref global::PhysX.PxArticulationSensor @self_)
        {
            NativeMethods.PxArticulationSensor_release_mut((global::PhysX.PxArticulationSensor*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Returns the spatial force in the local frame of the sensor.  The spatial force.  This call is not allowed while the simulation is running except in a split simulation during [`PxScene::collide`]() and up to #PxScene::advance(), and in PxContactModifyCallback or in contact report callbacks.</summary>
        public static global::PhysX.PxSpatialForce GetForces(this ref global::PhysX.PxArticulationSensor @self_)
        {
            return NativeMethods.PxArticulationSensor_getForces((global::PhysX.PxArticulationSensor*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Returns the relative pose between this sensor and the body frame of the link that the sensor is attached to.  The link body frame is at the center of mass and aligned with the principal axes of inertia, see PxRigidBody::getCMassLocalPose.  The transform link body frame -&gt; sensor frame.</summary>
        public static global::PhysX.PxTransform GetRelativePose(this ref global::PhysX.PxArticulationSensor @self_)
        {
            return NativeMethods.PxArticulationSensor_getRelativePose((global::PhysX.PxArticulationSensor*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Sets the relative pose between this sensor and the body frame of the link that the sensor is attached to.  The link body frame is at the center of mass and aligned with the principal axes of inertia, see PxRigidBody::getCMassLocalPose.  Setting the sensor relative pose is not allowed while the articulation is in a scene. In order to set the pose, remove and then re-add the articulation to the scene.</summary>
        public static void SetRelativePoseMut(this ref global::PhysX.PxArticulationSensor @self_, global::PhysX.PxTransform* @pose)
        {
            NativeMethods.PxArticulationSensor_setRelativePose_mut((global::PhysX.PxArticulationSensor*)Unsafe.AsPointer(ref @self_), @pose);
        }

        /// <summary>Returns the link that this sensor is attached to.  A pointer to the link.</summary>
        public static global::PhysX.PxArticulationLink* GetLink(this ref global::PhysX.PxArticulationSensor @self_)
        {
            return NativeMethods.PxArticulationSensor_getLink((global::PhysX.PxArticulationSensor*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Returns the index of this sensor inside the articulation.  The return value is only valid for sensors attached to articulations that are in a scene.  The low-level index, or 0xFFFFFFFF if the articulation is not in a scene.</summary>
        public static uint GetIndex(this ref global::PhysX.PxArticulationSensor @self_)
        {
            return NativeMethods.PxArticulationSensor_getIndex((global::PhysX.PxArticulationSensor*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Returns the articulation that this sensor is part of.  A pointer to the articulation.</summary>
        public static global::PhysX.PxArticulationReducedCoordinate* GetArticulation(this ref global::PhysX.PxArticulationSensor @self_)
        {
            return NativeMethods.PxArticulationSensor_getArticulation((global::PhysX.PxArticulationSensor*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Returns the sensor's flags.  The current set of flags of the sensor.</summary>
        public static global::PhysX.PxArticulationSensorFlags GetFlags(this ref global::PhysX.PxArticulationSensor @self_)
        {
            return NativeMethods.PxArticulationSensor_getFlags((global::PhysX.PxArticulationSensor*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Sets a flag of the sensor.  Setting the sensor flags is not allowed while the articulation is in a scene. In order to set the flags, remove and then re-add the articulation to the scene.</summary>
        public static void SetFlagMut(this ref global::PhysX.PxArticulationSensor @self_, global::PhysX.PxArticulationSensorFlag @flag, bool @enabled)
        {
            NativeMethods.PxArticulationSensor_setFlag_mut((global::PhysX.PxArticulationSensor*)Unsafe.AsPointer(ref @self_), @flag, @enabled);
        }

        /// <summary>Returns the string name of the dynamic type.  The string name.</summary>
        public static byte* GetConcreteTypeName(this ref global::PhysX.PxArticulationSensor @self_)
        {
            return NativeMethods.PxArticulationSensor_getConcreteTypeName((global::PhysX.PxArticulationSensor*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxArticulationReducedCoordinate(69)

        /// <summary>Returns the scene which this articulation belongs to.  Owner Scene. NULL if not part of a scene.</summary>
        public static global::PhysX.PxScene* GetScene(this ref global::PhysX.PxArticulationReducedCoordinate @self_)
        {
            return NativeMethods.PxArticulationReducedCoordinate_getScene((global::PhysX.PxArticulationReducedCoordinate*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Sets the solver iteration counts for the articulation.  The solver iteration count determines how accurately contacts, drives, and limits are resolved. Setting a higher position iteration count may therefore help in scenarios where the articulation is subject to many constraints; for example, a manipulator articulation with drives and joint limits that is grasping objects, or several such articulations interacting through contacts. Other situations where higher position iterations may improve simulation fidelity are: large mass ratios within the articulation or between the articulation and an object in contact with it; or strong drives in the articulation being used to manipulate a light object.  If intersecting bodies are being depenetrated too violently, increase the number of velocity iterations. More velocity iterations will drive the relative exit velocity of the intersecting objects closer to the correct value given the restitution.  This call may not be made during simulation.</summary>
        public static void SetSolverIterationCountsMut(this ref global::PhysX.PxArticulationReducedCoordinate @self_, uint @minPositionIters, uint @minVelocityIters)
        {
            NativeMethods.PxArticulationReducedCoordinate_setSolverIterationCounts_mut((global::PhysX.PxArticulationReducedCoordinate*)Unsafe.AsPointer(ref @self_), @minPositionIters, @minVelocityIters);
        }

        /// <summary>Returns the solver iteration counts.</summary>
        public static void GetSolverIterationCounts(this ref global::PhysX.PxArticulationReducedCoordinate @self_, uint* @minPositionIters, uint* @minVelocityIters)
        {
            NativeMethods.PxArticulationReducedCoordinate_getSolverIterationCounts((global::PhysX.PxArticulationReducedCoordinate*)Unsafe.AsPointer(ref @self_), @minPositionIters, @minVelocityIters);
        }

        /// <summary>Returns true if this articulation is sleeping.  When an actor does not move for a period of time, it is no longer simulated in order to save time. This state is called sleeping. However, because the object automatically wakes up when it is either touched by an awake object, or a sleep-affecting property is changed by the user, the entire sleep mechanism should be transparent to the user.  An articulation can only go to sleep if all links are ready for sleeping. An articulation is guaranteed to be awake if at least one of the following holds:  The wake counter is positive (see [`setWakeCounter`]()).  The linear or angular velocity of any link is non-zero.  A non-zero force or torque has been applied to the articulation or any of its links.  If an articulation is sleeping, the following state is guaranteed:  The wake counter is zero.  The linear and angular velocity of all links is zero.  There is no force update pending.  When an articulation gets inserted into a scene, it will be considered asleep if all the points above hold, else it will be treated as awake.  If an articulation is asleep after the call to [`PxScene::fetchResults`]() returns, it is guaranteed that the poses of the links were not changed. You can use this information to avoid updating the transforms of associated objects.  True if the articulation is sleeping.  This call may only be made on articulations that are in a scene, and may not be made during simulation, except in a split simulation in-between [`PxScene::fetchCollision`] and #PxScene::advance.</summary>
        public static bool IsSleeping(this ref global::PhysX.PxArticulationReducedCoordinate @self_)
        {
            return NativeMethods.PxArticulationReducedCoordinate_isSleeping((global::PhysX.PxArticulationReducedCoordinate*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Sets the mass-normalized energy threshold below which the articulation may go to sleep.  The articulation will sleep if the energy of each link is below this threshold.  This call may not be made during simulation.</summary>
        public static void SetSleepThresholdMut(this ref global::PhysX.PxArticulationReducedCoordinate @self_, float @threshold)
        {
            NativeMethods.PxArticulationReducedCoordinate_setSleepThreshold_mut((global::PhysX.PxArticulationReducedCoordinate*)Unsafe.AsPointer(ref @self_), @threshold);
        }

        /// <summary>Returns the mass-normalized energy below which the articulation may go to sleep.  The energy threshold for sleeping.</summary>
        public static float GetSleepThreshold(this ref global::PhysX.PxArticulationReducedCoordinate @self_)
        {
            return NativeMethods.PxArticulationReducedCoordinate_getSleepThreshold((global::PhysX.PxArticulationReducedCoordinate*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Sets the mass-normalized kinetic energy threshold below which the articulation may participate in stabilization.  Articulations whose kinetic energy divided by their mass is above this threshold will not participate in stabilization.  This value has no effect if PxSceneFlag::eENABLE_STABILIZATION was not enabled on the PxSceneDesc.  Default: 0.01 * PxTolerancesScale::speed * PxTolerancesScale::speed  This call may not be made during simulation.</summary>
        public static void SetStabilizationThresholdMut(this ref global::PhysX.PxArticulationReducedCoordinate @self_, float @threshold)
        {
            NativeMethods.PxArticulationReducedCoordinate_setStabilizationThreshold_mut((global::PhysX.PxArticulationReducedCoordinate*)Unsafe.AsPointer(ref @self_), @threshold);
        }

        /// <summary>Returns the mass-normalized kinetic energy below which the articulation may participate in stabilization.  Articulations whose kinetic energy divided by their mass is above this threshold will not participate in stabilization.  The energy threshold for participating in stabilization.</summary>
        public static float GetStabilizationThreshold(this ref global::PhysX.PxArticulationReducedCoordinate @self_)
        {
            return NativeMethods.PxArticulationReducedCoordinate_getStabilizationThreshold((global::PhysX.PxArticulationReducedCoordinate*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Sets the wake counter for the articulation in seconds.  - The wake counter value determines the minimum amount of time until the articulation can be put to sleep. - An articulation will not be put to sleep if the energy is above the specified threshold (see [`setSleepThreshold`]()) or if other awake objects are touching it. - Passing in a positive value will wake up the articulation automatically.  Default: 0.4s (which corresponds to 20 frames for a time step of 0.02s)  This call may not be made during simulation, except in a split simulation in-between [`PxScene::fetchCollision`] and #PxScene::advance.</summary>
        public static void SetWakeCounterMut(this ref global::PhysX.PxArticulationReducedCoordinate @self_, float @wakeCounterValue)
        {
            NativeMethods.PxArticulationReducedCoordinate_setWakeCounter_mut((global::PhysX.PxArticulationReducedCoordinate*)Unsafe.AsPointer(ref @self_), @wakeCounterValue);
        }

        /// <summary>Returns the wake counter of the articulation in seconds.  The wake counter of the articulation in seconds.  This call may not be made during simulation, except in a split simulation in-between [`PxScene::fetchCollision`] and #PxScene::advance.</summary>
        public static float GetWakeCounter(this ref global::PhysX.PxArticulationReducedCoordinate @self_)
        {
            return NativeMethods.PxArticulationReducedCoordinate_getWakeCounter((global::PhysX.PxArticulationReducedCoordinate*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Wakes up the articulation if it is sleeping.  - The articulation will get woken up and might cause other touching objects to wake up as well during the next simulation step. - This will set the wake counter of the articulation to the value specified in [`PxSceneDesc::wakeCounterResetValue`].  This call may only be made on articulations that are in a scene, and may not be made during simulation, except in a split simulation in-between [`PxScene::fetchCollision`] and #PxScene::advance.</summary>
        public static void WakeUpMut(this ref global::PhysX.PxArticulationReducedCoordinate @self_)
        {
            NativeMethods.PxArticulationReducedCoordinate_wakeUp_mut((global::PhysX.PxArticulationReducedCoordinate*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Forces the articulation to sleep.  - The articulation will stay asleep during the next simulation step if not touched by another non-sleeping actor. - This will set any applied force, the velocity, and the wake counter of all bodies in the articulation to zero.  This call may not be made during simulation, and may only be made on articulations that are in a scene.</summary>
        public static void PutToSleepMut(this ref global::PhysX.PxArticulationReducedCoordinate @self_)
        {
            NativeMethods.PxArticulationReducedCoordinate_putToSleep_mut((global::PhysX.PxArticulationReducedCoordinate*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Sets the limit on the magnitude of the linear velocity of the articulation's center of mass.  - The limit acts on the linear velocity of the entire articulation. The velocity is calculated from the total momentum and the spatial inertia of the articulation. - The limit only applies to floating-base articulations. - A benefit of the COM velocity limit is that it is evenly applied to the whole articulation, which results in fewer visual artifacts compared to link rigid-body damping or joint-velocity limits. However, these per-link or per-degree-of-freedom limits may still help avoid numerical issues.  This call may not be made during simulation.</summary>
        public static void SetMaxCOMLinearVelocityMut(this ref global::PhysX.PxArticulationReducedCoordinate @self_, float @maxLinearVelocity)
        {
            NativeMethods.PxArticulationReducedCoordinate_setMaxCOMLinearVelocity_mut((global::PhysX.PxArticulationReducedCoordinate*)Unsafe.AsPointer(ref @self_), @maxLinearVelocity);
        }

        /// <summary>Gets the limit on the magnitude of the linear velocity of the articulation's center of mass.  The maximal linear velocity magnitude.</summary>
        public static float GetMaxCOMLinearVelocity(this ref global::PhysX.PxArticulationReducedCoordinate @self_)
        {
            return NativeMethods.PxArticulationReducedCoordinate_getMaxCOMLinearVelocity((global::PhysX.PxArticulationReducedCoordinate*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Sets the limit on the magnitude of the angular velocity at the articulation's center of mass.  - The limit acts on the angular velocity of the entire articulation. The velocity is calculated from the total momentum and the spatial inertia of the articulation. - The limit only applies to floating-base articulations. - A benefit of the COM velocity limit is that it is evenly applied to the whole articulation, which results in fewer visual artifacts compared to link rigid-body damping or joint-velocity limits. However, these per-link or per-degree-of-freedom limits may still help avoid numerical issues.  This call may not be made during simulation.</summary>
        public static void SetMaxCOMAngularVelocityMut(this ref global::PhysX.PxArticulationReducedCoordinate @self_, float @maxAngularVelocity)
        {
            NativeMethods.PxArticulationReducedCoordinate_setMaxCOMAngularVelocity_mut((global::PhysX.PxArticulationReducedCoordinate*)Unsafe.AsPointer(ref @self_), @maxAngularVelocity);
        }

        /// <summary>Gets the limit on the magnitude of the angular velocity at the articulation's center of mass.  The maximal angular velocity magnitude.</summary>
        public static float GetMaxCOMAngularVelocity(this ref global::PhysX.PxArticulationReducedCoordinate @self_)
        {
            return NativeMethods.PxArticulationReducedCoordinate_getMaxCOMAngularVelocity((global::PhysX.PxArticulationReducedCoordinate*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Adds a link to the articulation with default attribute values.  The new link, or NULL if the link cannot be created.  Creating a link is not allowed while the articulation is in a scene. In order to add a link, remove and then re-add the articulation to the scene.</summary>
        public static global::PhysX.PxArticulationLink* CreateLinkMut(this ref global::PhysX.PxArticulationReducedCoordinate @self_, global::PhysX.PxArticulationLink* @parent, global::PhysX.PxTransform* @pose)
        {
            return NativeMethods.PxArticulationReducedCoordinate_createLink_mut((global::PhysX.PxArticulationReducedCoordinate*)Unsafe.AsPointer(ref @self_), @parent, @pose);
        }

        /// <summary>Releases the articulation, and all its links and corresponding joints.  Attached sensors and tendons are released automatically when the articulation is released.  This call may not be made during simulation.</summary>
        public static void ReleaseMut(this ref global::PhysX.PxArticulationReducedCoordinate @self_)
        {
            NativeMethods.PxArticulationReducedCoordinate_release_mut((global::PhysX.PxArticulationReducedCoordinate*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Returns the number of links in the articulation.  The number of links.</summary>
        public static uint GetNbLinks(this ref global::PhysX.PxArticulationReducedCoordinate @self_)
        {
            return NativeMethods.PxArticulationReducedCoordinate_getNbLinks((global::PhysX.PxArticulationReducedCoordinate*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Returns the set of links in the articulation in the order that they were added to the articulation using createLink.  The number of links written into the buffer.</summary>
        public static uint GetLinks(this ref global::PhysX.PxArticulationReducedCoordinate @self_, global::PhysX.PxArticulationLink** @userBuffer, uint @bufferSize, uint @startIndex)
        {
            return NativeMethods.PxArticulationReducedCoordinate_getLinks((global::PhysX.PxArticulationReducedCoordinate*)Unsafe.AsPointer(ref @self_), @userBuffer, @bufferSize, @startIndex);
        }

        /// <summary>Returns the number of shapes in the articulation.  The number of shapes.</summary>
        public static uint GetNbShapes(this ref global::PhysX.PxArticulationReducedCoordinate @self_)
        {
            return NativeMethods.PxArticulationReducedCoordinate_getNbShapes((global::PhysX.PxArticulationReducedCoordinate*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Sets a name string for the articulation that can be retrieved with getName().  This is for debugging and is not used by the SDK. The string is not copied by the SDK, only the pointer is stored.</summary>
        public static void SetNameMut(this ref global::PhysX.PxArticulationReducedCoordinate @self_, byte* @name)
        {
            NativeMethods.PxArticulationReducedCoordinate_setName_mut((global::PhysX.PxArticulationReducedCoordinate*)Unsafe.AsPointer(ref @self_), @name);
        }

        /// <summary>Returns the name string set with setName().  Name string associated with the articulation.</summary>
        public static byte* GetName(this ref global::PhysX.PxArticulationReducedCoordinate @self_)
        {
            return NativeMethods.PxArticulationReducedCoordinate_getName((global::PhysX.PxArticulationReducedCoordinate*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Returns the axis-aligned bounding box enclosing the articulation.  The articulation's bounding box.  It is not allowed to use this method while the simulation is running, except in a split simulation during [`PxScene::collide`]() and up to #PxScene::advance(), and in PxContactModifyCallback or in contact report callbacks.</summary>
        public static global::PhysX.PxBounds3 GetWorldBounds(this ref global::PhysX.PxArticulationReducedCoordinate @self_, float @inflation)
        {
            return NativeMethods.PxArticulationReducedCoordinate_getWorldBounds((global::PhysX.PxArticulationReducedCoordinate*)Unsafe.AsPointer(ref @self_), @inflation);
        }

        /// <summary>Returns the aggregate the articulation might be a part of.  The aggregate the articulation is a part of, or NULL if the articulation does not belong to an aggregate.</summary>
        public static global::PhysX.PxAggregate* GetAggregate(this ref global::PhysX.PxArticulationReducedCoordinate @self_)
        {
            return NativeMethods.PxArticulationReducedCoordinate_getAggregate((global::PhysX.PxArticulationReducedCoordinate*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Sets flags on the articulation.  This call may not be made during simulation.</summary>
        public static void SetArticulationFlagsMut(this ref global::PhysX.PxArticulationReducedCoordinate @self_, global::PhysX.PxArticulationFlags @flags)
        {
            NativeMethods.PxArticulationReducedCoordinate_setArticulationFlags_mut((global::PhysX.PxArticulationReducedCoordinate*)Unsafe.AsPointer(ref @self_), @flags);
        }

        /// <summary>Raises or clears a flag on the articulation.  This call may not be made during simulation.</summary>
        public static void SetArticulationFlagMut(this ref global::PhysX.PxArticulationReducedCoordinate @self_, global::PhysX.PxArticulationFlag @flag, bool @value)
        {
            NativeMethods.PxArticulationReducedCoordinate_setArticulationFlag_mut((global::PhysX.PxArticulationReducedCoordinate*)Unsafe.AsPointer(ref @self_), @flag, @value);
        }

        /// <summary>Returns the articulation's flags.  The flags.</summary>
        public static global::PhysX.PxArticulationFlags GetArticulationFlags(this ref global::PhysX.PxArticulationReducedCoordinate @self_)
        {
            return NativeMethods.PxArticulationReducedCoordinate_getArticulationFlags((global::PhysX.PxArticulationReducedCoordinate*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Returns the total number of joint degrees-of-freedom (DOFs) of the articulation.  - The six DOFs of the base of a floating-base articulation are not included in this count. - Example: Both a fixed-base and a floating-base double-pendulum with two revolute joints will have getDofs() == 2. - The return value is only valid for articulations that are in a scene.  The number of joint DOFs, or 0xFFFFFFFF if the articulation is not in a scene.</summary>
        public static uint GetDofs(this ref global::PhysX.PxArticulationReducedCoordinate @self_)
        {
            return NativeMethods.PxArticulationReducedCoordinate_getDofs((global::PhysX.PxArticulationReducedCoordinate*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Creates an articulation cache that can be used to read and write internal articulation data.  - When the structure of the articulation changes (e.g. adding a link or sensor) after the cache was created, the cache needs to be released and recreated. - Free the memory allocated for the cache by calling the release() method on the cache. - Caches can only be created by articulations that are in a scene.  The cache, or NULL if the articulation is not in a scene.</summary>
        public static global::PhysX.PxArticulationCache* CreateCache(this ref global::PhysX.PxArticulationReducedCoordinate @self_)
        {
            return NativeMethods.PxArticulationReducedCoordinate_createCache((global::PhysX.PxArticulationReducedCoordinate*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Returns the size of the articulation cache in bytes.  - The size does not include: the user-allocated memory for the coefficient matrix or lambda values; the scratch-related memory/members; and the cache version. See comment in [`PxArticulationCache`]. - The return value is only valid for articulations that are in a scene.  The byte size of the cache, or 0xFFFFFFFF if the articulation is not in a scene.</summary>
        public static uint GetCacheDataSize(this ref global::PhysX.PxArticulationReducedCoordinate @self_)
        {
            return NativeMethods.PxArticulationReducedCoordinate_getCacheDataSize((global::PhysX.PxArticulationReducedCoordinate*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Zeroes all data in the articulation cache, except user-provided and scratch memory, and cache version.  This call may only be made on articulations that are in a scene.</summary>
        public static void ZeroCache(this ref global::PhysX.PxArticulationReducedCoordinate @self_, global::PhysX.PxArticulationCache* @cache)
        {
            NativeMethods.PxArticulationReducedCoordinate_zeroCache((global::PhysX.PxArticulationReducedCoordinate*)Unsafe.AsPointer(ref @self_), @cache);
        }

        /// <summary>Applies the data in the cache to the articulation.  This call wakes the articulation if it is sleeping, and the autowake parameter is true (default) or: - a nonzero joint velocity is applied or - a nonzero joint force is applied or - a nonzero root velocity is applied  This call may only be made on articulations that are in a scene, and may not be made during simulation.</summary>
        public static void ApplyCacheMut(this ref global::PhysX.PxArticulationReducedCoordinate @self_, global::PhysX.PxArticulationCache* @cache, global::PhysX.PxArticulationCacheFlags @flags, bool @autowake)
        {
            NativeMethods.PxArticulationReducedCoordinate_applyCache_mut((global::PhysX.PxArticulationReducedCoordinate*)Unsafe.AsPointer(ref @self_), @cache, @flags, @autowake);
        }

        /// <summary>Copies internal data of the articulation to the cache.  This call may only be made on articulations that are in a scene, and may not be made during simulation.</summary>
        public static void CopyInternalStateToCache(this ref global::PhysX.PxArticulationReducedCoordinate @self_, global::PhysX.PxArticulationCache* @cache, global::PhysX.PxArticulationCacheFlags @flags)
        {
            NativeMethods.PxArticulationReducedCoordinate_copyInternalStateToCache((global::PhysX.PxArticulationReducedCoordinate*)Unsafe.AsPointer(ref @self_), @cache, @flags);
        }

        /// <summary>Converts maximal-coordinate joint DOF data to reduced coordinates.  - Indexing into the maximal joint DOF data is via the link's low-level index minus 1 (the root link is not included). - The reduced-coordinate data follows the cache indexing convention, see PxArticulationCache::jointVelocity.  The articulation must be in a scene.</summary>
        public static void PackJointData(this ref global::PhysX.PxArticulationReducedCoordinate @self_, float* @maximum, float* @reduced)
        {
            NativeMethods.PxArticulationReducedCoordinate_packJointData((global::PhysX.PxArticulationReducedCoordinate*)Unsafe.AsPointer(ref @self_), @maximum, @reduced);
        }

        /// <summary>Converts reduced-coordinate joint DOF data to maximal coordinates.  - Indexing into the maximal joint DOF data is via the link's low-level index minus 1 (the root link is not included). - The reduced-coordinate data follows the cache indexing convention, see PxArticulationCache::jointVelocity.  The articulation must be in a scene.</summary>
        public static void UnpackJointData(this ref global::PhysX.PxArticulationReducedCoordinate @self_, float* @reduced, float* @maximum)
        {
            NativeMethods.PxArticulationReducedCoordinate_unpackJointData((global::PhysX.PxArticulationReducedCoordinate*)Unsafe.AsPointer(ref @self_), @reduced, @maximum);
        }

        /// <summary>Prepares common articulation data based on articulation pose for inverse dynamics calculations.  Usage: 1. Set articulation pose (joint positions and base transform) via articulation cache and applyCache(). 1. Call commonInit. 1. Call inverse dynamics computation method.  This call may only be made on articulations that are in a scene, and may not be made during simulation.</summary>
        public static void CommonInit(this ref global::PhysX.PxArticulationReducedCoordinate @self_)
        {
            NativeMethods.PxArticulationReducedCoordinate_commonInit((global::PhysX.PxArticulationReducedCoordinate*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Computes the joint DOF forces required to counteract gravitational forces for the given articulation pose.  - Inputs - Articulation pose (joint positions + base transform). - Outputs - Joint forces to counteract gravity (in cache).  - The joint forces returned are determined purely by gravity for the articulation in the current joint and base pose, and joints at rest; i.e. external forces, joint velocities, and joint accelerations are set to zero. Joint drives are also not considered in the computation. - commonInit() must be called before the computation, and after setting the articulation pose via applyCache().  This call may only be made on articulations that are in a scene, and may not be made during simulation.</summary>
        public static void ComputeGeneralizedGravityForce(this ref global::PhysX.PxArticulationReducedCoordinate @self_, global::PhysX.PxArticulationCache* @cache)
        {
            NativeMethods.PxArticulationReducedCoordinate_computeGeneralizedGravityForce((global::PhysX.PxArticulationReducedCoordinate*)Unsafe.AsPointer(ref @self_), @cache);
        }

        /// <summary>Computes the joint DOF forces required to counteract Coriolis and centrifugal forces for the given articulation state.  - Inputs - Articulation state (joint positions and velocities (in cache), and base transform and spatial velocity). - Outputs - Joint forces to counteract Coriolis and centrifugal forces (in cache).  - The joint forces returned are determined purely by the articulation's state; i.e. external forces, gravity, and joint accelerations are set to zero. Joint drives and potential damping terms, such as link angular or linear damping, or joint friction, are also not considered in the computation. - Prior to the computation, update/set the base spatial velocity with PxArticulationCache::rootLinkData and applyCache(). - commonInit() must be called before the computation, and after setting the articulation pose via applyCache().  This call may only be made on articulations that are in a scene, and may not be made during simulation.</summary>
        public static void ComputeCoriolisAndCentrifugalForce(this ref global::PhysX.PxArticulationReducedCoordinate @self_, global::PhysX.PxArticulationCache* @cache)
        {
            NativeMethods.PxArticulationReducedCoordinate_computeCoriolisAndCentrifugalForce((global::PhysX.PxArticulationReducedCoordinate*)Unsafe.AsPointer(ref @self_), @cache);
        }

        /// <summary>Computes the joint DOF forces required to counteract external spatial forces applied to articulation links.  - Inputs - External forces on links (in cache), articulation pose (joint positions + base transform). - Outputs - Joint forces to counteract the external forces (in cache).  - Only the external spatial forces provided in the cache and the articulation pose are considered in the computation. - The external spatial forces are with respect to the links' centers of mass, and not the actor's origin. - commonInit() must be called before the computation, and after setting the articulation pose via applyCache().  This call may only be made on articulations that are in a scene, and may not be made during simulation.</summary>
        public static void ComputeGeneralizedExternalForce(this ref global::PhysX.PxArticulationReducedCoordinate @self_, global::PhysX.PxArticulationCache* @cache)
        {
            NativeMethods.PxArticulationReducedCoordinate_computeGeneralizedExternalForce((global::PhysX.PxArticulationReducedCoordinate*)Unsafe.AsPointer(ref @self_), @cache);
        }

        /// <summary>Computes the joint accelerations for the given articulation state and joint forces.  - Inputs - Joint forces (in cache) and articulation state (joint positions and velocities (in cache), and base transform and spatial velocity). - Outputs - Joint accelerations (in cache).  - The computation includes Coriolis terms and gravity. However, joint drives and potential damping terms are not considered in the computation (for example, linear link damping or joint friction). - Prior to the computation, update/set the base spatial velocity with PxArticulationCache::rootLinkData and applyCache(). - commonInit() must be called before the computation, and after setting the articulation pose via applyCache().  This call may only be made on articulations that are in a scene, and may not be made during simulation.</summary>
        public static void ComputeJointAcceleration(this ref global::PhysX.PxArticulationReducedCoordinate @self_, global::PhysX.PxArticulationCache* @cache)
        {
            NativeMethods.PxArticulationReducedCoordinate_computeJointAcceleration((global::PhysX.PxArticulationReducedCoordinate*)Unsafe.AsPointer(ref @self_), @cache);
        }

        /// <summary>Computes the joint forces for the given articulation state and joint accelerations, not considering gravity.  - Inputs - Joint accelerations (in cache) and articulation state (joint positions and velocities (in cache), and base transform and spatial velocity). - Outputs - Joint forces (in cache).  - The computation includes Coriolis terms. However, joint drives and potential damping terms are not considered in the computation (for example, linear link damping or joint friction). - Prior to the computation, update/set the base spatial velocity with PxArticulationCache::rootLinkData and applyCache(). - commonInit() must be called before the computation, and after setting the articulation pose via applyCache().  This call may only be made on articulations that are in a scene, and may not be made during simulation.</summary>
        public static void ComputeJointForce(this ref global::PhysX.PxArticulationReducedCoordinate @self_, global::PhysX.PxArticulationCache* @cache)
        {
            NativeMethods.PxArticulationReducedCoordinate_computeJointForce((global::PhysX.PxArticulationReducedCoordinate*)Unsafe.AsPointer(ref @self_), @cache);
        }

        /// <summary>Compute the dense Jacobian for the articulation in world space, including the DOFs of a potentially floating base.  This computes the dense representation of an inherently sparse matrix. Multiplication with this matrix maps joint space velocities to world-space linear and angular (i.e. spatial) velocities of the centers of mass of the links.  This call may only be made on articulations that are in a scene, and may not be made during simulation.</summary>
        public static void ComputeDenseJacobian(this ref global::PhysX.PxArticulationReducedCoordinate @self_, global::PhysX.PxArticulationCache* @cache, uint* @nRows, uint* @nCols)
        {
            NativeMethods.PxArticulationReducedCoordinate_computeDenseJacobian((global::PhysX.PxArticulationReducedCoordinate*)Unsafe.AsPointer(ref @self_), @cache, @nRows, @nCols);
        }

        /// <summary>Computes the coefficient matrix for contact forces.  - The matrix dimension is getCoefficientMatrixSize() = getDofs() * getNbLoopJoints(), and the DOF (column) indexing follows the internal DOF order, see PxArticulationCache::jointVelocity. - Each column in the matrix is the joint forces effected by a contact based on impulse strength 1. - The user must allocate memory for PxArticulationCache::coefficientMatrix where the required size of the PxReal array is equal to getCoefficientMatrixSize(). - commonInit() must be called before the computation, and after setting the articulation pose via applyCache().  This call may only be made on articulations that are in a scene, and may not be made during simulation.</summary>
        public static void ComputeCoefficientMatrix(this ref global::PhysX.PxArticulationReducedCoordinate @self_, global::PhysX.PxArticulationCache* @cache)
        {
            NativeMethods.PxArticulationReducedCoordinate_computeCoefficientMatrix((global::PhysX.PxArticulationReducedCoordinate*)Unsafe.AsPointer(ref @self_), @cache);
        }

        /// <summary>Computes the lambda values when the test impulse is 1.  - The user must allocate memory for PxArticulationCache::lambda where the required size of the PxReal array is equal to getNbLoopJoints(). - commonInit() must be called before the computation, and after setting the articulation pose via applyCache().  True if convergence was achieved within maxIter; False if convergence was not achieved or the operation failed otherwise.  This call may only be made on articulations that are in a scene, and may not be made during simulation.</summary>
        public static bool ComputeLambda(this ref global::PhysX.PxArticulationReducedCoordinate @self_, global::PhysX.PxArticulationCache* @cache, global::PhysX.PxArticulationCache* @initialState, float* @jointTorque, uint @maxIter)
        {
            return NativeMethods.PxArticulationReducedCoordinate_computeLambda((global::PhysX.PxArticulationReducedCoordinate*)Unsafe.AsPointer(ref @self_), @cache, @initialState, @jointTorque, @maxIter);
        }

        /// <summary>Compute the joint-space inertia matrix that maps joint accelerations to joint forces: forces = M * accelerations.  - Inputs - Articulation pose (joint positions and base transform). - Outputs - Mass matrix (in cache).  commonInit() must be called before the computation, and after setting the articulation pose via applyCache().  This call may only be made on articulations that are in a scene, and may not be made during simulation.</summary>
        public static void ComputeGeneralizedMassMatrix(this ref global::PhysX.PxArticulationReducedCoordinate @self_, global::PhysX.PxArticulationCache* @cache)
        {
            NativeMethods.PxArticulationReducedCoordinate_computeGeneralizedMassMatrix((global::PhysX.PxArticulationReducedCoordinate*)Unsafe.AsPointer(ref @self_), @cache);
        }

        /// <summary>Adds a loop joint to the articulation system for inverse dynamics.  This call may not be made during simulation.</summary>
        public static void AddLoopJointMut(this ref global::PhysX.PxArticulationReducedCoordinate @self_, global::PhysX.PxConstraint* @joint)
        {
            NativeMethods.PxArticulationReducedCoordinate_addLoopJoint_mut((global::PhysX.PxArticulationReducedCoordinate*)Unsafe.AsPointer(ref @self_), @joint);
        }

        /// <summary>Removes a loop joint from the articulation for inverse dynamics.  This call may not be made during simulation.</summary>
        public static void RemoveLoopJointMut(this ref global::PhysX.PxArticulationReducedCoordinate @self_, global::PhysX.PxConstraint* @joint)
        {
            NativeMethods.PxArticulationReducedCoordinate_removeLoopJoint_mut((global::PhysX.PxArticulationReducedCoordinate*)Unsafe.AsPointer(ref @self_), @joint);
        }

        /// <summary>Returns the number of loop joints in the articulation for inverse dynamics.  The number of loop joints.</summary>
        public static uint GetNbLoopJoints(this ref global::PhysX.PxArticulationReducedCoordinate @self_)
        {
            return NativeMethods.PxArticulationReducedCoordinate_getNbLoopJoints((global::PhysX.PxArticulationReducedCoordinate*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Returns the set of loop constraints (i.e. joints) in the articulation.  The number of constraints written into the buffer.</summary>
        public static uint GetLoopJoints(this ref global::PhysX.PxArticulationReducedCoordinate @self_, global::PhysX.PxConstraint** @userBuffer, uint @bufferSize, uint @startIndex)
        {
            return NativeMethods.PxArticulationReducedCoordinate_getLoopJoints((global::PhysX.PxArticulationReducedCoordinate*)Unsafe.AsPointer(ref @self_), @userBuffer, @bufferSize, @startIndex);
        }

        /// <summary>Returns the required size of the coefficient matrix in the articulation.  Size of the coefficient matrix (equal to getDofs() * getNbLoopJoints()).  This call may only be made on articulations that are in a scene.</summary>
        public static uint GetCoefficientMatrixSize(this ref global::PhysX.PxArticulationReducedCoordinate @self_)
        {
            return NativeMethods.PxArticulationReducedCoordinate_getCoefficientMatrixSize((global::PhysX.PxArticulationReducedCoordinate*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Sets the root link transform (world to actor frame).  - For performance, prefer PxArticulationCache::rootLinkData to set the root link transform in a batch articulation state update. - Use updateKinematic() after all state updates to the articulation via non-cache API such as this method, in order to update link states for the next simulation frame or querying.  This call may not be made during simulation.</summary>
        public static void SetRootGlobalPoseMut(this ref global::PhysX.PxArticulationReducedCoordinate @self_, global::PhysX.PxTransform* @pose, bool @autowake)
        {
            NativeMethods.PxArticulationReducedCoordinate_setRootGlobalPose_mut((global::PhysX.PxArticulationReducedCoordinate*)Unsafe.AsPointer(ref @self_), @pose, @autowake);
        }

        /// <summary>Returns the root link transform (world to actor frame).  For performance, prefer PxArticulationCache::rootLinkData to get the root link transform in a batch query.  The root link transform.  This call is not allowed while the simulation is running except in a split simulation during [`PxScene::collide`]() and up to #PxScene::advance(), and in PxContactModifyCallback or in contact report callbacks.</summary>
        public static global::PhysX.PxTransform GetRootGlobalPose(this ref global::PhysX.PxArticulationReducedCoordinate @self_)
        {
            return NativeMethods.PxArticulationReducedCoordinate_getRootGlobalPose((global::PhysX.PxArticulationReducedCoordinate*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Sets the root link linear center-of-mass velocity.  - The linear velocity is with respect to the link's center of mass and not the actor frame origin. - For performance, prefer PxArticulationCache::rootLinkData to set the root link velocity in a batch articulation state update. - The articulation is woken up if the input velocity is nonzero (ignoring autowake) and the articulation is in a scene. - Use updateKinematic() after all state updates to the articulation via non-cache API such as this method, in order to update link states for the next simulation frame or querying.  This call may not be made during simulation, except in a split simulation in-between [`PxScene::fetchCollision`] and #PxScene::advance.</summary>
        public static void SetRootLinearVelocityMut(this ref global::PhysX.PxArticulationReducedCoordinate @self_, global::PhysX.PxVec3* @linearVelocity, bool @autowake)
        {
            NativeMethods.PxArticulationReducedCoordinate_setRootLinearVelocity_mut((global::PhysX.PxArticulationReducedCoordinate*)Unsafe.AsPointer(ref @self_), @linearVelocity, @autowake);
        }

        /// <summary>Gets the root link center-of-mass linear velocity.  - The linear velocity is with respect to the link's center of mass and not the actor frame origin. - For performance, prefer PxArticulationCache::rootLinkData to get the root link velocity in a batch query.  The root link center-of-mass linear velocity.  This call is not allowed while the simulation is running except in a split simulation during [`PxScene::collide`]() and up to #PxScene::advance(), and in PxContactModifyCallback or in contact report callbacks.</summary>
        public static global::PhysX.PxVec3 GetRootLinearVelocity(this ref global::PhysX.PxArticulationReducedCoordinate @self_)
        {
            return NativeMethods.PxArticulationReducedCoordinate_getRootLinearVelocity((global::PhysX.PxArticulationReducedCoordinate*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Sets the root link angular velocity.  - For performance, prefer PxArticulationCache::rootLinkData to set the root link velocity in a batch articulation state update. - The articulation is woken up if the input velocity is nonzero (ignoring autowake) and the articulation is in a scene. - Use updateKinematic() after all state updates to the articulation via non-cache API such as this method, in order to update link states for the next simulation frame or querying.  This call may not be made during simulation, except in a split simulation in-between [`PxScene::fetchCollision`] and #PxScene::advance.</summary>
        public static void SetRootAngularVelocityMut(this ref global::PhysX.PxArticulationReducedCoordinate @self_, global::PhysX.PxVec3* @angularVelocity, bool @autowake)
        {
            NativeMethods.PxArticulationReducedCoordinate_setRootAngularVelocity_mut((global::PhysX.PxArticulationReducedCoordinate*)Unsafe.AsPointer(ref @self_), @angularVelocity, @autowake);
        }

        /// <summary>Gets the root link angular velocity.  For performance, prefer PxArticulationCache::rootLinkData to get the root link velocity in a batch query.  The root link angular velocity.  This call is not allowed while the simulation is running except in a split simulation during [`PxScene::collide`]() and up to #PxScene::advance(), and in PxContactModifyCallback or in contact report callbacks.</summary>
        public static global::PhysX.PxVec3 GetRootAngularVelocity(this ref global::PhysX.PxArticulationReducedCoordinate @self_)
        {
            return NativeMethods.PxArticulationReducedCoordinate_getRootAngularVelocity((global::PhysX.PxArticulationReducedCoordinate*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Returns the (classical) link acceleration in world space for the given low-level link index.  - The returned acceleration is not a spatial, but a classical, i.e. body-fixed acceleration (https://en.wikipedia.org/wiki/Spatial_acceleration). - The (linear) acceleration is with respect to the link's center of mass and not the actor frame origin.  The link's center-of-mass classical acceleration, or 0 if the call is made before the articulation participated in a first simulation step.  This call may only be made on articulations that are in a scene, and it is not allowed to use this method while the simulation is running except in a split simulation during [`PxScene::collide`]() and up to #PxScene::advance(), and in PxContactModifyCallback or in contact report callbacks.</summary>
        public static global::PhysX.PxSpatialVelocity GetLinkAccelerationMut(this ref global::PhysX.PxArticulationReducedCoordinate @self_, uint @linkId)
        {
            return NativeMethods.PxArticulationReducedCoordinate_getLinkAcceleration_mut((global::PhysX.PxArticulationReducedCoordinate*)Unsafe.AsPointer(ref @self_), @linkId);
        }

        /// <summary>Returns the GPU articulation index.  The GPU index, or 0xFFFFFFFF if the articulation is not in a scene or PxSceneFlag::eSUPPRESS_READBACK is not set.</summary>
        public static uint GetGpuArticulationIndexMut(this ref global::PhysX.PxArticulationReducedCoordinate @self_)
        {
            return NativeMethods.PxArticulationReducedCoordinate_getGpuArticulationIndex_mut((global::PhysX.PxArticulationReducedCoordinate*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Creates a spatial tendon to attach to the articulation with default attribute values.  The new spatial tendon.  Creating a spatial tendon is not allowed while the articulation is in a scene. In order to add the tendon, remove and then re-add the articulation to the scene.</summary>
        public static global::PhysX.PxArticulationSpatialTendon* CreateSpatialTendonMut(this ref global::PhysX.PxArticulationReducedCoordinate @self_)
        {
            return NativeMethods.PxArticulationReducedCoordinate_createSpatialTendon_mut((global::PhysX.PxArticulationReducedCoordinate*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Creates a fixed tendon to attach to the articulation with default attribute values.  The new fixed tendon.  Creating a fixed tendon is not allowed while the articulation is in a scene. In order to add the tendon, remove and then re-add the articulation to the scene.</summary>
        public static global::PhysX.PxArticulationFixedTendon* CreateFixedTendonMut(this ref global::PhysX.PxArticulationReducedCoordinate @self_)
        {
            return NativeMethods.PxArticulationReducedCoordinate_createFixedTendon_mut((global::PhysX.PxArticulationReducedCoordinate*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Creates a force sensor attached to a link of the articulation.  The new sensor.  Creating a sensor is not allowed while the articulation is in a scene. In order to add the sensor, remove and then re-add the articulation to the scene.</summary>
        public static global::PhysX.PxArticulationSensor* CreateSensorMut(this ref global::PhysX.PxArticulationReducedCoordinate @self_, global::PhysX.PxArticulationLink* @link, global::PhysX.PxTransform* @relativePose)
        {
            return NativeMethods.PxArticulationReducedCoordinate_createSensor_mut((global::PhysX.PxArticulationReducedCoordinate*)Unsafe.AsPointer(ref @self_), @link, @relativePose);
        }

        /// <summary>Returns the spatial tendons attached to the articulation.  The order of the tendons in the buffer is not necessarily identical to the order in which the tendons were added to the articulation.  The number of tendons written into the buffer.</summary>
        public static uint GetSpatialTendons(this ref global::PhysX.PxArticulationReducedCoordinate @self_, global::PhysX.PxArticulationSpatialTendon** @userBuffer, uint @bufferSize, uint @startIndex)
        {
            return NativeMethods.PxArticulationReducedCoordinate_getSpatialTendons((global::PhysX.PxArticulationReducedCoordinate*)Unsafe.AsPointer(ref @self_), @userBuffer, @bufferSize, @startIndex);
        }

        /// <summary>Returns the number of spatial tendons in the articulation.  The number of tendons.</summary>
        public static uint GetNbSpatialTendonsMut(this ref global::PhysX.PxArticulationReducedCoordinate @self_)
        {
            return NativeMethods.PxArticulationReducedCoordinate_getNbSpatialTendons_mut((global::PhysX.PxArticulationReducedCoordinate*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Returns the fixed tendons attached to the articulation.  The order of the tendons in the buffer is not necessarily identical to the order in which the tendons were added to the articulation.  The number of tendons written into the buffer.</summary>
        public static uint GetFixedTendons(this ref global::PhysX.PxArticulationReducedCoordinate @self_, global::PhysX.PxArticulationFixedTendon** @userBuffer, uint @bufferSize, uint @startIndex)
        {
            return NativeMethods.PxArticulationReducedCoordinate_getFixedTendons((global::PhysX.PxArticulationReducedCoordinate*)Unsafe.AsPointer(ref @self_), @userBuffer, @bufferSize, @startIndex);
        }

        /// <summary>Returns the number of fixed tendons in the articulation.  The number of tendons.</summary>
        public static uint GetNbFixedTendonsMut(this ref global::PhysX.PxArticulationReducedCoordinate @self_)
        {
            return NativeMethods.PxArticulationReducedCoordinate_getNbFixedTendons_mut((global::PhysX.PxArticulationReducedCoordinate*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Returns the sensors attached to the articulation.  The order of the sensors in the buffer is not necessarily identical to the order in which the sensors were added to the articulation.  The number of sensors written into the buffer.</summary>
        public static uint GetSensors(this ref global::PhysX.PxArticulationReducedCoordinate @self_, global::PhysX.PxArticulationSensor** @userBuffer, uint @bufferSize, uint @startIndex)
        {
            return NativeMethods.PxArticulationReducedCoordinate_getSensors((global::PhysX.PxArticulationReducedCoordinate*)Unsafe.AsPointer(ref @self_), @userBuffer, @bufferSize, @startIndex);
        }

        /// <summary>Returns the number of sensors in the articulation.  The number of sensors.</summary>
        public static uint GetNbSensorsMut(this ref global::PhysX.PxArticulationReducedCoordinate @self_)
        {
            return NativeMethods.PxArticulationReducedCoordinate_getNbSensors_mut((global::PhysX.PxArticulationReducedCoordinate*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Update link velocities and/or positions in the articulation.  For performance, prefer the PxArticulationCache API that performs batch articulation state updates.  If the application updates the root state (position and velocity) or joint state via any combination of the non-cache API calls  - setRootGlobalPose(), setRootLinearVelocity(), setRootAngularVelocity() - PxArticulationJointReducedCoordinate::setJointPosition(), PxArticulationJointReducedCoordinate::setJointVelocity()  the application needs to call this method after the state setting in order to update the link states for the next simulation frame or querying.  Use - PxArticulationKinematicFlag::ePOSITION after any changes to the articulation root or joint positions using non-cache API calls. Updates links' positions and velocities. - PxArticulationKinematicFlag::eVELOCITY after velocity-only changes to the articulation root or joints using non-cache API calls. Updates links' velocities only.  This call may only be made on articulations that are in a scene, and may not be made during simulation.</summary>
        public static void UpdateKinematicMut(this ref global::PhysX.PxArticulationReducedCoordinate @self_, global::PhysX.PxArticulationKinematicFlags @flags)
        {
            NativeMethods.PxArticulationReducedCoordinate_updateKinematic_mut((global::PhysX.PxArticulationReducedCoordinate*)Unsafe.AsPointer(ref @self_), @flags);
        }

        #endregion

        #region PhysX.PxArticulationJointReducedCoordinate(29)

        /// <summary>Gets the parent articulation link of this joint.  The parent link.</summary>
        public static global::PhysX.PxArticulationLink* GetParentArticulationLink(this ref global::PhysX.PxArticulationJointReducedCoordinate @self_)
        {
            return NativeMethods.PxArticulationJointReducedCoordinate_getParentArticulationLink((global::PhysX.PxArticulationJointReducedCoordinate*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Sets the joint pose in the parent link actor frame.  This call is not allowed while the simulation is running.</summary>
        public static void SetParentPoseMut(this ref global::PhysX.PxArticulationJointReducedCoordinate @self_, global::PhysX.PxTransform* @pose)
        {
            NativeMethods.PxArticulationJointReducedCoordinate_setParentPose_mut((global::PhysX.PxArticulationJointReducedCoordinate*)Unsafe.AsPointer(ref @self_), @pose);
        }

        /// <summary>Gets the joint pose in the parent link actor frame.  The joint pose.</summary>
        public static global::PhysX.PxTransform GetParentPose(this ref global::PhysX.PxArticulationJointReducedCoordinate @self_)
        {
            return NativeMethods.PxArticulationJointReducedCoordinate_getParentPose((global::PhysX.PxArticulationJointReducedCoordinate*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Gets the child articulation link of this joint.  The child link.</summary>
        public static global::PhysX.PxArticulationLink* GetChildArticulationLink(this ref global::PhysX.PxArticulationJointReducedCoordinate @self_)
        {
            return NativeMethods.PxArticulationJointReducedCoordinate_getChildArticulationLink((global::PhysX.PxArticulationJointReducedCoordinate*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Sets the joint pose in the child link actor frame.  This call is not allowed while the simulation is running.</summary>
        public static void SetChildPoseMut(this ref global::PhysX.PxArticulationJointReducedCoordinate @self_, global::PhysX.PxTransform* @pose)
        {
            NativeMethods.PxArticulationJointReducedCoordinate_setChildPose_mut((global::PhysX.PxArticulationJointReducedCoordinate*)Unsafe.AsPointer(ref @self_), @pose);
        }

        /// <summary>Gets the joint pose in the child link actor frame.  The joint pose.</summary>
        public static global::PhysX.PxTransform GetChildPose(this ref global::PhysX.PxArticulationJointReducedCoordinate @self_)
        {
            return NativeMethods.PxArticulationJointReducedCoordinate_getChildPose((global::PhysX.PxArticulationJointReducedCoordinate*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Sets the joint type (e.g. revolute).  Setting the joint type is not allowed while the articulation is in a scene. In order to set the joint type, remove and then re-add the articulation to the scene.</summary>
        public static void SetJointTypeMut(this ref global::PhysX.PxArticulationJointReducedCoordinate @self_, global::PhysX.PxArticulationJointType @jointType)
        {
            NativeMethods.PxArticulationJointReducedCoordinate_setJointType_mut((global::PhysX.PxArticulationJointReducedCoordinate*)Unsafe.AsPointer(ref @self_), @jointType);
        }

        /// <summary>Gets the joint type.  The joint type.</summary>
        public static global::PhysX.PxArticulationJointType GetJointType(this ref global::PhysX.PxArticulationJointReducedCoordinate @self_)
        {
            return NativeMethods.PxArticulationJointReducedCoordinate_getJointType((global::PhysX.PxArticulationJointReducedCoordinate*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Sets the joint motion for a given axis.  Setting the motion of joint axes is not allowed while the articulation is in a scene. In order to set the motion, remove and then re-add the articulation to the scene.</summary>
        public static void SetMotionMut(this ref global::PhysX.PxArticulationJointReducedCoordinate @self_, global::PhysX.PxArticulationAxis @axis, global::PhysX.PxArticulationMotion @motion)
        {
            NativeMethods.PxArticulationJointReducedCoordinate_setMotion_mut((global::PhysX.PxArticulationJointReducedCoordinate*)Unsafe.AsPointer(ref @self_), @axis, @motion);
        }

        /// <summary>Returns the joint motion for the given axis.  The joint motion of the given axis.</summary>
        public static global::PhysX.PxArticulationMotion GetMotion(this ref global::PhysX.PxArticulationJointReducedCoordinate @self_, global::PhysX.PxArticulationAxis @axis)
        {
            return NativeMethods.PxArticulationJointReducedCoordinate_getMotion((global::PhysX.PxArticulationJointReducedCoordinate*)Unsafe.AsPointer(ref @self_), @axis);
        }

        /// <summary>Sets the joint limits for a given axis.  - The motion of the corresponding axis should be set to PxArticulationMotion::eLIMITED in order for the limits to be enforced. - The lower limit should be strictly smaller than the higher limit. If the limits should be equal, use PxArticulationMotion::eLOCKED and an appropriate offset in the parent/child joint frames.  This call is not allowed while the simulation is running.  For spherical joints, limit.min and limit.max must both be in range [-Pi, Pi].</summary>
        public static void SetLimitParamsMut(this ref global::PhysX.PxArticulationJointReducedCoordinate @self_, global::PhysX.PxArticulationAxis @axis, global::PhysX.PxArticulationLimit* @limit)
        {
            NativeMethods.PxArticulationJointReducedCoordinate_setLimitParams_mut((global::PhysX.PxArticulationJointReducedCoordinate*)Unsafe.AsPointer(ref @self_), @axis, @limit);
        }

        /// <summary>Returns the joint limits for a given axis.  The joint limits.</summary>
        public static global::PhysX.PxArticulationLimit GetLimitParams(this ref global::PhysX.PxArticulationJointReducedCoordinate @self_, global::PhysX.PxArticulationAxis @axis)
        {
            return NativeMethods.PxArticulationJointReducedCoordinate_getLimitParams((global::PhysX.PxArticulationJointReducedCoordinate*)Unsafe.AsPointer(ref @self_), @axis);
        }

        /// <summary>Configures a joint drive for the given axis.  See PxArticulationDrive for parameter details; and the manual for further information, and the drives' implicit spring-damper (i.e. PD control) implementation in particular.  This call is not allowed while the simulation is running.</summary>
        public static void SetDriveParamsMut(this ref global::PhysX.PxArticulationJointReducedCoordinate @self_, global::PhysX.PxArticulationAxis @axis, global::PhysX.PxArticulationDrive* @drive)
        {
            NativeMethods.PxArticulationJointReducedCoordinate_setDriveParams_mut((global::PhysX.PxArticulationJointReducedCoordinate*)Unsafe.AsPointer(ref @self_), @axis, @drive);
        }

        /// <summary>Gets the joint drive configuration for the given axis.  The drive parameters.</summary>
        public static global::PhysX.PxArticulationDrive GetDriveParams(this ref global::PhysX.PxArticulationJointReducedCoordinate @self_, global::PhysX.PxArticulationAxis @axis)
        {
            return NativeMethods.PxArticulationJointReducedCoordinate_getDriveParams((global::PhysX.PxArticulationJointReducedCoordinate*)Unsafe.AsPointer(ref @self_), @axis);
        }

        /// <summary>Sets the joint drive position target for the given axis.  The target units are linear units (equivalent to scene units) for a translational axis, or rad for a rotational axis.  This call is not allowed while the simulation is running.  For spherical joints, target must be in range [-Pi, Pi].  The target is specified in the parent frame of the joint. If Gp, Gc are the parent and child actor poses in the world frame and Lp, Lc are the parent and child joint frames expressed in the parent and child actor frames then the joint will drive the parent and child links to poses that obey Gp * Lp * J = Gc * Lc. For joints restricted to angular motion, J has the form PxTranfsorm(PxVec3(PxZero), PxExp(PxVec3(twistTarget, swing1Target, swing2Target))).  For joints restricted to linear motion, J has the form PxTransform(PxVec3(XTarget, YTarget, ZTarget), PxQuat(PxIdentity)).  For spherical joints with more than 1 degree of freedom, the joint target angles taken together can collectively represent a rotation of greater than Pi around a vector. When this happens the rotation that matches the joint drive target is not the shortest path rotation.  The joint pose J that is the outcome after driving to the target pose will always be the equivalent of the shortest path rotation.</summary>
        public static void SetDriveTargetMut(this ref global::PhysX.PxArticulationJointReducedCoordinate @self_, global::PhysX.PxArticulationAxis @axis, float @target, bool @autowake)
        {
            NativeMethods.PxArticulationJointReducedCoordinate_setDriveTarget_mut((global::PhysX.PxArticulationJointReducedCoordinate*)Unsafe.AsPointer(ref @self_), @axis, @target, @autowake);
        }

        /// <summary>Returns the joint drive position target for the given axis.  The target position.</summary>
        public static float GetDriveTarget(this ref global::PhysX.PxArticulationJointReducedCoordinate @self_, global::PhysX.PxArticulationAxis @axis)
        {
            return NativeMethods.PxArticulationJointReducedCoordinate_getDriveTarget((global::PhysX.PxArticulationJointReducedCoordinate*)Unsafe.AsPointer(ref @self_), @axis);
        }

        /// <summary>Sets the joint drive velocity target for the given axis.  The target units are linear units (equivalent to scene units) per second for a translational axis, or radians per second for a rotational axis.  This call is not allowed while the simulation is running.</summary>
        public static void SetDriveVelocityMut(this ref global::PhysX.PxArticulationJointReducedCoordinate @self_, global::PhysX.PxArticulationAxis @axis, float @targetVel, bool @autowake)
        {
            NativeMethods.PxArticulationJointReducedCoordinate_setDriveVelocity_mut((global::PhysX.PxArticulationJointReducedCoordinate*)Unsafe.AsPointer(ref @self_), @axis, @targetVel, @autowake);
        }

        /// <summary>Returns the joint drive velocity target for the given axis.  The target velocity.</summary>
        public static float GetDriveVelocity(this ref global::PhysX.PxArticulationJointReducedCoordinate @self_, global::PhysX.PxArticulationAxis @axis)
        {
            return NativeMethods.PxArticulationJointReducedCoordinate_getDriveVelocity((global::PhysX.PxArticulationJointReducedCoordinate*)Unsafe.AsPointer(ref @self_), @axis);
        }

        /// <summary>Sets the joint armature for the given axis.  - The armature is directly added to the joint-space spatial inertia of the corresponding axis. - The armature is in mass units for a prismatic (i.e. linear) joint, and in mass units * (scene linear units)^2 for a rotational joint.  This call is not allowed while the simulation is running.</summary>
        public static void SetArmatureMut(this ref global::PhysX.PxArticulationJointReducedCoordinate @self_, global::PhysX.PxArticulationAxis @axis, float @armature)
        {
            NativeMethods.PxArticulationJointReducedCoordinate_setArmature_mut((global::PhysX.PxArticulationJointReducedCoordinate*)Unsafe.AsPointer(ref @self_), @axis, @armature);
        }

        /// <summary>Gets the joint armature for the given axis.  The armature set on the given axis.</summary>
        public static float GetArmature(this ref global::PhysX.PxArticulationJointReducedCoordinate @self_, global::PhysX.PxArticulationAxis @axis)
        {
            return NativeMethods.PxArticulationJointReducedCoordinate_getArmature((global::PhysX.PxArticulationJointReducedCoordinate*)Unsafe.AsPointer(ref @self_), @axis);
        }

        /// <summary>Sets the joint friction coefficient, which applies to all joint axes.  - The joint friction is unitless and relates the magnitude of the spatial force [F_trans, T_trans] transmitted from parent to child link to the maximal friction force F_resist that may be applied by the solver to resist joint motion, per axis; i.e. |F_resist| &lt; coefficient * (|F_trans| + |T_trans|), where F_resist may refer to a linear force or torque depending on the joint axis. - The simulated friction effect is therefore similar to static and Coulomb friction. In order to simulate dynamic joint friction, use a joint drive with zero stiffness and zero velocity target, and an appropriately dimensioned damping parameter.  This call is not allowed while the simulation is running.</summary>
        public static void SetFrictionCoefficientMut(this ref global::PhysX.PxArticulationJointReducedCoordinate @self_, float @coefficient)
        {
            NativeMethods.PxArticulationJointReducedCoordinate_setFrictionCoefficient_mut((global::PhysX.PxArticulationJointReducedCoordinate*)Unsafe.AsPointer(ref @self_), @coefficient);
        }

        /// <summary>Gets the joint friction coefficient.  The joint friction coefficient.</summary>
        public static float GetFrictionCoefficient(this ref global::PhysX.PxArticulationJointReducedCoordinate @self_)
        {
            return NativeMethods.PxArticulationJointReducedCoordinate_getFrictionCoefficient((global::PhysX.PxArticulationJointReducedCoordinate*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Sets the maximal joint velocity enforced for all axes.  - The solver will apply appropriate joint-space impulses in order to enforce the per-axis joint-velocity limit. - The velocity units are linear units (equivalent to scene units) per second for a translational axis, or radians per second for a rotational axis.  This call is not allowed while the simulation is running.</summary>
        public static void SetMaxJointVelocityMut(this ref global::PhysX.PxArticulationJointReducedCoordinate @self_, float @maxJointV)
        {
            NativeMethods.PxArticulationJointReducedCoordinate_setMaxJointVelocity_mut((global::PhysX.PxArticulationJointReducedCoordinate*)Unsafe.AsPointer(ref @self_), @maxJointV);
        }

        /// <summary>Gets the maximal joint velocity enforced for all axes.  The maximal per-axis joint velocity.</summary>
        public static float GetMaxJointVelocity(this ref global::PhysX.PxArticulationJointReducedCoordinate @self_)
        {
            return NativeMethods.PxArticulationJointReducedCoordinate_getMaxJointVelocity((global::PhysX.PxArticulationJointReducedCoordinate*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Sets the joint position for the given axis.  - For performance, prefer PxArticulationCache::jointPosition to set joint positions in a batch articulation state update. - Use PxArticulationReducedCoordinate::updateKinematic after all state updates to the articulation via non-cache API such as this method, in order to update link states for the next simulation frame or querying.  This call is not allowed while the simulation is running.  For spherical joints, jointPos must be in range [-Pi, Pi].  Joint position is specified in the parent frame of the joint. If Gp, Gc are the parent and child actor poses in the world frame and Lp, Lc are the parent and child joint frames expressed in the parent and child actor frames then the parent and child links will be given poses that obey Gp * Lp * J = Gc * Lc with J denoting the joint pose. For joints restricted to angular motion, J has the form PxTranfsorm(PxVec3(PxZero), PxExp(PxVec3(twistPos, swing1Pos, swing2Pos))).  For joints restricted to linear motion, J has the form PxTransform(PxVec3(xPos, yPos, zPos), PxQuat(PxIdentity)).  For spherical joints with more than 1 degree of freedom, the input joint positions taken together can collectively represent a rotation of greater than Pi around a vector. When this happens the rotation that matches the joint positions is not the shortest path rotation.  The joint pose J that is the outcome of setting and applying the joint positions will always be the equivalent of the shortest path rotation.</summary>
        public static void SetJointPositionMut(this ref global::PhysX.PxArticulationJointReducedCoordinate @self_, global::PhysX.PxArticulationAxis @axis, float @jointPos)
        {
            NativeMethods.PxArticulationJointReducedCoordinate_setJointPosition_mut((global::PhysX.PxArticulationJointReducedCoordinate*)Unsafe.AsPointer(ref @self_), @axis, @jointPos);
        }

        /// <summary>Gets the joint position for the given axis, i.e. joint degree of freedom (DOF).  For performance, prefer PxArticulationCache::jointPosition to get joint positions in a batch query.  The joint position in linear units (equivalent to scene units) for a translational axis, or radians for a rotational axis.  This call is not allowed while the simulation is running except in a split simulation during [`PxScene::collide`]() and up to #PxScene::advance(), and in PxContactModifyCallback or in contact report callbacks.</summary>
        public static float GetJointPosition(this ref global::PhysX.PxArticulationJointReducedCoordinate @self_, global::PhysX.PxArticulationAxis @axis)
        {
            return NativeMethods.PxArticulationJointReducedCoordinate_getJointPosition((global::PhysX.PxArticulationJointReducedCoordinate*)Unsafe.AsPointer(ref @self_), @axis);
        }

        /// <summary>Sets the joint velocity for the given axis.  - For performance, prefer PxArticulationCache::jointVelocity to set joint velocities in a batch articulation state update. - Use PxArticulationReducedCoordinate::updateKinematic after all state updates to the articulation via non-cache API such as this method, in order to update link states for the next simulation frame or querying.  This call is not allowed while the simulation is running.</summary>
        public static void SetJointVelocityMut(this ref global::PhysX.PxArticulationJointReducedCoordinate @self_, global::PhysX.PxArticulationAxis @axis, float @jointVel)
        {
            NativeMethods.PxArticulationJointReducedCoordinate_setJointVelocity_mut((global::PhysX.PxArticulationJointReducedCoordinate*)Unsafe.AsPointer(ref @self_), @axis, @jointVel);
        }

        /// <summary>Gets the joint velocity for the given axis.  For performance, prefer PxArticulationCache::jointVelocity to get joint velocities in a batch query.  The joint velocity in linear units (equivalent to scene units) per second for a translational axis, or radians per second for a rotational axis.  This call is not allowed while the simulation is running except in a split simulation during [`PxScene::collide`]() and up to #PxScene::advance(), and in PxContactModifyCallback or in contact report callbacks.</summary>
        public static float GetJointVelocity(this ref global::PhysX.PxArticulationJointReducedCoordinate @self_, global::PhysX.PxArticulationAxis @axis)
        {
            return NativeMethods.PxArticulationJointReducedCoordinate_getJointVelocity((global::PhysX.PxArticulationJointReducedCoordinate*)Unsafe.AsPointer(ref @self_), @axis);
        }

        /// <summary>Returns the string name of the dynamic type.  The string name.</summary>
        public static byte* GetConcreteTypeName(this ref global::PhysX.PxArticulationJointReducedCoordinate @self_)
        {
            return NativeMethods.PxArticulationJointReducedCoordinate_getConcreteTypeName((global::PhysX.PxArticulationJointReducedCoordinate*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxShape(37)

        /// <summary>Decrements the reference count of a shape and releases it if the new reference count is zero.  Note that in releases prior to PhysX 3.3 this method did not have reference counting semantics and was used to destroy a shape created with PxActor::createShape(). In PhysX 3.3 and above, this usage is deprecated, instead, use PxRigidActor::detachShape() to detach a shape from an actor. If the shape to be detached was created with PxActor::createShape(), the actor holds the only counted reference, and so when the shape is detached it will also be destroyed.</summary>
        public static void ReleaseMut(this ref global::PhysX.PxShape @self_)
        {
            NativeMethods.PxShape_release_mut((global::PhysX.PxShape*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Adjust the geometry of the shape.  The type of the passed in geometry must match the geometry type of the shape.  It is not allowed to change the geometry type of a shape.  This function does not guarantee correct/continuous behavior when objects are resting on top of old or new geometry.</summary>
        public static void SetGeometryMut(this ref global::PhysX.PxShape @self_, global::PhysX.PxGeometry* @geometry)
        {
            NativeMethods.PxShape_setGeometry_mut((global::PhysX.PxShape*)Unsafe.AsPointer(ref @self_), @geometry);
        }

        /// <summary>Retrieve a reference to the shape's geometry.  The returned reference has the same lifetime as the PxShape it comes from.  Reference to internal PxGeometry object.</summary>
        public static global::PhysX.PxGeometry* GetGeometry(this ref global::PhysX.PxShape @self_)
        {
            return NativeMethods.PxShape_getGeometry((global::PhysX.PxShape*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Retrieves the actor which this shape is associated with.  The actor this shape is associated with, if it is an exclusive shape, else NULL</summary>
        public static global::PhysX.PxRigidActor* GetActor(this ref global::PhysX.PxShape @self_)
        {
            return NativeMethods.PxShape_getActor((global::PhysX.PxShape*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Sets the pose of the shape in actor space, i.e. relative to the actors to which they are attached.  This transformation is identity by default.  The local pose is an attribute of the shape, and so will apply to all actors to which the shape is attached.  Sleeping: Does NOT wake the associated actor up automatically.  Note: Does not automatically update the inertia properties of the owning actor (if applicable); use the PhysX extensions method [`PxRigidBodyExt::updateMassAndInertia`]() to do this.  Default: the identity transform</summary>
        public static void SetLocalPoseMut(this ref global::PhysX.PxShape @self_, global::PhysX.PxTransform* @pose)
        {
            NativeMethods.PxShape_setLocalPose_mut((global::PhysX.PxShape*)Unsafe.AsPointer(ref @self_), @pose);
        }

        /// <summary>Retrieves the pose of the shape in actor space, i.e. relative to the actor they are owned by.  This transformation is identity by default.  Pose of shape relative to the actor's frame.</summary>
        public static global::PhysX.PxTransform GetLocalPose(this ref global::PhysX.PxShape @self_)
        {
            return NativeMethods.PxShape_getLocalPose((global::PhysX.PxShape*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Sets the user definable collision filter data.  Sleeping: Does wake up the actor if the filter data change causes a formerly suppressed collision pair to be enabled.  Default: (0,0,0,0)</summary>
        public static void SetSimulationFilterDataMut(this ref global::PhysX.PxShape @self_, global::PhysX.PxFilterData* @data)
        {
            NativeMethods.PxShape_setSimulationFilterData_mut((global::PhysX.PxShape*)Unsafe.AsPointer(ref @self_), @data);
        }

        /// <summary>Retrieves the shape's collision filter data.</summary>
        public static global::PhysX.PxFilterData GetSimulationFilterData(this ref global::PhysX.PxShape @self_)
        {
            return NativeMethods.PxShape_getSimulationFilterData((global::PhysX.PxShape*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Sets the user definable query filter data.  Default: (0,0,0,0)</summary>
        public static void SetQueryFilterDataMut(this ref global::PhysX.PxShape @self_, global::PhysX.PxFilterData* @data)
        {
            NativeMethods.PxShape_setQueryFilterData_mut((global::PhysX.PxShape*)Unsafe.AsPointer(ref @self_), @data);
        }

        /// <summary>Retrieves the shape's Query filter data.</summary>
        public static global::PhysX.PxFilterData GetQueryFilterData(this ref global::PhysX.PxShape @self_)
        {
            return NativeMethods.PxShape_getQueryFilterData((global::PhysX.PxShape*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Assigns material(s) to the shape. Will remove existing materials from the shape.  Sleeping: Does NOT wake the associated actor up automatically.</summary>
        public static void SetMaterialsMut(this ref global::PhysX.PxShape @self_, global::PhysX.PxMaterial** @materials, ushort @materialCount)
        {
            NativeMethods.PxShape_setMaterials_mut((global::PhysX.PxShape*)Unsafe.AsPointer(ref @self_), @materials, @materialCount);
        }

        /// <summary>Returns the number of materials assigned to the shape.  You can use [`getMaterials`]() to retrieve the material pointers.  Number of materials associated with this shape.</summary>
        public static ushort GetNbMaterials(this ref global::PhysX.PxShape @self_)
        {
            return NativeMethods.PxShape_getNbMaterials((global::PhysX.PxShape*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Retrieve all the material pointers associated with the shape.  You can retrieve the number of material pointers by calling [`getNbMaterials`]()  Note: The returned data may contain invalid pointers if you release materials using [`PxMaterial::release`]().  Number of material pointers written to the buffer.</summary>
        public static uint GetMaterials(this ref global::PhysX.PxShape @self_, global::PhysX.PxMaterial** @userBuffer, uint @bufferSize, uint @startIndex)
        {
            return NativeMethods.PxShape_getMaterials((global::PhysX.PxShape*)Unsafe.AsPointer(ref @self_), @userBuffer, @bufferSize, @startIndex);
        }

        /// <summary>Retrieve material from given triangle index.  The input index is the internal triangle index as used inside the SDK. This is the index returned to users by various SDK functions such as raycasts.  This function is only useful for triangle meshes or heightfields, which have per-triangle materials. For other shapes or SDF triangle meshes, the function returns the single material associated with the shape, regardless of the index.  Material from input triangle  If faceIndex value of 0xFFFFffff is passed as an input for mesh and heightfield shapes, this function will issue a warning and return NULL.  Scene queries set the value of PxQueryHit::faceIndex to 0xFFFFffff whenever it is undefined or does not apply.</summary>
        public static global::PhysX.PxBaseMaterial* GetMaterialFromInternalFaceIndex(this ref global::PhysX.PxShape @self_, uint @faceIndex)
        {
            return NativeMethods.PxShape_getMaterialFromInternalFaceIndex((global::PhysX.PxShape*)Unsafe.AsPointer(ref @self_), @faceIndex);
        }

        /// <summary>Sets the contact offset.  Shapes whose distance is less than the sum of their contactOffset values will generate contacts. The contact offset must be positive and greater than the rest offset. Having a contactOffset greater than than the restOffset allows the collision detection system to predictively enforce the contact constraint even when the objects are slightly separated. This prevents jitter that would occur if the constraint were enforced only when shapes were within the rest distance.  Default: 0.02f * PxTolerancesScale::length  Sleeping: Does NOT wake the associated actor up automatically.</summary>
        public static void SetContactOffsetMut(this ref global::PhysX.PxShape @self_, float @contactOffset)
        {
            NativeMethods.PxShape_setContactOffset_mut((global::PhysX.PxShape*)Unsafe.AsPointer(ref @self_), @contactOffset);
        }

        /// <summary>Retrieves the contact offset.  The contact offset of the shape.</summary>
        public static float GetContactOffset(this ref global::PhysX.PxShape @self_)
        {
            return NativeMethods.PxShape_getContactOffset((global::PhysX.PxShape*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Sets the rest offset.  Two shapes will come to rest at a distance equal to the sum of their restOffset values. If the restOffset is 0, they should converge to touching exactly.  Having a restOffset greater than zero is useful to have objects slide smoothly, so that they do not get hung up on irregularities of each others' surfaces.  Default: 0.0f  Sleeping: Does NOT wake the associated actor up automatically.</summary>
        public static void SetRestOffsetMut(this ref global::PhysX.PxShape @self_, float @restOffset)
        {
            NativeMethods.PxShape_setRestOffset_mut((global::PhysX.PxShape*)Unsafe.AsPointer(ref @self_), @restOffset);
        }

        /// <summary>Retrieves the rest offset.  The rest offset of the shape.</summary>
        public static float GetRestOffset(this ref global::PhysX.PxShape @self_)
        {
            return NativeMethods.PxShape_getRestOffset((global::PhysX.PxShape*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Sets the density used to interact with fluids.  To be physically accurate, the density of a rigid body should be computed as its mass divided by its volume. To simplify tuning the interaction of fluid and rigid bodies, the density for fluid can differ from the real density. This allows to create floating bodies, even if they are supposed to sink with their mass and volume.  Default: 800.0f</summary>
        public static void SetDensityForFluidMut(this ref global::PhysX.PxShape @self_, float @densityForFluid)
        {
            NativeMethods.PxShape_setDensityForFluid_mut((global::PhysX.PxShape*)Unsafe.AsPointer(ref @self_), @densityForFluid);
        }

        /// <summary>Retrieves the density used to interact with fluids.  The density of the body when interacting with fluid.</summary>
        public static float GetDensityForFluid(this ref global::PhysX.PxShape @self_)
        {
            return NativeMethods.PxShape_getDensityForFluid((global::PhysX.PxShape*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Sets torsional patch radius.  This defines the radius of the contact patch used to apply torsional friction. If the radius is 0, no torsional friction will be applied. If the radius is &gt; 0, some torsional friction will be applied. This is proportional to the penetration depth so, if the shapes are separated or penetration is zero, no torsional friction will be applied. It is used to approximate rotational friction introduced by the compression of contacting surfaces.  Default: 0.0</summary>
        public static void SetTorsionalPatchRadiusMut(this ref global::PhysX.PxShape @self_, float @radius)
        {
            NativeMethods.PxShape_setTorsionalPatchRadius_mut((global::PhysX.PxShape*)Unsafe.AsPointer(ref @self_), @radius);
        }

        /// <summary>Gets torsional patch radius.  This defines the radius of the contact patch used to apply torsional friction. If the radius is 0, no torsional friction will be applied. If the radius is &gt; 0, some torsional friction will be applied. This is proportional to the penetration depth so, if the shapes are separated or penetration is zero, no torsional friction will be applied. It is used to approximate rotational friction introduced by the compression of contacting surfaces.  The torsional patch radius of the shape.</summary>
        public static float GetTorsionalPatchRadius(this ref global::PhysX.PxShape @self_)
        {
            return NativeMethods.PxShape_getTorsionalPatchRadius((global::PhysX.PxShape*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Sets minimum torsional patch radius.  This defines the minimum radius of the contact patch used to apply torsional friction. If the radius is 0, the amount of torsional friction that will be applied will be entirely dependent on the value of torsionalPatchRadius.  If the radius is &gt; 0, some torsional friction will be applied regardless of the value of torsionalPatchRadius or the amount of penetration.  Default: 0.0</summary>
        public static void SetMinTorsionalPatchRadiusMut(this ref global::PhysX.PxShape @self_, float @radius)
        {
            NativeMethods.PxShape_setMinTorsionalPatchRadius_mut((global::PhysX.PxShape*)Unsafe.AsPointer(ref @self_), @radius);
        }

        /// <summary>Gets minimum torsional patch radius.  This defines the minimum radius of the contact patch used to apply torsional friction. If the radius is 0, the amount of torsional friction that will be applied will be entirely dependent on the value of torsionalPatchRadius.  If the radius is &gt; 0, some torsional friction will be applied regardless of the value of torsionalPatchRadius or the amount of penetration.  The minimum torsional patch radius of the shape.</summary>
        public static float GetMinTorsionalPatchRadius(this ref global::PhysX.PxShape @self_)
        {
            return NativeMethods.PxShape_getMinTorsionalPatchRadius((global::PhysX.PxShape*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Sets shape flags  Sleeping: Does NOT wake the associated actor up automatically.  Default: PxShapeFlag::eVISUALIZATION | PxShapeFlag::eSIMULATION_SHAPE | PxShapeFlag::eSCENE_QUERY_SHAPE</summary>
        public static void SetFlagMut(this ref global::PhysX.PxShape @self_, global::PhysX.PxShapeFlag @flag, bool @value)
        {
            NativeMethods.PxShape_setFlag_mut((global::PhysX.PxShape*)Unsafe.AsPointer(ref @self_), @flag, @value);
        }

        /// <summary>Sets shape flags</summary>
        public static void SetFlagsMut(this ref global::PhysX.PxShape @self_, global::PhysX.PxShapeFlags @inFlags)
        {
            NativeMethods.PxShape_setFlags_mut((global::PhysX.PxShape*)Unsafe.AsPointer(ref @self_), @inFlags);
        }

        /// <summary>Retrieves shape flags.  The values of the shape flags.</summary>
        public static global::PhysX.PxShapeFlags GetFlags(this ref global::PhysX.PxShape @self_)
        {
            return NativeMethods.PxShape_getFlags((global::PhysX.PxShape*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Returns true if the shape is exclusive to an actor.</summary>
        public static bool IsExclusive(this ref global::PhysX.PxShape @self_)
        {
            return NativeMethods.PxShape_isExclusive((global::PhysX.PxShape*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Sets a name string for the object that can be retrieved with [`getName`]().  This is for debugging and is not used by the SDK. The string is not copied by the SDK, only the pointer is stored.  Default: NULL</summary>
        public static void SetNameMut(this ref global::PhysX.PxShape @self_, byte* @name)
        {
            NativeMethods.PxShape_setName_mut((global::PhysX.PxShape*)Unsafe.AsPointer(ref @self_), @name);
        }

        /// <summary>retrieves the name string set with setName().  The name associated with the shape.</summary>
        public static byte* GetName(this ref global::PhysX.PxShape @self_)
        {
            return NativeMethods.PxShape_getName((global::PhysX.PxShape*)Unsafe.AsPointer(ref @self_));
        }

        public static byte* GetConcreteTypeName(this ref global::PhysX.PxShape @self_)
        {
            return NativeMethods.PxShape_getConcreteTypeName((global::PhysX.PxShape*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>constructor to set properties</summary>
        public static global::PhysX.PxQueryCache QueryCacheNew1(this ref global::PhysX.PxShape @s, uint @findex)
        {
            return NativeMethods.PxQueryCache_new_1((global::PhysX.PxShape*)Unsafe.AsPointer(ref @s), @findex);
        }

        /// <summary>Retrieves the world space pose of the shape.  Global pose of shape.</summary>
        public static global::PhysX.PxTransform ExtGetGlobalPose(this ref global::PhysX.PxShape @shape, global::PhysX.PxRigidActor* @actor)
        {
            return NativeMethods.PxShapeExt_getGlobalPose((global::PhysX.PxShape*)Unsafe.AsPointer(ref @shape), @actor);
        }

        /// <summary>Raycast test against the shape.  Number of hits between the ray and the shape</summary>
        public static uint ExtRaycast(this ref global::PhysX.PxShape @shape, global::PhysX.PxRigidActor* @actor, global::PhysX.PxVec3* @rayOrigin, global::PhysX.PxVec3* @rayDir, float @maxDist, global::PhysX.PxHitFlags @hitFlags, uint @maxHits, global::PhysX.PxRaycastHit* @rayHits)
        {
            return NativeMethods.PxShapeExt_raycast((global::PhysX.PxShape*)Unsafe.AsPointer(ref @shape), @actor, @rayOrigin, @rayDir, @maxDist, @hitFlags, @maxHits, @rayHits);
        }

        /// <summary>Test overlap between the shape and a geometry object  True if the shape overlaps the geometry object</summary>
        public static bool ExtOverlap(this ref global::PhysX.PxShape @shape, global::PhysX.PxRigidActor* @actor, global::PhysX.PxGeometry* @otherGeom, global::PhysX.PxTransform* @otherGeomPose)
        {
            return NativeMethods.PxShapeExt_overlap((global::PhysX.PxShape*)Unsafe.AsPointer(ref @shape), @actor, @otherGeom, @otherGeomPose);
        }

        /// <summary>Sweep a geometry object against the shape.  Currently only box, sphere, capsule and convex mesh shapes are supported, i.e. the swept geometry object must be one of those types.  True if the swept geometry object hits the shape</summary>
        public static bool ExtSweep(this ref global::PhysX.PxShape @shape, global::PhysX.PxRigidActor* @actor, global::PhysX.PxVec3* @unitDir, float @distance, global::PhysX.PxGeometry* @otherGeom, global::PhysX.PxTransform* @otherGeomPose, global::PhysX.PxSweepHit* @sweepHit, global::PhysX.PxHitFlags @hitFlags)
        {
            return NativeMethods.PxShapeExt_sweep((global::PhysX.PxShape*)Unsafe.AsPointer(ref @shape), @actor, @unitDir, @distance, @otherGeom, @otherGeomPose, @sweepHit, @hitFlags);
        }

        /// <summary>Retrieves the axis aligned bounding box enclosing the shape.  The shape's bounding box.</summary>
        public static global::PhysX.PxBounds3 ExtGetWorldBounds(this ref global::PhysX.PxShape @shape, global::PhysX.PxRigidActor* @actor, float @inflation)
        {
            return NativeMethods.PxShapeExt_getWorldBounds((global::PhysX.PxShape*)Unsafe.AsPointer(ref @shape), @actor, @inflation);
        }

        #endregion

        #region PhysX.PxNodeIndex(8)

        public static uint Index(this ref global::PhysX.PxNodeIndex @self_)
        {
            return NativeMethods.PxNodeIndex_index((global::PhysX.PxNodeIndex*)Unsafe.AsPointer(ref @self_));
        }

        public static uint ArticulationLinkId(this ref global::PhysX.PxNodeIndex @self_)
        {
            return NativeMethods.PxNodeIndex_articulationLinkId((global::PhysX.PxNodeIndex*)Unsafe.AsPointer(ref @self_));
        }

        public static uint IsArticulation(this ref global::PhysX.PxNodeIndex @self_)
        {
            return NativeMethods.PxNodeIndex_isArticulation((global::PhysX.PxNodeIndex*)Unsafe.AsPointer(ref @self_));
        }

        public static bool IsStaticBody(this ref global::PhysX.PxNodeIndex @self_)
        {
            return NativeMethods.PxNodeIndex_isStaticBody((global::PhysX.PxNodeIndex*)Unsafe.AsPointer(ref @self_));
        }

        public static bool IsValid(this ref global::PhysX.PxNodeIndex @self_)
        {
            return NativeMethods.PxNodeIndex_isValid((global::PhysX.PxNodeIndex*)Unsafe.AsPointer(ref @self_));
        }

        public static void SetIndicesMut(this ref global::PhysX.PxNodeIndex @self_, uint @index, uint @articLinkId)
        {
            NativeMethods.PxNodeIndex_setIndices_mut((global::PhysX.PxNodeIndex*)Unsafe.AsPointer(ref @self_), @index, @articLinkId);
        }

        public static void SetIndicesMut1(this ref global::PhysX.PxNodeIndex @self_, uint @index)
        {
            NativeMethods.PxNodeIndex_setIndices_mut_1((global::PhysX.PxNodeIndex*)Unsafe.AsPointer(ref @self_), @index);
        }

        public static ulong GetInd(this ref global::PhysX.PxNodeIndex @self_)
        {
            return NativeMethods.PxNodeIndex_getInd((global::PhysX.PxNodeIndex*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxRigidBody(51)

        /// <summary>Sets the pose of the center of mass relative to the actor.  Changing this transform will not move the actor in the world!  Setting an unrealistic center of mass which is a long way from the body can make it difficult for the SDK to solve constraints. Perhaps leading to instability and jittering bodies.  Default: the identity transform</summary>
        public static void SetCMassLocalPoseMut(this ref global::PhysX.PxRigidBody @self_, global::PhysX.PxTransform* @pose)
        {
            NativeMethods.PxRigidBody_setCMassLocalPose_mut((global::PhysX.PxRigidBody*)Unsafe.AsPointer(ref @self_), @pose);
        }

        /// <summary>Retrieves the center of mass pose relative to the actor frame.  The center of mass pose relative to the actor frame.</summary>
        public static global::PhysX.PxTransform GetCMassLocalPose(this ref global::PhysX.PxRigidBody @self_)
        {
            return NativeMethods.PxRigidBody_getCMassLocalPose((global::PhysX.PxRigidBody*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Sets the mass of a dynamic actor.  The mass must be non-negative.  setMass() does not update the inertial properties of the body, to change the inertia tensor use setMassSpaceInertiaTensor() or the PhysX extensions method [`PxRigidBodyExt::updateMassAndInertia`]().  A value of 0 is interpreted as infinite mass.  Values of 0 are not permitted for instances of PxArticulationLink but are permitted for instances of PxRigidDynamic.  Default: 1.0  Sleeping: Does NOT wake the actor up automatically.</summary>
        public static void SetMassMut(this ref global::PhysX.PxRigidBody @self_, float @mass)
        {
            NativeMethods.PxRigidBody_setMass_mut((global::PhysX.PxRigidBody*)Unsafe.AsPointer(ref @self_), @mass);
        }

        /// <summary>Retrieves the mass of the actor.  A value of 0 is interpreted as infinite mass.  The mass of this actor.</summary>
        public static float GetMass(this ref global::PhysX.PxRigidBody @self_)
        {
            return NativeMethods.PxRigidBody_getMass((global::PhysX.PxRigidBody*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Retrieves the inverse mass of the actor.  The inverse mass of this actor.</summary>
        public static float GetInvMass(this ref global::PhysX.PxRigidBody @self_)
        {
            return NativeMethods.PxRigidBody_getInvMass((global::PhysX.PxRigidBody*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Sets the inertia tensor, using a parameter specified in mass space coordinates.  Note that such matrices are diagonal -- the passed vector is the diagonal.  If you have a non diagonal world/actor space inertia tensor(3x3 matrix). Then you need to diagonalize it and set an appropriate mass space transform. See [`setCMassLocalPose`]().  The inertia tensor elements must be non-negative.  A value of 0 in an element is interpreted as infinite inertia along that axis.  Values of 0 are not permitted for instances of PxArticulationLink but are permitted for instances of PxRigidDynamic.  Default: (1.0, 1.0, 1.0)  Sleeping: Does NOT wake the actor up automatically.</summary>
        public static void SetMassSpaceInertiaTensorMut(this ref global::PhysX.PxRigidBody @self_, global::PhysX.PxVec3* @m)
        {
            NativeMethods.PxRigidBody_setMassSpaceInertiaTensor_mut((global::PhysX.PxRigidBody*)Unsafe.AsPointer(ref @self_), @m);
        }

        /// <summary>Retrieves the diagonal inertia tensor of the actor relative to the mass coordinate frame.  This method retrieves a mass frame inertia vector.  The mass space inertia tensor of this actor.  A value of 0 in an element is interpreted as infinite inertia along that axis.</summary>
        public static global::PhysX.PxVec3 GetMassSpaceInertiaTensor(this ref global::PhysX.PxRigidBody @self_)
        {
            return NativeMethods.PxRigidBody_getMassSpaceInertiaTensor((global::PhysX.PxRigidBody*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Retrieves the diagonal inverse inertia tensor of the actor relative to the mass coordinate frame.  This method retrieves a mass frame inverse inertia vector.  A value of 0 in an element is interpreted as infinite inertia along that axis.  The mass space inverse inertia tensor of this actor.</summary>
        public static global::PhysX.PxVec3 GetMassSpaceInvInertiaTensor(this ref global::PhysX.PxRigidBody @self_)
        {
            return NativeMethods.PxRigidBody_getMassSpaceInvInertiaTensor((global::PhysX.PxRigidBody*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Sets the linear damping coefficient.  Zero represents no damping. The damping coefficient must be nonnegative.  Default: 0.0</summary>
        public static void SetLinearDampingMut(this ref global::PhysX.PxRigidBody @self_, float @linDamp)
        {
            NativeMethods.PxRigidBody_setLinearDamping_mut((global::PhysX.PxRigidBody*)Unsafe.AsPointer(ref @self_), @linDamp);
        }

        /// <summary>Retrieves the linear damping coefficient.  The linear damping coefficient associated with this actor.</summary>
        public static float GetLinearDamping(this ref global::PhysX.PxRigidBody @self_)
        {
            return NativeMethods.PxRigidBody_getLinearDamping((global::PhysX.PxRigidBody*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Sets the angular damping coefficient.  Zero represents no damping.  The angular damping coefficient must be nonnegative.  Default: 0.05</summary>
        public static void SetAngularDampingMut(this ref global::PhysX.PxRigidBody @self_, float @angDamp)
        {
            NativeMethods.PxRigidBody_setAngularDamping_mut((global::PhysX.PxRigidBody*)Unsafe.AsPointer(ref @self_), @angDamp);
        }

        /// <summary>Retrieves the angular damping coefficient.  The angular damping coefficient associated with this actor.</summary>
        public static float GetAngularDamping(this ref global::PhysX.PxRigidBody @self_)
        {
            return NativeMethods.PxRigidBody_getAngularDamping((global::PhysX.PxRigidBody*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Retrieves the linear velocity of an actor.  It is not allowed to use this method while the simulation is running (except during PxScene::collide(), in PxContactModifyCallback or in contact report callbacks).  The linear velocity of the actor.</summary>
        public static global::PhysX.PxVec3 GetLinearVelocity(this ref global::PhysX.PxRigidBody @self_)
        {
            return NativeMethods.PxRigidBody_getLinearVelocity((global::PhysX.PxRigidBody*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Retrieves the angular velocity of the actor.  It is not allowed to use this method while the simulation is running (except during PxScene::collide(), in PxContactModifyCallback or in contact report callbacks).  The angular velocity of the actor.</summary>
        public static global::PhysX.PxVec3 GetAngularVelocity(this ref global::PhysX.PxRigidBody @self_)
        {
            return NativeMethods.PxRigidBody_getAngularVelocity((global::PhysX.PxRigidBody*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Lets you set the maximum linear velocity permitted for this actor.  With this function, you can set the  maximum linear velocity permitted for this rigid body. Higher angular velocities are clamped to this value.  Note: The angular velocity is clamped to the set value before the solver, which means that the limit may still be momentarily exceeded.  Default: PX_MAX_F32</summary>
        public static void SetMaxLinearVelocityMut(this ref global::PhysX.PxRigidBody @self_, float @maxLinVel)
        {
            NativeMethods.PxRigidBody_setMaxLinearVelocity_mut((global::PhysX.PxRigidBody*)Unsafe.AsPointer(ref @self_), @maxLinVel);
        }

        /// <summary>Retrieves the maximum angular velocity permitted for this actor.  The maximum allowed angular velocity for this actor.</summary>
        public static float GetMaxLinearVelocity(this ref global::PhysX.PxRigidBody @self_)
        {
            return NativeMethods.PxRigidBody_getMaxLinearVelocity((global::PhysX.PxRigidBody*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Lets you set the maximum angular velocity permitted for this actor.  For various internal computations, very quickly rotating actors introduce error into the simulation, which leads to undesired results.  With this function, you can set the  maximum angular velocity permitted for this rigid body. Higher angular velocities are clamped to this value.  Note: The angular velocity is clamped to the set value before the solver, which means that the limit may still be momentarily exceeded.  Default: 100.0</summary>
        public static void SetMaxAngularVelocityMut(this ref global::PhysX.PxRigidBody @self_, float @maxAngVel)
        {
            NativeMethods.PxRigidBody_setMaxAngularVelocity_mut((global::PhysX.PxRigidBody*)Unsafe.AsPointer(ref @self_), @maxAngVel);
        }

        /// <summary>Retrieves the maximum angular velocity permitted for this actor.  The maximum allowed angular velocity for this actor.</summary>
        public static float GetMaxAngularVelocity(this ref global::PhysX.PxRigidBody @self_)
        {
            return NativeMethods.PxRigidBody_getMaxAngularVelocity((global::PhysX.PxRigidBody*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Applies a force (or impulse) defined in the global coordinate frame to the actor at its center of mass.  This will not induce a torque .  ::PxForceMode determines if the force is to be conventional or impulsive.  Each actor has an acceleration and a velocity change accumulator which are directly modified using the modes PxForceMode::eACCELERATION and PxForceMode::eVELOCITY_CHANGE respectively.  The modes PxForceMode::eFORCE and PxForceMode::eIMPULSE also modify these same accumulators and are just short hand for multiplying the vector parameter by inverse mass and then using PxForceMode::eACCELERATION and PxForceMode::eVELOCITY_CHANGE respectively.  It is invalid to use this method if the actor has not been added to a scene already or if PxActorFlag::eDISABLE_SIMULATION is set.  The force modes PxForceMode::eIMPULSE and PxForceMode::eVELOCITY_CHANGE can not be applied to articulation links.  if this is called on an articulation link, only the link is updated, not the entire articulation.  see [`PxRigidBodyExt::computeVelocityDeltaFromImpulse`] for details of how to compute the change in linear velocity that will arise from the application of an impulsive force, where an impulsive force is applied force multiplied by a timestep.  Sleeping: This call wakes the actor if it is sleeping, and the autowake parameter is true (default) or the force is non-zero.</summary>
        public static void AddForceMut(this ref global::PhysX.PxRigidBody @self_, global::PhysX.PxVec3* @force, global::PhysX.PxForceMode @mode, bool @autowake)
        {
            NativeMethods.PxRigidBody_addForce_mut((global::PhysX.PxRigidBody*)Unsafe.AsPointer(ref @self_), @force, @mode, @autowake);
        }

        /// <summary>Applies an impulsive torque defined in the global coordinate frame to the actor.  ::PxForceMode determines if the torque is to be conventional or impulsive.  Each actor has an angular acceleration and an angular velocity change accumulator which are directly modified using the modes PxForceMode::eACCELERATION and PxForceMode::eVELOCITY_CHANGE respectively.  The modes PxForceMode::eFORCE and PxForceMode::eIMPULSE also modify these same accumulators and are just short hand for multiplying the vector parameter by inverse inertia and then using PxForceMode::eACCELERATION and PxForceMode::eVELOCITY_CHANGE respectively.  It is invalid to use this method if the actor has not been added to a scene already or if PxActorFlag::eDISABLE_SIMULATION is set.  The force modes PxForceMode::eIMPULSE and PxForceMode::eVELOCITY_CHANGE can not be applied to articulation links.  if this called on an articulation link, only the link is updated, not the entire articulation.  see [`PxRigidBodyExt::computeVelocityDeltaFromImpulse`] for details of how to compute the change in angular velocity that will arise from the application of an impulsive torque, where an impulsive torque is an applied torque multiplied by a timestep.  Sleeping: This call wakes the actor if it is sleeping, and the autowake parameter is true (default) or the torque is non-zero.</summary>
        public static void AddTorqueMut(this ref global::PhysX.PxRigidBody @self_, global::PhysX.PxVec3* @torque, global::PhysX.PxForceMode @mode, bool @autowake)
        {
            NativeMethods.PxRigidBody_addTorque_mut((global::PhysX.PxRigidBody*)Unsafe.AsPointer(ref @self_), @torque, @mode, @autowake);
        }

        /// <summary>Clears the accumulated forces (sets the accumulated force back to zero).  Each actor has an acceleration and a velocity change accumulator which are directly modified using the modes PxForceMode::eACCELERATION and PxForceMode::eVELOCITY_CHANGE respectively.  The modes PxForceMode::eFORCE and PxForceMode::eIMPULSE also modify these same accumulators (see PxRigidBody::addForce() for details); therefore the effect of calling clearForce(PxForceMode::eFORCE) is equivalent to calling clearForce(PxForceMode::eACCELERATION), and the effect of calling clearForce(PxForceMode::eIMPULSE) is equivalent to calling clearForce(PxForceMode::eVELOCITY_CHANGE).  ::PxForceMode determines if the cleared force is to be conventional or impulsive.  The force modes PxForceMode::eIMPULSE and PxForceMode::eVELOCITY_CHANGE can not be applied to articulation links.  It is invalid to use this method if the actor has not been added to a scene already or if PxActorFlag::eDISABLE_SIMULATION is set.</summary>
        public static void ClearForceMut(this ref global::PhysX.PxRigidBody @self_, global::PhysX.PxForceMode @mode)
        {
            NativeMethods.PxRigidBody_clearForce_mut((global::PhysX.PxRigidBody*)Unsafe.AsPointer(ref @self_), @mode);
        }

        /// <summary>Clears the impulsive torque defined in the global coordinate frame to the actor.  ::PxForceMode determines if the cleared torque is to be conventional or impulsive.  Each actor has an angular acceleration and a velocity change accumulator which are directly modified using the modes PxForceMode::eACCELERATION and PxForceMode::eVELOCITY_CHANGE respectively.  The modes PxForceMode::eFORCE and PxForceMode::eIMPULSE also modify these same accumulators (see PxRigidBody::addTorque() for details); therefore the effect of calling clearTorque(PxForceMode::eFORCE) is equivalent to calling clearTorque(PxForceMode::eACCELERATION), and the effect of calling clearTorque(PxForceMode::eIMPULSE) is equivalent to calling clearTorque(PxForceMode::eVELOCITY_CHANGE).  The force modes PxForceMode::eIMPULSE and PxForceMode::eVELOCITY_CHANGE can not be applied to articulation links.  It is invalid to use this method if the actor has not been added to a scene already or if PxActorFlag::eDISABLE_SIMULATION is set.</summary>
        public static void ClearTorqueMut(this ref global::PhysX.PxRigidBody @self_, global::PhysX.PxForceMode @mode)
        {
            NativeMethods.PxRigidBody_clearTorque_mut((global::PhysX.PxRigidBody*)Unsafe.AsPointer(ref @self_), @mode);
        }

        /// <summary>Sets the impulsive force and torque defined in the global coordinate frame to the actor.  ::PxForceMode determines if the cleared torque is to be conventional or impulsive.  The force modes PxForceMode::eIMPULSE and PxForceMode::eVELOCITY_CHANGE can not be applied to articulation links.  It is invalid to use this method if the actor has not been added to a scene already or if PxActorFlag::eDISABLE_SIMULATION is set.</summary>
        public static void SetForceAndTorqueMut(this ref global::PhysX.PxRigidBody @self_, global::PhysX.PxVec3* @force, global::PhysX.PxVec3* @torque, global::PhysX.PxForceMode @mode)
        {
            NativeMethods.PxRigidBody_setForceAndTorque_mut((global::PhysX.PxRigidBody*)Unsafe.AsPointer(ref @self_), @force, @torque, @mode);
        }

        /// <summary>Raises or clears a particular rigid body flag.  See the list of flags [`PxRigidBodyFlag`]  Default: no flags are set  Sleeping: Does NOT wake the actor up automatically.</summary>
        public static void SetRigidBodyFlagMut(this ref global::PhysX.PxRigidBody @self_, global::PhysX.PxRigidBodyFlag @flag, bool @value)
        {
            NativeMethods.PxRigidBody_setRigidBodyFlag_mut((global::PhysX.PxRigidBody*)Unsafe.AsPointer(ref @self_), @flag, @value);
        }

        public static void SetRigidBodyFlagsMut(this ref global::PhysX.PxRigidBody @self_, global::PhysX.PxRigidBodyFlags @inFlags)
        {
            NativeMethods.PxRigidBody_setRigidBodyFlags_mut((global::PhysX.PxRigidBody*)Unsafe.AsPointer(ref @self_), @inFlags);
        }

        /// <summary>Reads the PxRigidBody flags.  See the list of flags [`PxRigidBodyFlag`]  The values of the PxRigidBody flags.</summary>
        public static global::PhysX.PxRigidBodyFlags GetRigidBodyFlags(this ref global::PhysX.PxRigidBody @self_)
        {
            return NativeMethods.PxRigidBody_getRigidBodyFlags((global::PhysX.PxRigidBody*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Sets the CCD minimum advance coefficient.  The CCD minimum advance coefficient is a value in the range [0, 1] that is used to control the minimum amount of time a body is integrated when it has a CCD contact. The actual minimum amount of time that is integrated depends on various properties, including the relative speed and collision shapes of the bodies involved in the contact. From these properties, a numeric value is calculated that determines the maximum distance (and therefore maximum time) which these bodies could be integrated forwards that would ensure that these bodies did not pass through each-other. This value is then scaled by CCD minimum advance coefficient to determine the amount of time that will be consumed in the CCD pass.  Things to consider: A large value (approaching 1) ensures that the objects will always advance some time. However, larger values increase the chances of objects gently drifting through each-other in scenes which the constraint solver can't converge, e.g. scenes where an object is being dragged through a wall with a constraint. A value of 0 ensures that the pair of objects stop at the exact time-of-impact and will not gently drift through each-other. However, with very small/thin objects initially in contact, this can lead to a large amount of time being dropped and increases the chances of jamming. Jamming occurs when the an object is persistently in contact with an object such that the time-of-impact is 0, which results in no time being advanced for those objects in that CCD pass.  The chances of jamming can be reduced by increasing the number of CCD mass</summary>
        public static void SetMinCCDAdvanceCoefficientMut(this ref global::PhysX.PxRigidBody @self_, float @advanceCoefficient)
        {
            NativeMethods.PxRigidBody_setMinCCDAdvanceCoefficient_mut((global::PhysX.PxRigidBody*)Unsafe.AsPointer(ref @self_), @advanceCoefficient);
        }

        /// <summary>Gets the CCD minimum advance coefficient.  The value of the CCD min advance coefficient.</summary>
        public static float GetMinCCDAdvanceCoefficient(this ref global::PhysX.PxRigidBody @self_)
        {
            return NativeMethods.PxRigidBody_getMinCCDAdvanceCoefficient((global::PhysX.PxRigidBody*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Sets the maximum depenetration velocity permitted to be introduced by the solver. This value controls how much velocity the solver can introduce to correct for penetrations in contacts.</summary>
        public static void SetMaxDepenetrationVelocityMut(this ref global::PhysX.PxRigidBody @self_, float @biasClamp)
        {
            NativeMethods.PxRigidBody_setMaxDepenetrationVelocity_mut((global::PhysX.PxRigidBody*)Unsafe.AsPointer(ref @self_), @biasClamp);
        }

        /// <summary>Returns the maximum depenetration velocity the solver is permitted to introduced. This value controls how much velocity the solver can introduce to correct for penetrations in contacts.  The maximum penetration bias applied by the solver.</summary>
        public static float GetMaxDepenetrationVelocity(this ref global::PhysX.PxRigidBody @self_)
        {
            return NativeMethods.PxRigidBody_getMaxDepenetrationVelocity((global::PhysX.PxRigidBody*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Sets a limit on the impulse that may be applied at a contact. The maximum impulse at a contact between two dynamic or kinematic bodies will be the minimum of the two limit values. For a collision between a static and a dynamic body, the impulse is limited by the value for the dynamic body.</summary>
        public static void SetMaxContactImpulseMut(this ref global::PhysX.PxRigidBody @self_, float @maxImpulse)
        {
            NativeMethods.PxRigidBody_setMaxContactImpulse_mut((global::PhysX.PxRigidBody*)Unsafe.AsPointer(ref @self_), @maxImpulse);
        }

        /// <summary>Returns the maximum impulse that may be applied at a contact.  The maximum impulse that may be applied at a contact</summary>
        public static float GetMaxContactImpulse(this ref global::PhysX.PxRigidBody @self_)
        {
            return NativeMethods.PxRigidBody_getMaxContactImpulse((global::PhysX.PxRigidBody*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Sets a distance scale whereby the angular influence of a contact on the normal constraint in a contact is zeroed if normal.cross(offset) falls below this tolerance. Rather than acting as an absolute value, this tolerance is scaled by the ratio rXn.dot(angVel)/normal.dot(linVel) such that contacts that have relatively larger angular velocity than linear normal velocity (e.g. rolling wheels) achieve larger slop values as the angular velocity increases.</summary>
        public static void SetContactSlopCoefficientMut(this ref global::PhysX.PxRigidBody @self_, float @slopCoefficient)
        {
            NativeMethods.PxRigidBody_setContactSlopCoefficient_mut((global::PhysX.PxRigidBody*)Unsafe.AsPointer(ref @self_), @slopCoefficient);
        }

        /// <summary>Returns the contact slop coefficient.  The contact slop coefficient.</summary>
        public static float GetContactSlopCoefficient(this ref global::PhysX.PxRigidBody @self_)
        {
            return NativeMethods.PxRigidBody_getContactSlopCoefficient((global::PhysX.PxRigidBody*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Returns the island node index  The island node index.</summary>
        public static global::PhysX.PxNodeIndex GetInternalIslandNodeIndex(this ref global::PhysX.PxRigidBody @self_)
        {
            return NativeMethods.PxRigidBody_getInternalIslandNodeIndex((global::PhysX.PxRigidBody*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Computation of mass properties for a rigid body actor  To simulate a dynamic rigid actor, the SDK needs a mass and an inertia tensor.  This method offers functionality to compute the necessary mass and inertia properties based on the shapes declared in the PxRigidBody descriptor and some additionally specified parameters. For each shape, the shape geometry, the shape positioning within the actor and the specified shape density are used to compute the body's mass and inertia properties.  Shapes without PxShapeFlag::eSIMULATION_SHAPE set are ignored unless includeNonSimShapes is true. Shapes with plane, triangle mesh or heightfield geometry and PxShapeFlag::eSIMULATION_SHAPE set are not allowed for PxRigidBody collision.  This method will set the mass, center of mass, and inertia tensor  if no collision shapes are found, the inertia tensor is set to (1,1,1) and the mass to 1  if massLocalPose is non-NULL, the rigid body's center of mass parameter  will be set to the user provided value (massLocalPose) and the inertia tensor will be resolved at that point.  If all shapes of the actor have the same density then the overloaded method updateMassAndInertia() with a single density parameter can be used instead.  Boolean. True on success else false.</summary>
        public static bool ExtUpdateMassAndInertia(this ref global::PhysX.PxRigidBody @body, float* @shapeDensities, uint @shapeDensityCount, global::PhysX.PxVec3* @massLocalPose, bool @includeNonSimShapes)
        {
            return NativeMethods.PxRigidBodyExt_updateMassAndInertia((global::PhysX.PxRigidBody*)Unsafe.AsPointer(ref @body), @shapeDensities, @shapeDensityCount, @massLocalPose, @includeNonSimShapes);
        }

        /// <summary>Computation of mass properties for a rigid body actor  See previous method for details.  Boolean. True on success else false.</summary>
        public static bool ExtUpdateMassAndInertia1(this ref global::PhysX.PxRigidBody @body, float @density, global::PhysX.PxVec3* @massLocalPose, bool @includeNonSimShapes)
        {
            return NativeMethods.PxRigidBodyExt_updateMassAndInertia_1((global::PhysX.PxRigidBody*)Unsafe.AsPointer(ref @body), @density, @massLocalPose, @includeNonSimShapes);
        }

        /// <summary>Computation of mass properties for a rigid body actor  This method sets the mass, inertia and center of mass of a rigid body. The mass is set to the sum of all user-supplied shape mass values, and the inertia and center of mass are computed according to the rigid body's shapes and the per shape mass input values.  If no collision shapes are found, the inertia tensor is set to (1,1,1)  If a single mass value should be used for the actor as a whole then the overloaded method setMassAndUpdateInertia() with a single mass parameter can be used instead.  Boolean. True on success else false.</summary>
        public static bool ExtSetMassAndUpdateInertia(this ref global::PhysX.PxRigidBody @body, float* @shapeMasses, uint @shapeMassCount, global::PhysX.PxVec3* @massLocalPose, bool @includeNonSimShapes)
        {
            return NativeMethods.PxRigidBodyExt_setMassAndUpdateInertia((global::PhysX.PxRigidBody*)Unsafe.AsPointer(ref @body), @shapeMasses, @shapeMassCount, @massLocalPose, @includeNonSimShapes);
        }

        /// <summary>Computation of mass properties for a rigid body actor  This method sets the mass, inertia and center of mass of a rigid body. The mass is set to the user-supplied value, and the inertia and center of mass are computed according to the rigid body's shapes and the input mass.  If no collision shapes are found, the inertia tensor is set to (1,1,1)  Boolean. True on success else false.</summary>
        public static bool ExtSetMassAndUpdateInertia1(this ref global::PhysX.PxRigidBody @body, float @mass, global::PhysX.PxVec3* @massLocalPose, bool @includeNonSimShapes)
        {
            return NativeMethods.PxRigidBodyExt_setMassAndUpdateInertia_1((global::PhysX.PxRigidBody*)Unsafe.AsPointer(ref @body), @mass, @massLocalPose, @includeNonSimShapes);
        }

        /// <summary>Applies a force (or impulse) defined in the global coordinate frame, acting at a particular point in global coordinates, to the actor.  Note that if the force does not act along the center of mass of the actor, this will also add the corresponding torque. Because forces are reset at the end of every timestep, you can maintain a total external force on an object by calling this once every frame.  if this call is used to apply a force or impulse to an articulation link, only the link is updated, not the entire articulation  ::PxForceMode determines if the force is to be conventional or impulsive. Only eFORCE and eIMPULSE are supported, as the force required to produce a given velocity change or acceleration is underdetermined given only the desired change at a given point.  Sleeping: This call wakes the actor if it is sleeping and the wakeup parameter is true (default).</summary>
        public static void ExtAddForceAtPos(this ref global::PhysX.PxRigidBody @body, global::PhysX.PxVec3* @force, global::PhysX.PxVec3* @pos, global::PhysX.PxForceMode @mode, bool @wakeup)
        {
            NativeMethods.PxRigidBodyExt_addForceAtPos((global::PhysX.PxRigidBody*)Unsafe.AsPointer(ref @body), @force, @pos, @mode, @wakeup);
        }

        /// <summary>Applies a force (or impulse) defined in the global coordinate frame, acting at a particular point in local coordinates, to the actor.  Note that if the force does not act along the center of mass of the actor, this will also add the corresponding torque. Because forces are reset at the end of every timestep, you can maintain a total external force on an object by calling this once every frame.  if this call is used to apply a force or impulse to an articulation link, only the link is updated, not the entire articulation  ::PxForceMode determines if the force is to be conventional or impulsive. Only eFORCE and eIMPULSE are supported, as the force required to produce a given velocity change or acceleration is underdetermined given only the desired change at a given point.  Sleeping: This call wakes the actor if it is sleeping and the wakeup parameter is true (default).</summary>
        public static void ExtAddForceAtLocalPos(this ref global::PhysX.PxRigidBody @body, global::PhysX.PxVec3* @force, global::PhysX.PxVec3* @pos, global::PhysX.PxForceMode @mode, bool @wakeup)
        {
            NativeMethods.PxRigidBodyExt_addForceAtLocalPos((global::PhysX.PxRigidBody*)Unsafe.AsPointer(ref @body), @force, @pos, @mode, @wakeup);
        }

        /// <summary>Applies a force (or impulse) defined in the actor local coordinate frame, acting at a particular point in global coordinates, to the actor.  Note that if the force does not act along the center of mass of the actor, this will also add the corresponding torque. Because forces are reset at the end of every timestep, you can maintain a total external force on an object by calling this once every frame.  if this call is used to apply a force or impulse to an articulation link, only the link is updated, not the entire articulation  ::PxForceMode determines if the force is to be conventional or impulsive. Only eFORCE and eIMPULSE are supported, as the force required to produce a given velocity change or acceleration is underdetermined given only the desired change at a given point.  Sleeping: This call wakes the actor if it is sleeping and the wakeup parameter is true (default).</summary>
        public static void ExtAddLocalForceAtPos(this ref global::PhysX.PxRigidBody @body, global::PhysX.PxVec3* @force, global::PhysX.PxVec3* @pos, global::PhysX.PxForceMode @mode, bool @wakeup)
        {
            NativeMethods.PxRigidBodyExt_addLocalForceAtPos((global::PhysX.PxRigidBody*)Unsafe.AsPointer(ref @body), @force, @pos, @mode, @wakeup);
        }

        /// <summary>Applies a force (or impulse) defined in the actor local coordinate frame, acting at a particular point in local coordinates, to the actor.  Note that if the force does not act along the center of mass of the actor, this will also add the corresponding torque. Because forces are reset at the end of every timestep, you can maintain a total external force on an object by calling this once every frame.  if this call is used to apply a force or impulse to an articulation link, only the link is updated, not the entire articulation  ::PxForceMode determines if the force is to be conventional or impulsive. Only eFORCE and eIMPULSE are supported, as the force required to produce a given velocity change or acceleration is underdetermined given only the desired change at a given point.  Sleeping: This call wakes the actor if it is sleeping and the wakeup parameter is true (default).</summary>
        public static void ExtAddLocalForceAtLocalPos(this ref global::PhysX.PxRigidBody @body, global::PhysX.PxVec3* @force, global::PhysX.PxVec3* @pos, global::PhysX.PxForceMode @mode, bool @wakeup)
        {
            NativeMethods.PxRigidBodyExt_addLocalForceAtLocalPos((global::PhysX.PxRigidBody*)Unsafe.AsPointer(ref @body), @force, @pos, @mode, @wakeup);
        }

        /// <summary>Computes the velocity of a point given in world coordinates if it were attached to the specified body and moving with it.  The velocity of point in the global frame.</summary>
        public static global::PhysX.PxVec3 ExtGetVelocityAtPos(this ref global::PhysX.PxRigidBody @body, global::PhysX.PxVec3* @pos)
        {
            return NativeMethods.PxRigidBodyExt_getVelocityAtPos((global::PhysX.PxRigidBody*)Unsafe.AsPointer(ref @body), @pos);
        }

        /// <summary>Computes the velocity of a point given in local coordinates if it were attached to the specified body and moving with it.  The velocity of point in the local frame.</summary>
        public static global::PhysX.PxVec3 ExtGetLocalVelocityAtLocalPos(this ref global::PhysX.PxRigidBody @body, global::PhysX.PxVec3* @pos)
        {
            return NativeMethods.PxRigidBodyExt_getLocalVelocityAtLocalPos((global::PhysX.PxRigidBody*)Unsafe.AsPointer(ref @body), @pos);
        }

        /// <summary>Computes the velocity of a point (offset from the origin of the body) given in world coordinates if it were attached to the specified body and moving with it.  The velocity of point (offset from the origin of the body) in the global frame.</summary>
        public static global::PhysX.PxVec3 ExtGetVelocityAtOffset(this ref global::PhysX.PxRigidBody @body, global::PhysX.PxVec3* @pos)
        {
            return NativeMethods.PxRigidBodyExt_getVelocityAtOffset((global::PhysX.PxRigidBody*)Unsafe.AsPointer(ref @body), @pos);
        }

        /// <summary>Compute the change to linear and angular velocity that would occur if an impulsive force and torque were to be applied to a specified rigid body.  The rigid body is left unaffected unless a subsequent independent call is executed that actually applies the computed changes to velocity and angular velocity.  if this call is used to determine the velocity delta for an articulation link, only the mass properties of the link are taken into account.</summary>
        public static void ExtComputeVelocityDeltaFromImpulse(this ref global::PhysX.PxRigidBody @body, global::PhysX.PxVec3* @impulsiveForce, global::PhysX.PxVec3* @impulsiveTorque, global::PhysX.PxVec3* @deltaLinearVelocity, global::PhysX.PxVec3* @deltaAngularVelocity)
        {
            NativeMethods.PxRigidBodyExt_computeVelocityDeltaFromImpulse((global::PhysX.PxRigidBody*)Unsafe.AsPointer(ref @body), @impulsiveForce, @impulsiveTorque, @deltaLinearVelocity, @deltaAngularVelocity);
        }

        /// <summary>Computes the linear and angular velocity change vectors for a given impulse at a world space position taking a mass and inertia scale into account  This function is useful for extracting the respective linear and angular velocity changes from a contact or joint when the mass/inertia ratios have been adjusted.  if this call is used to determine the velocity delta for an articulation link, only the mass properties of the link are taken into account.</summary>
        public static void ExtComputeVelocityDeltaFromImpulse1(this ref global::PhysX.PxRigidBody @body, global::PhysX.PxTransform* @globalPose, global::PhysX.PxVec3* @point, global::PhysX.PxVec3* @impulse, float @invMassScale, float @invInertiaScale, global::PhysX.PxVec3* @deltaLinearVelocity, global::PhysX.PxVec3* @deltaAngularVelocity)
        {
            NativeMethods.PxRigidBodyExt_computeVelocityDeltaFromImpulse_1((global::PhysX.PxRigidBody*)Unsafe.AsPointer(ref @body), @globalPose, @point, @impulse, @invMassScale, @invInertiaScale, @deltaLinearVelocity, @deltaAngularVelocity);
        }

        /// <summary>Computes the linear and angular impulse vectors for a given impulse at a world space position taking a mass and inertia scale into account  This function is useful for extracting the respective linear and angular impulses from a contact or joint when the mass/inertia ratios have been adjusted.</summary>
        public static void ExtComputeLinearAngularImpulse(this ref global::PhysX.PxRigidBody @body, global::PhysX.PxTransform* @globalPose, global::PhysX.PxVec3* @point, global::PhysX.PxVec3* @impulse, float @invMassScale, float @invInertiaScale, global::PhysX.PxVec3* @linearImpulse, global::PhysX.PxVec3* @angularImpulse)
        {
            NativeMethods.PxRigidBodyExt_computeLinearAngularImpulse((global::PhysX.PxRigidBody*)Unsafe.AsPointer(ref @body), @globalPose, @point, @impulse, @invMassScale, @invInertiaScale, @linearImpulse, @angularImpulse);
        }

        /// <summary>Performs a linear sweep through space with the body's geometry objects.  Supported geometries are: box, sphere, capsule, convex. Other geometry types will be ignored.  If eTOUCH is returned from the filter callback, it will trigger an error and the hit will be discarded.  The function sweeps all shapes attached to a given rigid body through space and reports the nearest object in the scene which intersects any of of the shapes swept paths. Information about the closest intersection is written to a [`PxSweepHit`] structure.  True if a blocking hit was found.</summary>
        public static bool ExtLinearSweepSingle(this ref global::PhysX.PxRigidBody @body, global::PhysX.PxScene* @scene, global::PhysX.PxVec3* @unitDir, float @distance, global::PhysX.PxHitFlags @outputFlags, global::PhysX.PxSweepHit* @closestHit, uint* @shapeIndex, global::PhysX.PxQueryFilterData* @filterData, global::PhysX.PxQueryFilterCallback* @filterCall, global::PhysX.PxQueryCache* @cache, float @inflation)
        {
            return NativeMethods.PxRigidBodyExt_linearSweepSingle((global::PhysX.PxRigidBody*)Unsafe.AsPointer(ref @body), @scene, @unitDir, @distance, @outputFlags, @closestHit, @shapeIndex, @filterData, @filterCall, @cache, @inflation);
        }

        /// <summary>Performs a linear sweep through space with the body's geometry objects, returning all overlaps.  Supported geometries are: box, sphere, capsule, convex. Other geometry types will be ignored.  This function sweeps all shapes attached to a given rigid body through space and reports all objects in the scene that intersect any of the shapes' swept paths until there are no more objects to report or a blocking hit is encountered.  the number of touching hits. If overflow is set to true, the results are incomplete. In case of overflow there are also no guarantees that all touching hits returned are closer than the blocking hit.</summary>
        public static uint ExtLinearSweepMultiple(this ref global::PhysX.PxRigidBody @body, global::PhysX.PxScene* @scene, global::PhysX.PxVec3* @unitDir, float @distance, global::PhysX.PxHitFlags @outputFlags, global::PhysX.PxSweepHit* @touchHitBuffer, uint* @touchHitShapeIndices, uint @touchHitBufferSize, global::PhysX.PxSweepHit* @block, int* @blockingShapeIndex, bool* @overflow, global::PhysX.PxQueryFilterData* @filterData, global::PhysX.PxQueryFilterCallback* @filterCall, global::PhysX.PxQueryCache* @cache, float @inflation)
        {
            return NativeMethods.PxRigidBodyExt_linearSweepMultiple((global::PhysX.PxRigidBody*)Unsafe.AsPointer(ref @body), @scene, @unitDir, @distance, @outputFlags, @touchHitBuffer, @touchHitShapeIndices, @touchHitBufferSize, @block, @blockingShapeIndex, @overflow, @filterData, @filterCall, @cache, @inflation);
        }

        #endregion

        #region PhysX.PxArticulationLink(12)

        /// <summary>Releases the link from the articulation.  Only a leaf articulation link can be released.  Releasing a link is not allowed while the articulation link is in a scene. In order to release a link, remove and then re-add the corresponding articulation to the scene.</summary>
        public static void ReleaseMut(this ref global::PhysX.PxArticulationLink @self_)
        {
            NativeMethods.PxArticulationLink_release_mut((global::PhysX.PxArticulationLink*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Gets the articulation that the link is a part of.  The articulation.</summary>
        public static global::PhysX.PxArticulationReducedCoordinate* GetArticulation(this ref global::PhysX.PxArticulationLink @self_)
        {
            return NativeMethods.PxArticulationLink_getArticulation((global::PhysX.PxArticulationLink*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Gets the joint which connects this link to its parent.  The joint connecting the link to the parent. NULL for the root link.</summary>
        public static global::PhysX.PxArticulationJointReducedCoordinate* GetInboundJoint(this ref global::PhysX.PxArticulationLink @self_)
        {
            return NativeMethods.PxArticulationLink_getInboundJoint((global::PhysX.PxArticulationLink*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Gets the number of degrees of freedom of the joint which connects this link to its parent.  - The root link DOF-count is defined to be 0 regardless of PxArticulationFlag::eFIX_BASE. - The return value is only valid for articulations that are in a scene.  The number of degrees of freedom, or 0xFFFFFFFF if the articulation is not in a scene.</summary>
        public static uint GetInboundJointDof(this ref global::PhysX.PxArticulationLink @self_)
        {
            return NativeMethods.PxArticulationLink_getInboundJointDof((global::PhysX.PxArticulationLink*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Gets the number of child links.  The number of child links.</summary>
        public static uint GetNbChildren(this ref global::PhysX.PxArticulationLink @self_)
        {
            return NativeMethods.PxArticulationLink_getNbChildren((global::PhysX.PxArticulationLink*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Gets the low-level link index that may be used to index into members of PxArticulationCache.  The return value is only valid for articulations that are in a scene.  The low-level index, or 0xFFFFFFFF if the articulation is not in a scene.</summary>
        public static uint GetLinkIndex(this ref global::PhysX.PxArticulationLink @self_)
        {
            return NativeMethods.PxArticulationLink_getLinkIndex((global::PhysX.PxArticulationLink*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Retrieves the child links.  The number of articulation links written to the buffer.</summary>
        public static uint GetChildren(this ref global::PhysX.PxArticulationLink @self_, global::PhysX.PxArticulationLink** @userBuffer, uint @bufferSize, uint @startIndex)
        {
            return NativeMethods.PxArticulationLink_getChildren((global::PhysX.PxArticulationLink*)Unsafe.AsPointer(ref @self_), @userBuffer, @bufferSize, @startIndex);
        }

        /// <summary>Set the constraint-force-mixing scale term.  The cfm scale term is a stabilization term that helps avoid instabilities with over-constrained configurations. It should be a small value that is multiplied by 1/mass internally to produce an additional bias added to the unit response term in the solver.  Default: 0.025 Range: [0, 1]  This call is not allowed while the simulation is running.</summary>
        public static void SetCfmScaleMut(this ref global::PhysX.PxArticulationLink @self_, float @cfm)
        {
            NativeMethods.PxArticulationLink_setCfmScale_mut((global::PhysX.PxArticulationLink*)Unsafe.AsPointer(ref @self_), @cfm);
        }

        /// <summary>Get the constraint-force-mixing scale term.  The constraint-force-mixing scale term.</summary>
        public static float GetCfmScale(this ref global::PhysX.PxArticulationLink @self_)
        {
            return NativeMethods.PxArticulationLink_getCfmScale((global::PhysX.PxArticulationLink*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Get the linear velocity of the link.  - The linear velocity is with respect to the link's center of mass and not the actor frame origin. - For performance, prefer PxArticulationCache::linkVelocity to get link spatial velocities in a batch query. - When the articulation state is updated via non-cache API, use PxArticulationReducedCoordinate::updateKinematic before querying velocity.  The linear velocity of the link.  This call is not allowed while the simulation is running except in a split simulation during [`PxScene::collide`]() and up to #PxScene::advance(), and in PxContactModifyCallback or in contact report callbacks.</summary>
        public static global::PhysX.PxVec3 GetLinearVelocity(this ref global::PhysX.PxArticulationLink @self_)
        {
            return NativeMethods.PxArticulationLink_getLinearVelocity((global::PhysX.PxArticulationLink*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Get the angular velocity of the link.  - For performance, prefer PxArticulationCache::linkVelocity to get link spatial velocities in a batch query. - When the articulation state is updated via non-cache API, use PxArticulationReducedCoordinate::updateKinematic before querying velocity.  The angular velocity of the link.  This call is not allowed while the simulation is running except in a split simulation during [`PxScene::collide`]() and up to #PxScene::advance(), and in PxContactModifyCallback or in contact report callbacks.</summary>
        public static global::PhysX.PxVec3 GetAngularVelocity(this ref global::PhysX.PxArticulationLink @self_)
        {
            return NativeMethods.PxArticulationLink_getAngularVelocity((global::PhysX.PxArticulationLink*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Returns the string name of the dynamic type.  The string name.</summary>
        public static byte* GetConcreteTypeName(this ref global::PhysX.PxArticulationLink @self_)
        {
            return NativeMethods.PxArticulationLink_getConcreteTypeName((global::PhysX.PxArticulationLink*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxConstraint(18)

        /// <summary>Releases a PxConstraint instance.  This call does not wake up the connected rigid bodies.</summary>
        public static void ReleaseMut(this ref global::PhysX.PxConstraint @self_)
        {
            NativeMethods.PxConstraint_release_mut((global::PhysX.PxConstraint*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Retrieves the scene which this constraint belongs to.  Owner Scene. NULL if not part of a scene.</summary>
        public static global::PhysX.PxScene* GetScene(this ref global::PhysX.PxConstraint @self_)
        {
            return NativeMethods.PxConstraint_getScene((global::PhysX.PxConstraint*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Retrieves the actors for this constraint.</summary>
        public static void GetActors(this ref global::PhysX.PxConstraint @self_, global::PhysX.PxRigidActor** @actor0, global::PhysX.PxRigidActor** @actor1)
        {
            NativeMethods.PxConstraint_getActors((global::PhysX.PxConstraint*)Unsafe.AsPointer(ref @self_), @actor0, @actor1);
        }

        /// <summary>Sets the actors for this constraint.</summary>
        public static void SetActorsMut(this ref global::PhysX.PxConstraint @self_, global::PhysX.PxRigidActor* @actor0, global::PhysX.PxRigidActor* @actor1)
        {
            NativeMethods.PxConstraint_setActors_mut((global::PhysX.PxConstraint*)Unsafe.AsPointer(ref @self_), @actor0, @actor1);
        }

        /// <summary>Notify the scene that the constraint shader data has been updated by the application</summary>
        public static void MarkDirtyMut(this ref global::PhysX.PxConstraint @self_)
        {
            NativeMethods.PxConstraint_markDirty_mut((global::PhysX.PxConstraint*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Retrieve the flags for this constraint  the constraint flags</summary>
        public static global::PhysX.PxConstraintFlags GetFlags(this ref global::PhysX.PxConstraint @self_)
        {
            return NativeMethods.PxConstraint_getFlags((global::PhysX.PxConstraint*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Set the flags for this constraint  default: PxConstraintFlag::eDRIVE_LIMITS_ARE_FORCES</summary>
        public static void SetFlagsMut(this ref global::PhysX.PxConstraint @self_, global::PhysX.PxConstraintFlags @flags)
        {
            NativeMethods.PxConstraint_setFlags_mut((global::PhysX.PxConstraint*)Unsafe.AsPointer(ref @self_), @flags);
        }

        /// <summary>Set a flag for this constraint</summary>
        public static void SetFlagMut(this ref global::PhysX.PxConstraint @self_, global::PhysX.PxConstraintFlag @flag, bool @value)
        {
            NativeMethods.PxConstraint_setFlag_mut((global::PhysX.PxConstraint*)Unsafe.AsPointer(ref @self_), @flag, @value);
        }

        /// <summary>Retrieve the constraint force most recently applied to maintain this constraint.  It is not allowed to use this method while the simulation is running (except during PxScene::collide(), in PxContactModifyCallback or in contact report callbacks).</summary>
        public static void GetForce(this ref global::PhysX.PxConstraint @self_, global::PhysX.PxVec3* @linear, global::PhysX.PxVec3* @angular)
        {
            NativeMethods.PxConstraint_getForce((global::PhysX.PxConstraint*)Unsafe.AsPointer(ref @self_), @linear, @angular);
        }

        /// <summary>whether the constraint is valid.  A constraint is valid if it has at least one dynamic rigid body or articulation link. A constraint that is not valid may not be inserted into a scene, and therefore a static actor to which an invalid constraint is attached may not be inserted into a scene.  Invalid constraints arise only when an actor to which the constraint is attached has been deleted.</summary>
        public static bool IsValid(this ref global::PhysX.PxConstraint @self_)
        {
            return NativeMethods.PxConstraint_isValid((global::PhysX.PxConstraint*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Set the break force and torque thresholds for this constraint.  If either the force or torque measured at the constraint exceed these thresholds the constraint will break.</summary>
        public static void SetBreakForceMut(this ref global::PhysX.PxConstraint @self_, float @linear, float @angular)
        {
            NativeMethods.PxConstraint_setBreakForce_mut((global::PhysX.PxConstraint*)Unsafe.AsPointer(ref @self_), @linear, @angular);
        }

        /// <summary>Retrieve the constraint break force and torque thresholds</summary>
        public static void GetBreakForce(this ref global::PhysX.PxConstraint @self_, float* @linear, float* @angular)
        {
            NativeMethods.PxConstraint_getBreakForce((global::PhysX.PxConstraint*)Unsafe.AsPointer(ref @self_), @linear, @angular);
        }

        /// <summary>Set the minimum response threshold for a constraint row  When using mass modification for a joint or infinite inertia for a jointed body, very stiff solver constraints can be generated which can destabilize simulation. Setting this value to a small positive value (e.g. 1e-8) will cause constraint rows to be ignored if very large changes in impulses will generate only small changes in velocity. When setting this value, also set PxConstraintFlag::eDISABLE_PREPROCESSING. The solver accuracy for this joint may be reduced.</summary>
        public static void SetMinResponseThresholdMut(this ref global::PhysX.PxConstraint @self_, float @threshold)
        {
            NativeMethods.PxConstraint_setMinResponseThreshold_mut((global::PhysX.PxConstraint*)Unsafe.AsPointer(ref @self_), @threshold);
        }

        /// <summary>Retrieve the constraint break force and torque thresholds  the minimum response threshold for a constraint row</summary>
        public static float GetMinResponseThreshold(this ref global::PhysX.PxConstraint @self_)
        {
            return NativeMethods.PxConstraint_getMinResponseThreshold((global::PhysX.PxConstraint*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Fetch external owner of the constraint.  Provides a reference to the external owner of a constraint and a unique owner type ID.  Reference to the external object which owns the constraint.</summary>
        public static void* GetExternalReferenceMut(this ref global::PhysX.PxConstraint @self_, uint* @typeID)
        {
            return NativeMethods.PxConstraint_getExternalReference_mut((global::PhysX.PxConstraint*)Unsafe.AsPointer(ref @self_), @typeID);
        }

        /// <summary>Set the constraint functions for this constraint</summary>
        public static void SetConstraintFunctionsMut(this ref global::PhysX.PxConstraint @self_, global::PhysX.PxConstraintConnector* @connector, global::PhysX.PxConstraintShaderTable* @shaders)
        {
            NativeMethods.PxConstraint_setConstraintFunctions_mut((global::PhysX.PxConstraint*)Unsafe.AsPointer(ref @self_), @connector, @shaders);
        }

        public static byte* GetConcreteTypeName(this ref global::PhysX.PxConstraint @self_)
        {
            return NativeMethods.PxConstraint_getConcreteTypeName((global::PhysX.PxConstraint*)Unsafe.AsPointer(ref @self_));
        }

        public static global::PhysX.PxConstraintInfo InfoNew1(this ref global::PhysX.PxConstraint @c, void* @extRef, uint @t)
        {
            return NativeMethods.PxConstraintInfo_new_1((global::PhysX.PxConstraint*)Unsafe.AsPointer(ref @c), @extRef, @t);
        }

        #endregion

        #region PhysX.PxContactStreamIterator(25)

        /// <summary>Returns whether there are more patches in this stream.  Whether there are more patches in this stream.</summary>
        public static bool HasNextPatch(this ref global::PhysX.PxContactStreamIterator @self_)
        {
            return NativeMethods.PxContactStreamIterator_hasNextPatch((global::PhysX.PxContactStreamIterator*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Returns the total contact count.  Total contact count.</summary>
        public static uint GetTotalContactCount(this ref global::PhysX.PxContactStreamIterator @self_)
        {
            return NativeMethods.PxContactStreamIterator_getTotalContactCount((global::PhysX.PxContactStreamIterator*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Returns the total patch count.  Total patch count.</summary>
        public static uint GetTotalPatchCount(this ref global::PhysX.PxContactStreamIterator @self_)
        {
            return NativeMethods.PxContactStreamIterator_getTotalPatchCount((global::PhysX.PxContactStreamIterator*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Advances iterator to next contact patch.</summary>
        public static void NextPatchMut(this ref global::PhysX.PxContactStreamIterator @self_)
        {
            NativeMethods.PxContactStreamIterator_nextPatch_mut((global::PhysX.PxContactStreamIterator*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Returns if the current patch has more contacts.  If there are more contacts in the current patch.</summary>
        public static bool HasNextContact(this ref global::PhysX.PxContactStreamIterator @self_)
        {
            return NativeMethods.PxContactStreamIterator_hasNextContact((global::PhysX.PxContactStreamIterator*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Advances to the next contact in the patch.</summary>
        public static void NextContactMut(this ref global::PhysX.PxContactStreamIterator @self_)
        {
            NativeMethods.PxContactStreamIterator_nextContact_mut((global::PhysX.PxContactStreamIterator*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Gets the current contact's normal  The current contact's normal.</summary>
        public static global::PhysX.PxVec3* GetContactNormal(this ref global::PhysX.PxContactStreamIterator @self_)
        {
            return NativeMethods.PxContactStreamIterator_getContactNormal((global::PhysX.PxContactStreamIterator*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Gets the inverse mass scale for body 0.  The inverse mass scale for body 0.</summary>
        public static float GetInvMassScale0(this ref global::PhysX.PxContactStreamIterator @self_)
        {
            return NativeMethods.PxContactStreamIterator_getInvMassScale0((global::PhysX.PxContactStreamIterator*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Gets the inverse mass scale for body 1.  The inverse mass scale for body 1.</summary>
        public static float GetInvMassScale1(this ref global::PhysX.PxContactStreamIterator @self_)
        {
            return NativeMethods.PxContactStreamIterator_getInvMassScale1((global::PhysX.PxContactStreamIterator*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Gets the inverse inertia scale for body 0.  The inverse inertia scale for body 0.</summary>
        public static float GetInvInertiaScale0(this ref global::PhysX.PxContactStreamIterator @self_)
        {
            return NativeMethods.PxContactStreamIterator_getInvInertiaScale0((global::PhysX.PxContactStreamIterator*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Gets the inverse inertia scale for body 1.  The inverse inertia scale for body 1.</summary>
        public static float GetInvInertiaScale1(this ref global::PhysX.PxContactStreamIterator @self_)
        {
            return NativeMethods.PxContactStreamIterator_getInvInertiaScale1((global::PhysX.PxContactStreamIterator*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Gets the contact's max impulse.  The contact's max impulse.</summary>
        public static float GetMaxImpulse(this ref global::PhysX.PxContactStreamIterator @self_)
        {
            return NativeMethods.PxContactStreamIterator_getMaxImpulse((global::PhysX.PxContactStreamIterator*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Gets the contact's target velocity.  The contact's target velocity.</summary>
        public static global::PhysX.PxVec3* GetTargetVel(this ref global::PhysX.PxContactStreamIterator @self_)
        {
            return NativeMethods.PxContactStreamIterator_getTargetVel((global::PhysX.PxContactStreamIterator*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Gets the contact's contact point.  The contact's contact point.</summary>
        public static global::PhysX.PxVec3* GetContactPoint(this ref global::PhysX.PxContactStreamIterator @self_)
        {
            return NativeMethods.PxContactStreamIterator_getContactPoint((global::PhysX.PxContactStreamIterator*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Gets the contact's separation.  The contact's separation.</summary>
        public static float GetSeparation(this ref global::PhysX.PxContactStreamIterator @self_)
        {
            return NativeMethods.PxContactStreamIterator_getSeparation((global::PhysX.PxContactStreamIterator*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Gets the contact's face index for shape 0.  The contact's face index for shape 0.</summary>
        public static uint GetFaceIndex0(this ref global::PhysX.PxContactStreamIterator @self_)
        {
            return NativeMethods.PxContactStreamIterator_getFaceIndex0((global::PhysX.PxContactStreamIterator*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Gets the contact's face index for shape 1.  The contact's face index for shape 1.</summary>
        public static uint GetFaceIndex1(this ref global::PhysX.PxContactStreamIterator @self_)
        {
            return NativeMethods.PxContactStreamIterator_getFaceIndex1((global::PhysX.PxContactStreamIterator*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Gets the contact's static friction coefficient.  The contact's static friction coefficient.</summary>
        public static float GetStaticFriction(this ref global::PhysX.PxContactStreamIterator @self_)
        {
            return NativeMethods.PxContactStreamIterator_getStaticFriction((global::PhysX.PxContactStreamIterator*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Gets the contact's dynamic friction coefficient.  The contact's dynamic friction coefficient.</summary>
        public static float GetDynamicFriction(this ref global::PhysX.PxContactStreamIterator @self_)
        {
            return NativeMethods.PxContactStreamIterator_getDynamicFriction((global::PhysX.PxContactStreamIterator*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Gets the contact's restitution coefficient.  The contact's restitution coefficient.</summary>
        public static float GetRestitution(this ref global::PhysX.PxContactStreamIterator @self_)
        {
            return NativeMethods.PxContactStreamIterator_getRestitution((global::PhysX.PxContactStreamIterator*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Gets the contact's damping value.  The contact's damping value.</summary>
        public static float GetDamping(this ref global::PhysX.PxContactStreamIterator @self_)
        {
            return NativeMethods.PxContactStreamIterator_getDamping((global::PhysX.PxContactStreamIterator*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Gets the contact's material flags.  The contact's material flags.</summary>
        public static uint GetMaterialFlags(this ref global::PhysX.PxContactStreamIterator @self_)
        {
            return NativeMethods.PxContactStreamIterator_getMaterialFlags((global::PhysX.PxContactStreamIterator*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Gets the contact's material index for shape 0.  The contact's material index for shape 0.</summary>
        public static ushort GetMaterialIndex0(this ref global::PhysX.PxContactStreamIterator @self_)
        {
            return NativeMethods.PxContactStreamIterator_getMaterialIndex0((global::PhysX.PxContactStreamIterator*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Gets the contact's material index for shape 1.  The contact's material index for shape 1.</summary>
        public static ushort GetMaterialIndex1(this ref global::PhysX.PxContactStreamIterator @self_)
        {
            return NativeMethods.PxContactStreamIterator_getMaterialIndex1((global::PhysX.PxContactStreamIterator*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Advances the contact stream iterator to a specific contact index.  True if advancing was possible</summary>
        public static bool AdvanceToIndexMut(this ref global::PhysX.PxContactStreamIterator @self_, uint @initialIndex)
        {
            return NativeMethods.PxContactStreamIterator_advanceToIndex_mut((global::PhysX.PxContactStreamIterator*)Unsafe.AsPointer(ref @self_), @initialIndex);
        }

        #endregion

        #region PhysX.PxContactSet(28)

        /// <summary>Get the position of a specific contact point in the set.  Position to the requested point in world space</summary>
        public static global::PhysX.PxVec3* GetPoint(this ref global::PhysX.PxContactSet @self_, uint @i)
        {
            return NativeMethods.PxContactSet_getPoint((global::PhysX.PxContactSet*)Unsafe.AsPointer(ref @self_), @i);
        }

        /// <summary>Alter the position of a specific contact point in the set.</summary>
        public static void SetPointMut(this ref global::PhysX.PxContactSet @self_, uint @i, global::PhysX.PxVec3* @p)
        {
            NativeMethods.PxContactSet_setPoint_mut((global::PhysX.PxContactSet*)Unsafe.AsPointer(ref @self_), @i, @p);
        }

        /// <summary>Get the contact normal of a specific contact point in the set.  The requested normal in world space</summary>
        public static global::PhysX.PxVec3* GetNormal(this ref global::PhysX.PxContactSet @self_, uint @i)
        {
            return NativeMethods.PxContactSet_getNormal((global::PhysX.PxContactSet*)Unsafe.AsPointer(ref @self_), @i);
        }

        /// <summary>Alter the contact normal of a specific contact point in the set.  Changing the normal can cause contact points to be ignored.</summary>
        public static void SetNormalMut(this ref global::PhysX.PxContactSet @self_, uint @i, global::PhysX.PxVec3* @n)
        {
            NativeMethods.PxContactSet_setNormal_mut((global::PhysX.PxContactSet*)Unsafe.AsPointer(ref @self_), @i, @n);
        }

        /// <summary>Get the separation distance of a specific contact point in the set.  The separation. Negative implies penetration.</summary>
        public static float GetSeparation(this ref global::PhysX.PxContactSet @self_, uint @i)
        {
            return NativeMethods.PxContactSet_getSeparation((global::PhysX.PxContactSet*)Unsafe.AsPointer(ref @self_), @i);
        }

        /// <summary>Alter the separation of a specific contact point in the set.</summary>
        public static void SetSeparationMut(this ref global::PhysX.PxContactSet @self_, uint @i, float @s)
        {
            NativeMethods.PxContactSet_setSeparation_mut((global::PhysX.PxContactSet*)Unsafe.AsPointer(ref @self_), @i, @s);
        }

        /// <summary>Get the target velocity of a specific contact point in the set.  The target velocity in world frame</summary>
        public static global::PhysX.PxVec3* GetTargetVelocity(this ref global::PhysX.PxContactSet @self_, uint @i)
        {
            return NativeMethods.PxContactSet_getTargetVelocity((global::PhysX.PxContactSet*)Unsafe.AsPointer(ref @self_), @i);
        }

        /// <summary>Alter the target velocity of a specific contact point in the set.</summary>
        public static void SetTargetVelocityMut(this ref global::PhysX.PxContactSet @self_, uint @i, global::PhysX.PxVec3* @v)
        {
            NativeMethods.PxContactSet_setTargetVelocity_mut((global::PhysX.PxContactSet*)Unsafe.AsPointer(ref @self_), @i, @v);
        }

        /// <summary>Get the face index with respect to the first shape of the pair for a specific contact point in the set.  The face index of the first shape  At the moment, the first shape is never a tri-mesh, therefore this function always returns PXC_CONTACT_NO_FACE_INDEX</summary>
        public static uint GetInternalFaceIndex0(this ref global::PhysX.PxContactSet @self_, uint @i)
        {
            return NativeMethods.PxContactSet_getInternalFaceIndex0((global::PhysX.PxContactSet*)Unsafe.AsPointer(ref @self_), @i);
        }

        /// <summary>Get the face index with respect to the second shape of the pair for a specific contact point in the set.  The face index of the second shape</summary>
        public static uint GetInternalFaceIndex1(this ref global::PhysX.PxContactSet @self_, uint @i)
        {
            return NativeMethods.PxContactSet_getInternalFaceIndex1((global::PhysX.PxContactSet*)Unsafe.AsPointer(ref @self_), @i);
        }

        /// <summary>Get the maximum impulse for a specific contact point in the set.  The maximum impulse</summary>
        public static float GetMaxImpulse(this ref global::PhysX.PxContactSet @self_, uint @i)
        {
            return NativeMethods.PxContactSet_getMaxImpulse((global::PhysX.PxContactSet*)Unsafe.AsPointer(ref @self_), @i);
        }

        /// <summary>Alter the maximum impulse for a specific contact point in the set.  Must be nonnegative. If set to zero, the contact point will be ignored</summary>
        public static void SetMaxImpulseMut(this ref global::PhysX.PxContactSet @self_, uint @i, float @s)
        {
            NativeMethods.PxContactSet_setMaxImpulse_mut((global::PhysX.PxContactSet*)Unsafe.AsPointer(ref @self_), @i, @s);
        }

        /// <summary>Get the restitution coefficient for a specific contact point in the set.  The restitution coefficient</summary>
        public static float GetRestitution(this ref global::PhysX.PxContactSet @self_, uint @i)
        {
            return NativeMethods.PxContactSet_getRestitution((global::PhysX.PxContactSet*)Unsafe.AsPointer(ref @self_), @i);
        }

        /// <summary>Alter the restitution coefficient for a specific contact point in the set.  Valid ranges [0,1]</summary>
        public static void SetRestitutionMut(this ref global::PhysX.PxContactSet @self_, uint @i, float @r)
        {
            NativeMethods.PxContactSet_setRestitution_mut((global::PhysX.PxContactSet*)Unsafe.AsPointer(ref @self_), @i, @r);
        }

        /// <summary>Get the static friction coefficient for a specific contact point in the set.  The friction coefficient (dimensionless)</summary>
        public static float GetStaticFriction(this ref global::PhysX.PxContactSet @self_, uint @i)
        {
            return NativeMethods.PxContactSet_getStaticFriction((global::PhysX.PxContactSet*)Unsafe.AsPointer(ref @self_), @i);
        }

        /// <summary>Alter the static friction coefficient for a specific contact point in the set.</summary>
        public static void SetStaticFrictionMut(this ref global::PhysX.PxContactSet @self_, uint @i, float @f)
        {
            NativeMethods.PxContactSet_setStaticFriction_mut((global::PhysX.PxContactSet*)Unsafe.AsPointer(ref @self_), @i, @f);
        }

        /// <summary>Get the static friction coefficient for a specific contact point in the set.  The friction coefficient</summary>
        public static float GetDynamicFriction(this ref global::PhysX.PxContactSet @self_, uint @i)
        {
            return NativeMethods.PxContactSet_getDynamicFriction((global::PhysX.PxContactSet*)Unsafe.AsPointer(ref @self_), @i);
        }

        /// <summary>Alter the static dynamic coefficient for a specific contact point in the set.</summary>
        public static void SetDynamicFrictionMut(this ref global::PhysX.PxContactSet @self_, uint @i, float @f)
        {
            NativeMethods.PxContactSet_setDynamicFriction_mut((global::PhysX.PxContactSet*)Unsafe.AsPointer(ref @self_), @i, @f);
        }

        /// <summary>Ignore the contact point.  If a contact point is ignored then no force will get applied at this point. This can be used to disable collision in certain areas of a shape, for example.</summary>
        public static void IgnoreMut(this ref global::PhysX.PxContactSet @self_, uint @i)
        {
            NativeMethods.PxContactSet_ignore_mut((global::PhysX.PxContactSet*)Unsafe.AsPointer(ref @self_), @i);
        }

        /// <summary>The number of contact points in the set.</summary>
        public static uint Size(this ref global::PhysX.PxContactSet @self_)
        {
            return NativeMethods.PxContactSet_size((global::PhysX.PxContactSet*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Returns the invMassScale of body 0  A value &lt; 1.0 makes this contact treat the body as if it had larger mass. A value of 0.f makes this contact treat the body as if it had infinite mass. Any value &gt; 1.f makes this contact treat the body as if it had smaller mass.</summary>
        public static float GetInvMassScale0(this ref global::PhysX.PxContactSet @self_)
        {
            return NativeMethods.PxContactSet_getInvMassScale0((global::PhysX.PxContactSet*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Returns the invMassScale of body 1  A value &lt; 1.0 makes this contact treat the body as if it had larger mass. A value of 0.f makes this contact treat the body as if it had infinite mass. Any value &gt; 1.f makes this contact treat the body as if it had smaller mass.</summary>
        public static float GetInvMassScale1(this ref global::PhysX.PxContactSet @self_)
        {
            return NativeMethods.PxContactSet_getInvMassScale1((global::PhysX.PxContactSet*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Returns the invInertiaScale of body 0  A value &lt; 1.0 makes this contact treat the body as if it had larger inertia. A value of 0.f makes this contact treat the body as if it had infinite inertia. Any value &gt; 1.f makes this contact treat the body as if it had smaller inertia.</summary>
        public static float GetInvInertiaScale0(this ref global::PhysX.PxContactSet @self_)
        {
            return NativeMethods.PxContactSet_getInvInertiaScale0((global::PhysX.PxContactSet*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Returns the invInertiaScale of body 1  A value &lt; 1.0 makes this contact treat the body as if it had larger inertia. A value of 0.f makes this contact treat the body as if it had infinite inertia. Any value &gt; 1.f makes this contact treat the body as if it had smaller inertia.</summary>
        public static float GetInvInertiaScale1(this ref global::PhysX.PxContactSet @self_)
        {
            return NativeMethods.PxContactSet_getInvInertiaScale1((global::PhysX.PxContactSet*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Sets the invMassScale of body 0  This can be set to any value in the range [0, PX_MAX_F32). A value &lt; 1.0 makes this contact treat the body as if it had larger mass. A value of 0.f makes this contact treat the body as if it had infinite mass. Any value &gt; 1.f makes this contact treat the body as if it had smaller mass.</summary>
        public static void SetInvMassScale0Mut(this ref global::PhysX.PxContactSet @self_, float @scale)
        {
            NativeMethods.PxContactSet_setInvMassScale0_mut((global::PhysX.PxContactSet*)Unsafe.AsPointer(ref @self_), @scale);
        }

        /// <summary>Sets the invMassScale of body 1  This can be set to any value in the range [0, PX_MAX_F32). A value &lt; 1.0 makes this contact treat the body as if it had larger mass. A value of 0.f makes this contact treat the body as if it had infinite mass. Any value &gt; 1.f makes this contact treat the body as if it had smaller mass.</summary>
        public static void SetInvMassScale1Mut(this ref global::PhysX.PxContactSet @self_, float @scale)
        {
            NativeMethods.PxContactSet_setInvMassScale1_mut((global::PhysX.PxContactSet*)Unsafe.AsPointer(ref @self_), @scale);
        }

        /// <summary>Sets the invInertiaScale of body 0  This can be set to any value in the range [0, PX_MAX_F32). A value &lt; 1.0 makes this contact treat the body as if it had larger inertia. A value of 0.f makes this contact treat the body as if it had infinite inertia. Any value &gt; 1.f makes this contact treat the body as if it had smaller inertia.</summary>
        public static void SetInvInertiaScale0Mut(this ref global::PhysX.PxContactSet @self_, float @scale)
        {
            NativeMethods.PxContactSet_setInvInertiaScale0_mut((global::PhysX.PxContactSet*)Unsafe.AsPointer(ref @self_), @scale);
        }

        /// <summary>Sets the invInertiaScale of body 1  This can be set to any value in the range [0, PX_MAX_F32). A value &lt; 1.0 makes this contact treat the body as if it had larger inertia. A value of 0.f makes this contact treat the body as if it had infinite inertia. Any value &gt; 1.f makes this contact treat the body as if it had smaller inertia.</summary>
        public static void SetInvInertiaScale1Mut(this ref global::PhysX.PxContactSet @self_, float @scale)
        {
            NativeMethods.PxContactSet_setInvInertiaScale1_mut((global::PhysX.PxContactSet*)Unsafe.AsPointer(ref @self_), @scale);
        }

        #endregion

        #region PhysX.PxContactModifyCallback(1)

        /// <summary>Passes modifiable arrays of contacts to the application.  The initial contacts are regenerated from scratch each frame by collision detection.  The number of contacts can not be changed, so you cannot add your own contacts.  You may however disable contacts using PxContactSet::ignore().</summary>
        public static void OnContactModifyMut(this ref global::PhysX.PxContactModifyCallback @self_, global::PhysX.PxContactModifyPair* @pairs, uint @count)
        {
            NativeMethods.PxContactModifyCallback_onContactModify_mut((global::PhysX.PxContactModifyCallback*)Unsafe.AsPointer(ref @self_), @pairs, @count);
        }

        #endregion

        #region PhysX.PxCCDContactModifyCallback(1)

        /// <summary>Passes modifiable arrays of contacts to the application.  The initial contacts are regenerated from scratch each frame by collision detection.  The number of contacts can not be changed, so you cannot add your own contacts.  You may however disable contacts using PxContactSet::ignore().</summary>
        public static void OnCCDContactModifyMut(this ref global::PhysX.PxCCDContactModifyCallback @self_, global::PhysX.PxContactModifyPair* @pairs, uint @count)
        {
            NativeMethods.PxCCDContactModifyCallback_onCCDContactModify_mut((global::PhysX.PxCCDContactModifyCallback*)Unsafe.AsPointer(ref @self_), @pairs, @count);
        }

        #endregion

        #region PhysX.PxDeletionListener(1)

        /// <summary>Notification if an object or its memory gets released  If release() gets called on a PxBase object, an eUSER_RELEASE event will get fired immediately. The object state can be queried in the callback but it is not allowed to change the state. Furthermore, when reading from the object it is the user's responsibility to make sure that no other thread is writing at the same time to the object (this includes the simulation itself, i.e., [`PxScene::fetchResults`]() must not get called at the same time).  Calling release() on a PxBase object does not necessarily trigger its destructor immediately. For example, the object can be shared and might still be referenced by other objects or the simulation might still be running and accessing the object state. In such cases the destructor will be called as soon as it is safe to do so. After the destruction of the object and its memory, an eMEMORY_RELEASE event will get fired. In this case it is not allowed to dereference the object pointer in the callback.</summary>
        public static void OnReleaseMut(this ref global::PhysX.PxDeletionListener @self_, global::PhysX.PxBase* @observed, void* @userData, global::PhysX.PxDeletionEventFlag @deletionEvent)
        {
            NativeMethods.PxDeletionListener_onRelease_mut((global::PhysX.PxDeletionListener*)Unsafe.AsPointer(ref @self_), @observed, @userData, @deletionEvent);
        }

        #endregion

        #region PhysX.PxBaseMaterial(1)

        public static bool IsKindOf(this ref global::PhysX.PxBaseMaterial @self_, byte* @name)
        {
            return NativeMethods.PxBaseMaterial_isKindOf((global::PhysX.PxBaseMaterial*)Unsafe.AsPointer(ref @self_), @name);
        }

        #endregion

        #region PhysX.PxFEMMaterial(6)

        /// <summary>Sets young's modulus which defines the body's stiffness</summary>
        public static void SetYoungsModulusMut(this ref global::PhysX.PxFEMMaterial @self_, float @young)
        {
            NativeMethods.PxFEMMaterial_setYoungsModulus_mut((global::PhysX.PxFEMMaterial*)Unsafe.AsPointer(ref @self_), @young);
        }

        /// <summary>Retrieves the young's modulus value.  The young's modulus value.</summary>
        public static float GetYoungsModulus(this ref global::PhysX.PxFEMMaterial @self_)
        {
            return NativeMethods.PxFEMMaterial_getYoungsModulus((global::PhysX.PxFEMMaterial*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Sets the Poisson's ratio which defines the body's volume preservation. Completely incompressible materials have a poisson ratio of 0.5. Its value should not be set to exactly 0.5 because this leads to numerical problems.</summary>
        public static void SetPoissonsMut(this ref global::PhysX.PxFEMMaterial @self_, float @poisson)
        {
            NativeMethods.PxFEMMaterial_setPoissons_mut((global::PhysX.PxFEMMaterial*)Unsafe.AsPointer(ref @self_), @poisson);
        }

        /// <summary>Retrieves the Poisson's ratio.  The Poisson's ratio.</summary>
        public static float GetPoissons(this ref global::PhysX.PxFEMMaterial @self_)
        {
            return NativeMethods.PxFEMMaterial_getPoissons((global::PhysX.PxFEMMaterial*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Sets the dynamic friction value which defines the strength of resistance when two objects slide relative to each other while in contact.</summary>
        public static void SetDynamicFrictionMut(this ref global::PhysX.PxFEMMaterial @self_, float @dynamicFriction)
        {
            NativeMethods.PxFEMMaterial_setDynamicFriction_mut((global::PhysX.PxFEMMaterial*)Unsafe.AsPointer(ref @self_), @dynamicFriction);
        }

        /// <summary>Retrieves the dynamic friction value  The dynamic friction value</summary>
        public static float GetDynamicFriction(this ref global::PhysX.PxFEMMaterial @self_)
        {
            return NativeMethods.PxFEMMaterial_getDynamicFriction((global::PhysX.PxFEMMaterial*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxFilterData(3)

        /// <summary>(re)sets the structure to the default.</summary>
        public static void SetToDefaultMut(this ref global::PhysX.PxFilterData @self_)
        {
            NativeMethods.PxFilterData_setToDefault_mut((global::PhysX.PxFilterData*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>constructor to set both filter data and filter flags</summary>
        public static global::PhysX.PxQueryFilterData QueryFilterDataNew1(this ref global::PhysX.PxFilterData @fd, global::PhysX.PxQueryFlags @f)
        {
            return NativeMethods.PxQueryFilterData_new_1((global::PhysX.PxFilterData*)Unsafe.AsPointer(ref @fd), @f);
        }

        public static global::PhysX.PxControllerFilters ControllerFiltersNew(this ref global::PhysX.PxFilterData @filterData, global::PhysX.PxQueryFilterCallback* @cb, global::PhysX.PxControllerFilterCallback* @cctFilterCb)
        {
            return NativeMethods.PxControllerFilters_new((global::PhysX.PxFilterData*)Unsafe.AsPointer(ref @filterData), @cb, @cctFilterCb);
        }

        #endregion

        #region PhysX.PxSimulationFilterCallback(3)

        /// <summary>Filter method to specify how a pair of potentially colliding objects should be processed.  This method gets called when the filter flags returned by the filter shader (see [`PxSimulationFilterShader`]) indicate that the filter callback should be invoked ([`PxFilterFlag::eCALLBACK`] or #PxFilterFlag::eNOTIFY set). Return the PxFilterFlag flags and set the PxPairFlag flags to define what the simulation should do with the given collision pair.  Filter flags defining whether the pair should be discarded, temporarily ignored or processed and whether the pair should be tracked and send a report on pair deletion through the filter callback</summary>
        public static global::PhysX.PxFilterFlags PairFoundMut(this ref global::PhysX.PxSimulationFilterCallback @self_, uint @pairID, uint @attributes0, global::PhysX.PxFilterData @filterData0, global::PhysX.PxActor* @a0, global::PhysX.PxShape* @s0, uint @attributes1, global::PhysX.PxFilterData @filterData1, global::PhysX.PxActor* @a1, global::PhysX.PxShape* @s1, global::PhysX.PxPairFlags* @pairFlags)
        {
            return NativeMethods.PxSimulationFilterCallback_pairFound_mut((global::PhysX.PxSimulationFilterCallback*)Unsafe.AsPointer(ref @self_), @pairID, @attributes0, @filterData0, @a0, @s0, @attributes1, @filterData1, @a1, @s1, @pairFlags);
        }

        /// <summary>Callback to inform that a tracked collision pair is gone.  This method gets called when a collision pair disappears or gets re-filtered. Only applies to collision pairs which have been marked as filter callback pairs ([`PxFilterFlag::eNOTIFY`] set in #pairFound()).</summary>
        public static void PairLostMut(this ref global::PhysX.PxSimulationFilterCallback @self_, uint @pairID, uint @attributes0, global::PhysX.PxFilterData @filterData0, uint @attributes1, global::PhysX.PxFilterData @filterData1, bool @objectRemoved)
        {
            NativeMethods.PxSimulationFilterCallback_pairLost_mut((global::PhysX.PxSimulationFilterCallback*)Unsafe.AsPointer(ref @self_), @pairID, @attributes0, @filterData0, @attributes1, @filterData1, @objectRemoved);
        }

        /// <summary>Callback to give the opportunity to change the filter state of a tracked collision pair.  This method gets called once per simulation step to let the application change the filter and pair flags of a collision pair that has been reported in [`pairFound`]() and requested callbacks by setting [`PxFilterFlag::eNOTIFY`]. To request a change of filter status, the target pair has to be specified by its ID, the new filter and pair flags have to be provided and the method should return true.  If this method changes the filter status of a collision pair and the pair should keep being tracked by the filter callbacks then [`PxFilterFlag::eNOTIFY`] has to be set.  The application is responsible to ensure that this method does not get called for pairs that have been reported as lost, see [`pairLost`]().  True if the changes should be applied. In this case the method will get called again. False if no more status changes should be done in the current simulation step. In that case the provided flags will be discarded.</summary>
        public static bool StatusChangeMut(this ref global::PhysX.PxSimulationFilterCallback @self_, uint* @pairID, global::PhysX.PxPairFlags* @pairFlags, global::PhysX.PxFilterFlags* @filterFlags)
        {
            return NativeMethods.PxSimulationFilterCallback_statusChange_mut((global::PhysX.PxSimulationFilterCallback*)Unsafe.AsPointer(ref @self_), @pairID, @pairFlags, @filterFlags);
        }

        #endregion

        #region PhysX.PxLockedData(3)

        /// <summary>Any combination of PxDataAccessFlag::eREADABLE and PxDataAccessFlag::eWRITABLE</summary>
        public static global::PhysX.PxDataAccessFlags GetDataAccessFlagsMut(this ref global::PhysX.PxLockedData @self_)
        {
            return NativeMethods.PxLockedData_getDataAccessFlags_mut((global::PhysX.PxLockedData*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Unlocks the bulk data.</summary>
        public static void UnlockMut(this ref global::PhysX.PxLockedData @self_)
        {
            NativeMethods.PxLockedData_unlock_mut((global::PhysX.PxLockedData*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>virtual destructor</summary>
        public static void Delete(this ref global::PhysX.PxLockedData @self_)
        {
            NativeMethods.PxLockedData_delete((global::PhysX.PxLockedData*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxMaterial(16)

        /// <summary>Sets the coefficient of dynamic friction.  The coefficient of dynamic friction should be in [0, PX_MAX_F32). If set to greater than staticFriction, the effective value of staticFriction will be increased to match.  Sleeping: Does NOT wake any actors which may be affected.</summary>
        public static void SetDynamicFrictionMut(this ref global::PhysX.PxMaterial @self_, float @coef)
        {
            NativeMethods.PxMaterial_setDynamicFriction_mut((global::PhysX.PxMaterial*)Unsafe.AsPointer(ref @self_), @coef);
        }

        /// <summary>Retrieves the DynamicFriction value.  The coefficient of dynamic friction.</summary>
        public static float GetDynamicFriction(this ref global::PhysX.PxMaterial @self_)
        {
            return NativeMethods.PxMaterial_getDynamicFriction((global::PhysX.PxMaterial*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Sets the coefficient of static friction  The coefficient of static friction should be in the range [0, PX_MAX_F32)  Sleeping: Does NOT wake any actors which may be affected.</summary>
        public static void SetStaticFrictionMut(this ref global::PhysX.PxMaterial @self_, float @coef)
        {
            NativeMethods.PxMaterial_setStaticFriction_mut((global::PhysX.PxMaterial*)Unsafe.AsPointer(ref @self_), @coef);
        }

        /// <summary>Retrieves the coefficient of static friction.  The coefficient of static friction.</summary>
        public static float GetStaticFriction(this ref global::PhysX.PxMaterial @self_)
        {
            return NativeMethods.PxMaterial_getStaticFriction((global::PhysX.PxMaterial*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Sets the coefficient of restitution  A coefficient of 0 makes the object bounce as little as possible, higher values up to 1.0 result in more bounce.  This property is overloaded when PxMaterialFlag::eCOMPLIANT_CONTACT flag is enabled. This permits negative values for restitution to be provided. The negative values are converted into spring stiffness terms for an implicit spring simulated at the contact site, with the spring positional error defined by the contact separation value. Higher stiffness terms produce stiffer springs that behave more like a rigid contact.  Sleeping: Does NOT wake any actors which may be affected.</summary>
        public static void SetRestitutionMut(this ref global::PhysX.PxMaterial @self_, float @rest)
        {
            NativeMethods.PxMaterial_setRestitution_mut((global::PhysX.PxMaterial*)Unsafe.AsPointer(ref @self_), @rest);
        }

        /// <summary>Retrieves the coefficient of restitution.  See [`setRestitution`].  The coefficient of restitution.</summary>
        public static float GetRestitution(this ref global::PhysX.PxMaterial @self_)
        {
            return NativeMethods.PxMaterial_getRestitution((global::PhysX.PxMaterial*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Sets the coefficient of damping  This property only affects the simulation if PxMaterialFlag::eCOMPLIANT_CONTACT is raised. Damping works together with spring stiffness (set through a negative restitution value). Spring stiffness corrects positional error while damping resists relative velocity. Setting a high damping coefficient can produce spongy contacts.  Sleeping: Does NOT wake any actors which may be affected.</summary>
        public static void SetDampingMut(this ref global::PhysX.PxMaterial @self_, float @damping)
        {
            NativeMethods.PxMaterial_setDamping_mut((global::PhysX.PxMaterial*)Unsafe.AsPointer(ref @self_), @damping);
        }

        /// <summary>Retrieves the coefficient of damping.  See [`setDamping`].  The coefficient of damping.</summary>
        public static float GetDamping(this ref global::PhysX.PxMaterial @self_)
        {
            return NativeMethods.PxMaterial_getDamping((global::PhysX.PxMaterial*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Raises or clears a particular material flag.  See the list of flags [`PxMaterialFlag`]  Default: eIMPROVED_PATCH_FRICTION  Sleeping: Does NOT wake any actors which may be affected.</summary>
        public static void SetFlagMut(this ref global::PhysX.PxMaterial @self_, global::PhysX.PxMaterialFlag @flag, bool @b)
        {
            NativeMethods.PxMaterial_setFlag_mut((global::PhysX.PxMaterial*)Unsafe.AsPointer(ref @self_), @flag, @b);
        }

        /// <summary>sets all the material flags.  See the list of flags [`PxMaterialFlag`]  Default: eIMPROVED_PATCH_FRICTION  Sleeping: Does NOT wake any actors which may be affected.</summary>
        public static void SetFlagsMut(this ref global::PhysX.PxMaterial @self_, global::PhysX.PxMaterialFlags @flags)
        {
            NativeMethods.PxMaterial_setFlags_mut((global::PhysX.PxMaterial*)Unsafe.AsPointer(ref @self_), @flags);
        }

        /// <summary>Retrieves the flags. See [`PxMaterialFlag`].  The material flags.</summary>
        public static global::PhysX.PxMaterialFlags GetFlags(this ref global::PhysX.PxMaterial @self_)
        {
            return NativeMethods.PxMaterial_getFlags((global::PhysX.PxMaterial*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Sets the friction combine mode.  See the enum ::PxCombineMode .  Default: PxCombineMode::eAVERAGE  Sleeping: Does NOT wake any actors which may be affected.</summary>
        public static void SetFrictionCombineModeMut(this ref global::PhysX.PxMaterial @self_, global::PhysX.PxCombineMode @combMode)
        {
            NativeMethods.PxMaterial_setFrictionCombineMode_mut((global::PhysX.PxMaterial*)Unsafe.AsPointer(ref @self_), @combMode);
        }

        /// <summary>Retrieves the friction combine mode.  See [`setFrictionCombineMode`].  The friction combine mode for this material.</summary>
        public static global::PhysX.PxCombineMode GetFrictionCombineMode(this ref global::PhysX.PxMaterial @self_)
        {
            return NativeMethods.PxMaterial_getFrictionCombineMode((global::PhysX.PxMaterial*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Sets the restitution combine mode.  See the enum ::PxCombineMode .  Default: PxCombineMode::eAVERAGE  Sleeping: Does NOT wake any actors which may be affected.</summary>
        public static void SetRestitutionCombineModeMut(this ref global::PhysX.PxMaterial @self_, global::PhysX.PxCombineMode @combMode)
        {
            NativeMethods.PxMaterial_setRestitutionCombineMode_mut((global::PhysX.PxMaterial*)Unsafe.AsPointer(ref @self_), @combMode);
        }

        /// <summary>Retrieves the restitution combine mode.  See [`setRestitutionCombineMode`].  The coefficient of restitution combine mode for this material.</summary>
        public static global::PhysX.PxCombineMode GetRestitutionCombineMode(this ref global::PhysX.PxMaterial @self_)
        {
            return NativeMethods.PxMaterial_getRestitutionCombineMode((global::PhysX.PxMaterial*)Unsafe.AsPointer(ref @self_));
        }

        public static byte* GetConcreteTypeName(this ref global::PhysX.PxMaterial @self_)
        {
            return NativeMethods.PxMaterial_getConcreteTypeName((global::PhysX.PxMaterial*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxDiffuseParticleParams(1)

        /// <summary>(re)sets the structure to the default.</summary>
        public static void SetToDefaultMut(this ref global::PhysX.PxDiffuseParticleParams @self_)
        {
            NativeMethods.PxDiffuseParticleParams_setToDefault_mut((global::PhysX.PxDiffuseParticleParams*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxParticleMaterial(10)

        /// <summary>Sets friction</summary>
        public static void SetFrictionMut(this ref global::PhysX.PxParticleMaterial @self_, float @friction)
        {
            NativeMethods.PxParticleMaterial_setFriction_mut((global::PhysX.PxParticleMaterial*)Unsafe.AsPointer(ref @self_), @friction);
        }

        /// <summary>Retrieves the friction value.  The friction value.</summary>
        public static float GetFriction(this ref global::PhysX.PxParticleMaterial @self_)
        {
            return NativeMethods.PxParticleMaterial_getFriction((global::PhysX.PxParticleMaterial*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Sets velocity damping term</summary>
        public static void SetDampingMut(this ref global::PhysX.PxParticleMaterial @self_, float @damping)
        {
            NativeMethods.PxParticleMaterial_setDamping_mut((global::PhysX.PxParticleMaterial*)Unsafe.AsPointer(ref @self_), @damping);
        }

        /// <summary>Retrieves the velocity damping term  The velocity damping term.</summary>
        public static float GetDamping(this ref global::PhysX.PxParticleMaterial @self_)
        {
            return NativeMethods.PxParticleMaterial_getDamping((global::PhysX.PxParticleMaterial*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Sets adhesion term</summary>
        public static void SetAdhesionMut(this ref global::PhysX.PxParticleMaterial @self_, float @adhesion)
        {
            NativeMethods.PxParticleMaterial_setAdhesion_mut((global::PhysX.PxParticleMaterial*)Unsafe.AsPointer(ref @self_), @adhesion);
        }

        /// <summary>Retrieves the adhesion term  The adhesion term.</summary>
        public static float GetAdhesion(this ref global::PhysX.PxParticleMaterial @self_)
        {
            return NativeMethods.PxParticleMaterial_getAdhesion((global::PhysX.PxParticleMaterial*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Sets gravity scale term</summary>
        public static void SetGravityScaleMut(this ref global::PhysX.PxParticleMaterial @self_, float @scale)
        {
            NativeMethods.PxParticleMaterial_setGravityScale_mut((global::PhysX.PxParticleMaterial*)Unsafe.AsPointer(ref @self_), @scale);
        }

        /// <summary>Retrieves the gravity scale term  The gravity scale term.</summary>
        public static float GetGravityScale(this ref global::PhysX.PxParticleMaterial @self_)
        {
            return NativeMethods.PxParticleMaterial_getGravityScale((global::PhysX.PxParticleMaterial*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Sets material adhesion radius scale. This is multiplied by the particle rest offset to compute the fall-off distance at which point adhesion ceases to operate.</summary>
        public static void SetAdhesionRadiusScaleMut(this ref global::PhysX.PxParticleMaterial @self_, float @scale)
        {
            NativeMethods.PxParticleMaterial_setAdhesionRadiusScale_mut((global::PhysX.PxParticleMaterial*)Unsafe.AsPointer(ref @self_), @scale);
        }

        /// <summary>Retrieves the adhesion radius scale.  The adhesion radius scale.</summary>
        public static float GetAdhesionRadiusScale(this ref global::PhysX.PxParticleMaterial @self_)
        {
            return NativeMethods.PxParticleMaterial_getAdhesionRadiusScale((global::PhysX.PxParticleMaterial*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxPhysics(63)

        /// <summary>Destroys the instance it is called on.  Use this release method to destroy an instance of this class. Be sure to not keep a reference to this object after calling release. Avoid release calls while a scene is simulating (in between simulate() and fetchResults() calls).  Note that this must be called once for each prior call to PxCreatePhysics, as there is a reference counter. Also note that you mustn't destroy the PxFoundation instance (holding the allocator, error callback etc.) until after the reference count reaches 0 and the SDK is actually removed.  Releasing an SDK will also release any objects created through it (scenes, triangle meshes, convex meshes, heightfields, shapes etc.), provided the user hasn't already done so.  Releasing the PxPhysics instance is a prerequisite to releasing the PxFoundation instance.</summary>
        public static void ReleaseMut(this ref global::PhysX.PxPhysics @self_)
        {
            NativeMethods.PxPhysics_release_mut((global::PhysX.PxPhysics*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Retrieves the Foundation instance.  A reference to the Foundation object.</summary>
        public static global::PhysX.PxFoundation* GetFoundationMut(this ref global::PhysX.PxPhysics @self_)
        {
            return NativeMethods.PxPhysics_getFoundation_mut((global::PhysX.PxPhysics*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Creates an aggregate with the specified maximum size and filtering hint.  The previous API used \"bool enableSelfCollision\" which should now silently evaluates to a PxAggregateType::eGENERIC aggregate with its self-collision bit.  Use PxAggregateType::eSTATIC or PxAggregateType::eKINEMATIC for aggregates that will only contain static or kinematic actors. This provides faster filtering when used in combination with PxPairFilteringMode.  The new aggregate.</summary>
        public static global::PhysX.PxAggregate* CreateAggregateMut(this ref global::PhysX.PxPhysics @self_, uint @maxActor, uint @maxShape, uint @filterHint)
        {
            return NativeMethods.PxPhysics_createAggregate_mut((global::PhysX.PxPhysics*)Unsafe.AsPointer(ref @self_), @maxActor, @maxShape, @filterHint);
        }

        /// <summary>Returns the simulation tolerance parameters.  The current simulation tolerance parameters.</summary>
        public static global::PhysX.PxTolerancesScale* GetTolerancesScale(this ref global::PhysX.PxPhysics @self_)
        {
            return NativeMethods.PxPhysics_getTolerancesScale((global::PhysX.PxPhysics*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Creates a triangle mesh object.  This can then be instanced into [`PxShape`] objects.  The new triangle mesh.</summary>
        public static global::PhysX.PxTriangleMesh* CreateTriangleMeshMut(this ref global::PhysX.PxPhysics @self_, global::PhysX.PxInputStream* @stream)
        {
            return NativeMethods.PxPhysics_createTriangleMesh_mut((global::PhysX.PxPhysics*)Unsafe.AsPointer(ref @self_), @stream);
        }

        /// <summary>Return the number of triangle meshes that currently exist.  Number of triangle meshes.</summary>
        public static uint GetNbTriangleMeshes(this ref global::PhysX.PxPhysics @self_)
        {
            return NativeMethods.PxPhysics_getNbTriangleMeshes((global::PhysX.PxPhysics*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Writes the array of triangle mesh pointers to a user buffer.  Returns the number of pointers written.  The ordering of the triangle meshes in the array is not specified.  The number of triangle mesh pointers written to userBuffer, this should be less or equal to bufferSize.</summary>
        public static uint GetTriangleMeshes(this ref global::PhysX.PxPhysics @self_, global::PhysX.PxTriangleMesh** @userBuffer, uint @bufferSize, uint @startIndex)
        {
            return NativeMethods.PxPhysics_getTriangleMeshes((global::PhysX.PxPhysics*)Unsafe.AsPointer(ref @self_), @userBuffer, @bufferSize, @startIndex);
        }

        /// <summary>Creates a tetrahedron mesh object.  This can then be instanced into [`PxShape`] objects.  The new tetrahedron mesh.</summary>
        public static global::PhysX.PxTetrahedronMesh* CreateTetrahedronMeshMut(this ref global::PhysX.PxPhysics @self_, global::PhysX.PxInputStream* @stream)
        {
            return NativeMethods.PxPhysics_createTetrahedronMesh_mut((global::PhysX.PxPhysics*)Unsafe.AsPointer(ref @self_), @stream);
        }

        /// <summary>Creates a softbody mesh object.  The new softbody mesh.</summary>
        public static global::PhysX.PxSoftBodyMesh* CreateSoftBodyMeshMut(this ref global::PhysX.PxPhysics @self_, global::PhysX.PxInputStream* @stream)
        {
            return NativeMethods.PxPhysics_createSoftBodyMesh_mut((global::PhysX.PxPhysics*)Unsafe.AsPointer(ref @self_), @stream);
        }

        /// <summary>Return the number of tetrahedron meshes that currently exist.  Number of tetrahedron meshes.</summary>
        public static uint GetNbTetrahedronMeshes(this ref global::PhysX.PxPhysics @self_)
        {
            return NativeMethods.PxPhysics_getNbTetrahedronMeshes((global::PhysX.PxPhysics*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Writes the array of tetrahedron mesh pointers to a user buffer.  Returns the number of pointers written.  The ordering of the tetrahedron meshes in the array is not specified.  The number of tetrahedron mesh pointers written to userBuffer, this should be less or equal to bufferSize.</summary>
        public static uint GetTetrahedronMeshes(this ref global::PhysX.PxPhysics @self_, global::PhysX.PxTetrahedronMesh** @userBuffer, uint @bufferSize, uint @startIndex)
        {
            return NativeMethods.PxPhysics_getTetrahedronMeshes((global::PhysX.PxPhysics*)Unsafe.AsPointer(ref @self_), @userBuffer, @bufferSize, @startIndex);
        }

        /// <summary>Creates a heightfield object from previously cooked stream.  This can then be instanced into [`PxShape`] objects.  The new heightfield.</summary>
        public static global::PhysX.PxHeightField* CreateHeightFieldMut(this ref global::PhysX.PxPhysics @self_, global::PhysX.PxInputStream* @stream)
        {
            return NativeMethods.PxPhysics_createHeightField_mut((global::PhysX.PxPhysics*)Unsafe.AsPointer(ref @self_), @stream);
        }

        /// <summary>Return the number of heightfields that currently exist.  Number of heightfields.</summary>
        public static uint GetNbHeightFields(this ref global::PhysX.PxPhysics @self_)
        {
            return NativeMethods.PxPhysics_getNbHeightFields((global::PhysX.PxPhysics*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Writes the array of heightfield pointers to a user buffer.  Returns the number of pointers written.  The ordering of the heightfields in the array is not specified.  The number of heightfield pointers written to userBuffer, this should be less or equal to bufferSize.</summary>
        public static uint GetHeightFields(this ref global::PhysX.PxPhysics @self_, global::PhysX.PxHeightField** @userBuffer, uint @bufferSize, uint @startIndex)
        {
            return NativeMethods.PxPhysics_getHeightFields((global::PhysX.PxPhysics*)Unsafe.AsPointer(ref @self_), @userBuffer, @bufferSize, @startIndex);
        }

        /// <summary>Creates a convex mesh object.  This can then be instanced into [`PxShape`] objects.  The new convex mesh.</summary>
        public static global::PhysX.PxConvexMesh* CreateConvexMeshMut(this ref global::PhysX.PxPhysics @self_, global::PhysX.PxInputStream* @stream)
        {
            return NativeMethods.PxPhysics_createConvexMesh_mut((global::PhysX.PxPhysics*)Unsafe.AsPointer(ref @self_), @stream);
        }

        /// <summary>Return the number of convex meshes that currently exist.  Number of convex meshes.</summary>
        public static uint GetNbConvexMeshes(this ref global::PhysX.PxPhysics @self_)
        {
            return NativeMethods.PxPhysics_getNbConvexMeshes((global::PhysX.PxPhysics*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Writes the array of convex mesh pointers to a user buffer.  Returns the number of pointers written.  The ordering of the convex meshes in the array is not specified.  The number of convex mesh pointers written to userBuffer, this should be less or equal to bufferSize.</summary>
        public static uint GetConvexMeshes(this ref global::PhysX.PxPhysics @self_, global::PhysX.PxConvexMesh** @userBuffer, uint @bufferSize, uint @startIndex)
        {
            return NativeMethods.PxPhysics_getConvexMeshes((global::PhysX.PxPhysics*)Unsafe.AsPointer(ref @self_), @userBuffer, @bufferSize, @startIndex);
        }

        /// <summary>Creates a bounding volume hierarchy.  The new BVH.</summary>
        public static global::PhysX.PxBVH* CreateBVHMut(this ref global::PhysX.PxPhysics @self_, global::PhysX.PxInputStream* @stream)
        {
            return NativeMethods.PxPhysics_createBVH_mut((global::PhysX.PxPhysics*)Unsafe.AsPointer(ref @self_), @stream);
        }

        /// <summary>Return the number of bounding volume hierarchies that currently exist.  Number of bounding volume hierarchies.</summary>
        public static uint GetNbBVHs(this ref global::PhysX.PxPhysics @self_)
        {
            return NativeMethods.PxPhysics_getNbBVHs((global::PhysX.PxPhysics*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Writes the array of bounding volume hierarchy pointers to a user buffer.  Returns the number of pointers written.  The ordering of the BVHs in the array is not specified.  The number of BVH pointers written to userBuffer, this should be less or equal to bufferSize.</summary>
        public static uint GetBVHs(this ref global::PhysX.PxPhysics @self_, global::PhysX.PxBVH** @userBuffer, uint @bufferSize, uint @startIndex)
        {
            return NativeMethods.PxPhysics_getBVHs((global::PhysX.PxPhysics*)Unsafe.AsPointer(ref @self_), @userBuffer, @bufferSize, @startIndex);
        }

        /// <summary>Creates a scene.  Every scene uses a Thread Local Storage slot. This imposes a platform specific limit on the number of scenes that can be created.  The new scene object.</summary>
        public static global::PhysX.PxScene* CreateSceneMut(this ref global::PhysX.PxPhysics @self_, global::PhysX.PxSceneDesc* @sceneDesc)
        {
            return NativeMethods.PxPhysics_createScene_mut((global::PhysX.PxPhysics*)Unsafe.AsPointer(ref @self_), @sceneDesc);
        }

        /// <summary>Gets number of created scenes.  The number of scenes created.</summary>
        public static uint GetNbScenes(this ref global::PhysX.PxPhysics @self_)
        {
            return NativeMethods.PxPhysics_getNbScenes((global::PhysX.PxPhysics*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Writes the array of scene pointers to a user buffer.  Returns the number of pointers written.  The ordering of the scene pointers in the array is not specified.  The number of scene pointers written to userBuffer, this should be less or equal to bufferSize.</summary>
        public static uint GetScenes(this ref global::PhysX.PxPhysics @self_, global::PhysX.PxScene** @userBuffer, uint @bufferSize, uint @startIndex)
        {
            return NativeMethods.PxPhysics_getScenes((global::PhysX.PxPhysics*)Unsafe.AsPointer(ref @self_), @userBuffer, @bufferSize, @startIndex);
        }

        /// <summary>Creates a static rigid actor with the specified pose and all other fields initialized to their default values.</summary>
        public static global::PhysX.PxRigidStatic* CreateRigidStaticMut(this ref global::PhysX.PxPhysics @self_, global::PhysX.PxTransform* @pose)
        {
            return NativeMethods.PxPhysics_createRigidStatic_mut((global::PhysX.PxPhysics*)Unsafe.AsPointer(ref @self_), @pose);
        }

        /// <summary>Creates a dynamic rigid actor with the specified pose and all other fields initialized to their default values.</summary>
        public static global::PhysX.PxRigidDynamic* CreateRigidDynamicMut(this ref global::PhysX.PxPhysics @self_, global::PhysX.PxTransform* @pose)
        {
            return NativeMethods.PxPhysics_createRigidDynamic_mut((global::PhysX.PxPhysics*)Unsafe.AsPointer(ref @self_), @pose);
        }

        /// <summary>Creates a pruning structure from actors.  Every provided actor needs at least one shape with the eSCENE_QUERY_SHAPE flag set.  Both static and dynamic actors can be provided.  It is not allowed to pass in actors which are already part of a scene.  Articulation links cannot be provided.  Pruning structure created from given actors, or NULL if any of the actors did not comply with the above requirements.</summary>
        public static global::PhysX.PxPruningStructure* CreatePruningStructureMut(this ref global::PhysX.PxPhysics @self_, global::PhysX.PxRigidActor** @actors, uint @nbActors)
        {
            return NativeMethods.PxPhysics_createPruningStructure_mut((global::PhysX.PxPhysics*)Unsafe.AsPointer(ref @self_), @actors, @nbActors);
        }

        /// <summary>Creates a shape which may be attached to multiple actors  The shape will be created with a reference count of 1.  The shape  Shared shapes are not mutable when they are attached to an actor</summary>
        public static global::PhysX.PxShape* CreateShapeMut(this ref global::PhysX.PxPhysics @self_, global::PhysX.PxGeometry* @geometry, global::PhysX.PxMaterial* @material, bool @isExclusive, global::PhysX.PxShapeFlags @shapeFlags)
        {
            return NativeMethods.PxPhysics_createShape_mut((global::PhysX.PxPhysics*)Unsafe.AsPointer(ref @self_), @geometry, @material, @isExclusive, @shapeFlags);
        }

        /// <summary>Creates a shape which may be attached to multiple actors  The shape will be created with a reference count of 1.  The shape  Shared shapes are not mutable when they are attached to an actor  Shapes created from *SDF* triangle-mesh geometries do not support more than one material.</summary>
        public static global::PhysX.PxShape* CreateShapeMut1(this ref global::PhysX.PxPhysics @self_, global::PhysX.PxGeometry* @geometry, global::PhysX.PxMaterial** @materials, ushort @materialCount, bool @isExclusive, global::PhysX.PxShapeFlags @shapeFlags)
        {
            return NativeMethods.PxPhysics_createShape_mut_1((global::PhysX.PxPhysics*)Unsafe.AsPointer(ref @self_), @geometry, @materials, @materialCount, @isExclusive, @shapeFlags);
        }

        /// <summary>Return the number of shapes that currently exist.  Number of shapes.</summary>
        public static uint GetNbShapes(this ref global::PhysX.PxPhysics @self_)
        {
            return NativeMethods.PxPhysics_getNbShapes((global::PhysX.PxPhysics*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Writes the array of shape pointers to a user buffer.  Returns the number of pointers written.  The ordering of the shapes in the array is not specified.  The number of shape pointers written to userBuffer, this should be less or equal to bufferSize.</summary>
        public static uint GetShapes(this ref global::PhysX.PxPhysics @self_, global::PhysX.PxShape** @userBuffer, uint @bufferSize, uint @startIndex)
        {
            return NativeMethods.PxPhysics_getShapes((global::PhysX.PxPhysics*)Unsafe.AsPointer(ref @self_), @userBuffer, @bufferSize, @startIndex);
        }

        /// <summary>Creates a constraint shader.  A constraint shader will get added automatically to the scene the two linked actors belong to. Either, but not both, of actor0 and actor1 may be NULL to denote attachment to the world.  The new constraint shader.</summary>
        public static global::PhysX.PxConstraint* CreateConstraintMut(this ref global::PhysX.PxPhysics @self_, global::PhysX.PxRigidActor* @actor0, global::PhysX.PxRigidActor* @actor1, global::PhysX.PxConstraintConnector* @connector, global::PhysX.PxConstraintShaderTable* @shaders, uint @dataSize)
        {
            return NativeMethods.PxPhysics_createConstraint_mut((global::PhysX.PxPhysics*)Unsafe.AsPointer(ref @self_), @actor0, @actor1, @connector, @shaders, @dataSize);
        }

        /// <summary>Creates a reduced-coordinate articulation with all fields initialized to their default values.  the new articulation</summary>
        public static global::PhysX.PxArticulationReducedCoordinate* CreateArticulationReducedCoordinateMut(this ref global::PhysX.PxPhysics @self_)
        {
            return NativeMethods.PxPhysics_createArticulationReducedCoordinate_mut((global::PhysX.PxPhysics*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Creates a new rigid body material with certain default properties.  The new rigid body material.</summary>
        public static global::PhysX.PxMaterial* CreateMaterialMut(this ref global::PhysX.PxPhysics @self_, float @staticFriction, float @dynamicFriction, float @restitution)
        {
            return NativeMethods.PxPhysics_createMaterial_mut((global::PhysX.PxPhysics*)Unsafe.AsPointer(ref @self_), @staticFriction, @dynamicFriction, @restitution);
        }

        /// <summary>Return the number of rigid body materials that currently exist.  Number of rigid body materials.</summary>
        public static uint GetNbMaterials(this ref global::PhysX.PxPhysics @self_)
        {
            return NativeMethods.PxPhysics_getNbMaterials((global::PhysX.PxPhysics*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Writes the array of rigid body material pointers to a user buffer.  Returns the number of pointers written.  The ordering of the materials in the array is not specified.  The number of material pointers written to userBuffer, this should be less or equal to bufferSize.</summary>
        public static uint GetMaterials(this ref global::PhysX.PxPhysics @self_, global::PhysX.PxMaterial** @userBuffer, uint @bufferSize, uint @startIndex)
        {
            return NativeMethods.PxPhysics_getMaterials((global::PhysX.PxPhysics*)Unsafe.AsPointer(ref @self_), @userBuffer, @bufferSize, @startIndex);
        }

        /// <summary>Register a deletion listener. Listeners will be called whenever an object is deleted.  It is illegal to register or unregister a deletion listener while deletions are being processed.  By default a registered listener will receive events from all objects. Set the restrictedObjectSet parameter to true on registration and use [`registerDeletionListenerObjects`] to restrict the received events to specific objects.  The deletion events are only supported on core PhysX objects. In general, objects in extension modules do not provide this functionality, however, in the case of PxJoint objects, the underlying PxConstraint will send the events.</summary>
        public static void RegisterDeletionListenerMut(this ref global::PhysX.PxPhysics @self_, global::PhysX.PxDeletionListener* @observer, global::PhysX.PxDeletionEventFlags* @deletionEvents, bool @restrictedObjectSet)
        {
            NativeMethods.PxPhysics_registerDeletionListener_mut((global::PhysX.PxPhysics*)Unsafe.AsPointer(ref @self_), @observer, @deletionEvents, @restrictedObjectSet);
        }

        /// <summary>Unregister a deletion listener.  It is illegal to register or unregister a deletion listener while deletions are being processed.</summary>
        public static void UnregisterDeletionListenerMut(this ref global::PhysX.PxPhysics @self_, global::PhysX.PxDeletionListener* @observer)
        {
            NativeMethods.PxPhysics_unregisterDeletionListener_mut((global::PhysX.PxPhysics*)Unsafe.AsPointer(ref @self_), @observer);
        }

        /// <summary>Register specific objects for deletion events.  This method allows for a deletion listener to limit deletion events to specific objects only.  It is illegal to register or unregister objects while deletions are being processed.  The deletion listener has to be registered through [`registerDeletionListener`]() and configured to support restricted object sets prior to this method being used.</summary>
        public static void RegisterDeletionListenerObjectsMut(this ref global::PhysX.PxPhysics @self_, global::PhysX.PxDeletionListener* @observer, global::PhysX.PxBase** @observables, uint @observableCount)
        {
            NativeMethods.PxPhysics_registerDeletionListenerObjects_mut((global::PhysX.PxPhysics*)Unsafe.AsPointer(ref @self_), @observer, @observables, @observableCount);
        }

        /// <summary>Unregister specific objects for deletion events.  This method allows to clear previously registered objects for a deletion listener (see [`registerDeletionListenerObjects`]()).  It is illegal to register or unregister objects while deletions are being processed.  The deletion listener has to be registered through [`registerDeletionListener`]() and configured to support restricted object sets prior to this method being used.</summary>
        public static void UnregisterDeletionListenerObjectsMut(this ref global::PhysX.PxPhysics @self_, global::PhysX.PxDeletionListener* @observer, global::PhysX.PxBase** @observables, uint @observableCount)
        {
            NativeMethods.PxPhysics_unregisterDeletionListenerObjects_mut((global::PhysX.PxPhysics*)Unsafe.AsPointer(ref @self_), @observer, @observables, @observableCount);
        }

        /// <summary>Gets PxPhysics object insertion interface.  The insertion interface is needed for PxCreateTriangleMesh, PxCooking::createTriangleMesh etc., this allows runtime mesh creation.</summary>
        public static global::PhysX.PxInsertionCallback* GetPhysicsInsertionCallbackMut(this ref global::PhysX.PxPhysics @self_)
        {
            return NativeMethods.PxPhysics_getPhysicsInsertionCallback_mut((global::PhysX.PxPhysics*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Create a distance Joint.</summary>
        public static global::PhysX.PxDistanceJoint* PhysPxDistanceJointCreate(this ref global::PhysX.PxPhysics @physics, global::PhysX.PxRigidActor* @actor0, global::PhysX.PxTransform* @localFrame0, global::PhysX.PxRigidActor* @actor1, global::PhysX.PxTransform* @localFrame1)
        {
            return NativeMethods.phys_PxDistanceJointCreate((global::PhysX.PxPhysics*)Unsafe.AsPointer(ref @physics), @actor0, @localFrame0, @actor1, @localFrame1);
        }

        /// <summary>Create a distance Joint.</summary>
        public static global::PhysX.PxContactJoint* PhysPxContactJointCreate(this ref global::PhysX.PxPhysics @physics, global::PhysX.PxRigidActor* @actor0, global::PhysX.PxTransform* @localFrame0, global::PhysX.PxRigidActor* @actor1, global::PhysX.PxTransform* @localFrame1)
        {
            return NativeMethods.phys_PxContactJointCreate((global::PhysX.PxPhysics*)Unsafe.AsPointer(ref @physics), @actor0, @localFrame0, @actor1, @localFrame1);
        }

        /// <summary>Create a fixed joint.</summary>
        public static global::PhysX.PxFixedJoint* PhysPxFixedJointCreate(this ref global::PhysX.PxPhysics @physics, global::PhysX.PxRigidActor* @actor0, global::PhysX.PxTransform* @localFrame0, global::PhysX.PxRigidActor* @actor1, global::PhysX.PxTransform* @localFrame1)
        {
            return NativeMethods.phys_PxFixedJointCreate((global::PhysX.PxPhysics*)Unsafe.AsPointer(ref @physics), @actor0, @localFrame0, @actor1, @localFrame1);
        }

        /// <summary>Create a prismatic joint.</summary>
        public static global::PhysX.PxPrismaticJoint* PhysPxPrismaticJointCreate(this ref global::PhysX.PxPhysics @physics, global::PhysX.PxRigidActor* @actor0, global::PhysX.PxTransform* @localFrame0, global::PhysX.PxRigidActor* @actor1, global::PhysX.PxTransform* @localFrame1)
        {
            return NativeMethods.phys_PxPrismaticJointCreate((global::PhysX.PxPhysics*)Unsafe.AsPointer(ref @physics), @actor0, @localFrame0, @actor1, @localFrame1);
        }

        /// <summary>Create a revolute joint.</summary>
        public static global::PhysX.PxRevoluteJoint* PhysPxRevoluteJointCreate(this ref global::PhysX.PxPhysics @physics, global::PhysX.PxRigidActor* @actor0, global::PhysX.PxTransform* @localFrame0, global::PhysX.PxRigidActor* @actor1, global::PhysX.PxTransform* @localFrame1)
        {
            return NativeMethods.phys_PxRevoluteJointCreate((global::PhysX.PxPhysics*)Unsafe.AsPointer(ref @physics), @actor0, @localFrame0, @actor1, @localFrame1);
        }

        /// <summary>Create a spherical joint.</summary>
        public static global::PhysX.PxSphericalJoint* PhysPxSphericalJointCreate(this ref global::PhysX.PxPhysics @physics, global::PhysX.PxRigidActor* @actor0, global::PhysX.PxTransform* @localFrame0, global::PhysX.PxRigidActor* @actor1, global::PhysX.PxTransform* @localFrame1)
        {
            return NativeMethods.phys_PxSphericalJointCreate((global::PhysX.PxPhysics*)Unsafe.AsPointer(ref @physics), @actor0, @localFrame0, @actor1, @localFrame1);
        }

        /// <summary>Create a D6 joint.</summary>
        public static global::PhysX.PxD6Joint* PhysPxD6JointCreate(this ref global::PhysX.PxPhysics @physics, global::PhysX.PxRigidActor* @actor0, global::PhysX.PxTransform* @localFrame0, global::PhysX.PxRigidActor* @actor1, global::PhysX.PxTransform* @localFrame1)
        {
            return NativeMethods.phys_PxD6JointCreate((global::PhysX.PxPhysics*)Unsafe.AsPointer(ref @physics), @actor0, @localFrame0, @actor1, @localFrame1);
        }

        /// <summary>Create a gear Joint.</summary>
        public static global::PhysX.PxGearJoint* PhysPxGearJointCreate(this ref global::PhysX.PxPhysics @physics, global::PhysX.PxRigidActor* @actor0, global::PhysX.PxTransform* @localFrame0, global::PhysX.PxRigidActor* @actor1, global::PhysX.PxTransform* @localFrame1)
        {
            return NativeMethods.phys_PxGearJointCreate((global::PhysX.PxPhysics*)Unsafe.AsPointer(ref @physics), @actor0, @localFrame0, @actor1, @localFrame1);
        }

        /// <summary>Create a rack &amp; pinion Joint.</summary>
        public static global::PhysX.PxRackAndPinionJoint* PhysPxRackAndPinionJointCreate(this ref global::PhysX.PxPhysics @physics, global::PhysX.PxRigidActor* @actor0, global::PhysX.PxTransform* @localFrame0, global::PhysX.PxRigidActor* @actor1, global::PhysX.PxTransform* @localFrame1)
        {
            return NativeMethods.phys_PxRackAndPinionJointCreate((global::PhysX.PxPhysics*)Unsafe.AsPointer(ref @physics), @actor0, @localFrame0, @actor1, @localFrame1);
        }

        /// <summary>Convenience function to create a PxBVH object from a PxRigidActor.  The computed PxBVH can then be used in PxScene::addActor() or PxAggregate::addActor(). After adding the actor &amp; BVH to the scene/aggregate, release the PxBVH object by calling PxBVH::release().  The PxBVH for this actor.</summary>
        public static global::PhysX.PxBVH* RigidActorExtCreateBVHFromActor(this ref global::PhysX.PxPhysics @physics, global::PhysX.PxRigidActor* @actor)
        {
            return NativeMethods.PxRigidActorExt_createBVHFromActor((global::PhysX.PxPhysics*)Unsafe.AsPointer(ref @physics), @actor);
        }

        /// <summary>Creates an application managed registry for serialization.  PxSerializationRegistry instance.</summary>
        public static global::PhysX.PxSerializationRegistry* SerializationCreateSerializationRegistry(this ref global::PhysX.PxPhysics @physics)
        {
            return NativeMethods.PxSerialization_createSerializationRegistry((global::PhysX.PxPhysics*)Unsafe.AsPointer(ref @physics));
        }

        /// <summary>simple method to create a PxRigidDynamic actor with a single PxShape.  a new dynamic actor with the PxRigidBodyFlag, or NULL if it could not be constructed</summary>
        public static global::PhysX.PxRigidDynamic* PhysPxCreateDynamic(this ref global::PhysX.PxPhysics @sdk, global::PhysX.PxTransform* @transform, global::PhysX.PxGeometry* @geometry, global::PhysX.PxMaterial* @material, float @density, global::PhysX.PxTransform* @shapeOffset)
        {
            return NativeMethods.phys_PxCreateDynamic((global::PhysX.PxPhysics*)Unsafe.AsPointer(ref @sdk), @transform, @geometry, @material, @density, @shapeOffset);
        }

        /// <summary>simple method to create a PxRigidDynamic actor with a single PxShape.  a new dynamic actor with the PxRigidBodyFlag, or NULL if it could not be constructed</summary>
        public static global::PhysX.PxRigidDynamic* PhysPxCreateDynamic1(this ref global::PhysX.PxPhysics @sdk, global::PhysX.PxTransform* @transform, global::PhysX.PxShape* @shape, float @density)
        {
            return NativeMethods.phys_PxCreateDynamic_1((global::PhysX.PxPhysics*)Unsafe.AsPointer(ref @sdk), @transform, @shape, @density);
        }

        /// <summary>simple method to create a kinematic PxRigidDynamic actor with a single PxShape.  unlike PxCreateDynamic, the geometry is not restricted to box, capsule, sphere or convex. However, kinematics of other geometry types may not participate in simulation collision and may be used only for triggers or scene queries of moving objects under animation control. In this case the density parameter will be ignored and the created shape will be set up as a scene query only shape (see [`PxShapeFlag::eSCENE_QUERY_SHAPE`])  a new dynamic actor with the PxRigidBodyFlag::eKINEMATIC set, or NULL if it could not be constructed</summary>
        public static global::PhysX.PxRigidDynamic* PhysPxCreateKinematic(this ref global::PhysX.PxPhysics @sdk, global::PhysX.PxTransform* @transform, global::PhysX.PxGeometry* @geometry, global::PhysX.PxMaterial* @material, float @density, global::PhysX.PxTransform* @shapeOffset)
        {
            return NativeMethods.phys_PxCreateKinematic((global::PhysX.PxPhysics*)Unsafe.AsPointer(ref @sdk), @transform, @geometry, @material, @density, @shapeOffset);
        }

        /// <summary>simple method to create a kinematic PxRigidDynamic actor with a single PxShape.  unlike PxCreateDynamic, the geometry is not restricted to box, capsule, sphere or convex. However, kinematics of other geometry types may not participate in simulation collision and may be used only for triggers or scene queries of moving objects under animation control. In this case the density parameter will be ignored and the created shape will be set up as a scene query only shape (see [`PxShapeFlag::eSCENE_QUERY_SHAPE`])  a new dynamic actor with the PxRigidBodyFlag::eKINEMATIC set, or NULL if it could not be constructed</summary>
        public static global::PhysX.PxRigidDynamic* PhysPxCreateKinematic1(this ref global::PhysX.PxPhysics @sdk, global::PhysX.PxTransform* @transform, global::PhysX.PxShape* @shape, float @density)
        {
            return NativeMethods.phys_PxCreateKinematic_1((global::PhysX.PxPhysics*)Unsafe.AsPointer(ref @sdk), @transform, @shape, @density);
        }

        /// <summary>simple method to create a PxRigidStatic actor with a single PxShape.  a new static actor, or NULL if it could not be constructed</summary>
        public static global::PhysX.PxRigidStatic* PhysPxCreateStatic(this ref global::PhysX.PxPhysics @sdk, global::PhysX.PxTransform* @transform, global::PhysX.PxGeometry* @geometry, global::PhysX.PxMaterial* @material, global::PhysX.PxTransform* @shapeOffset)
        {
            return NativeMethods.phys_PxCreateStatic((global::PhysX.PxPhysics*)Unsafe.AsPointer(ref @sdk), @transform, @geometry, @material, @shapeOffset);
        }

        /// <summary>simple method to create a PxRigidStatic actor with a single PxShape.  a new static actor, or NULL if it could not be constructed</summary>
        public static global::PhysX.PxRigidStatic* PhysPxCreateStatic1(this ref global::PhysX.PxPhysics @sdk, global::PhysX.PxTransform* @transform, global::PhysX.PxShape* @shape)
        {
            return NativeMethods.phys_PxCreateStatic_1((global::PhysX.PxPhysics*)Unsafe.AsPointer(ref @sdk), @transform, @shape);
        }

        /// <summary>create a shape by copying attributes from another shape  The function clones a PxShape. The following properties are copied: - geometry - flags - materials - actor-local pose - contact offset - rest offset - simulation filter data - query filter data - torsional patch radius - minimum torsional patch radius  The following are not copied and retain their default values: - name - user data  the newly-created rigid static</summary>
        public static global::PhysX.PxShape* PhysPxCloneShape(this ref global::PhysX.PxPhysics @physicsSDK, global::PhysX.PxShape* @shape, bool @isExclusive)
        {
            return NativeMethods.phys_PxCloneShape((global::PhysX.PxPhysics*)Unsafe.AsPointer(ref @physicsSDK), @shape, @isExclusive);
        }

        /// <summary>create a static body by copying attributes from another rigid actor  The function clones a PxRigidDynamic or PxRigidStatic as a PxRigidStatic. A uniform scale is applied. The following properties are copied: - shapes - actor flags - owner client and client behavior bits - dominance group  The following are not copied and retain their default values: - name - joints or observers - aggregate or scene membership - user data  Transforms are not copied with bit-exact accuracy.  the newly-created rigid static</summary>
        public static global::PhysX.PxRigidStatic* PhysPxCloneStatic(this ref global::PhysX.PxPhysics @physicsSDK, global::PhysX.PxTransform* @transform, global::PhysX.PxRigidActor* @actor)
        {
            return NativeMethods.phys_PxCloneStatic((global::PhysX.PxPhysics*)Unsafe.AsPointer(ref @physicsSDK), @transform, @actor);
        }

        /// <summary>create a dynamic body by copying attributes from an existing body  The following properties are copied: - shapes - actor flags, rigidDynamic flags and rigidDynamic lock flags - mass, moment of inertia, and center of mass frame - linear and angular velocity - linear and angular damping - maximum linear velocity - maximum angular velocity - position and velocity solver iterations - maximum depenetration velocity - sleep threshold - contact report threshold - dominance group - owner client and client behavior bits - name pointer - kinematic target  The following are not copied and retain their default values: - name - joints or observers - aggregate or scene membership - sleep timer - user data  Transforms are not copied with bit-exact accuracy.  the newly-created rigid static</summary>
        public static global::PhysX.PxRigidDynamic* PhysPxCloneDynamic(this ref global::PhysX.PxPhysics @physicsSDK, global::PhysX.PxTransform* @transform, global::PhysX.PxRigidDynamic* @body)
        {
            return NativeMethods.phys_PxCloneDynamic((global::PhysX.PxPhysics*)Unsafe.AsPointer(ref @physicsSDK), @transform, @body);
        }

        /// <summary>create a plane actor. The plane equation is n.x + d = 0  a new static actor, or NULL if it could not be constructed</summary>
        public static global::PhysX.PxRigidStatic* PhysPxCreatePlane(this ref global::PhysX.PxPhysics @sdk, global::PhysX.PxPlane* @plane, global::PhysX.PxMaterial* @material)
        {
            return NativeMethods.phys_PxCreatePlane((global::PhysX.PxPhysics*)Unsafe.AsPointer(ref @sdk), @plane, @material);
        }

        /// <summary>Initialize the PhysXExtensions library.  This should be called before calling any functions or methods in extensions which may require allocation.  This function does not need to be called before creating a PxDefaultAllocator object.</summary>
        public static bool PhysPxInitExtensions(this ref global::PhysX.PxPhysics @physics, global::PhysX.PxPvd* @pvd)
        {
            return NativeMethods.phys_PxInitExtensions((global::PhysX.PxPhysics*)Unsafe.AsPointer(ref @physics), @pvd);
        }

        public static global::PhysX.PxRepXInstantiationArgs RepXInstantiationArgsNew(this ref global::PhysX.PxPhysics @inPhysics, global::PhysX.PxCooking* @inCooking, global::PhysX.PxStringTable* @inStringTable)
        {
            return NativeMethods.PxRepXInstantiationArgs_new((global::PhysX.PxPhysics*)Unsafe.AsPointer(ref @inPhysics), @inCooking, @inStringTable);
        }

        #endregion

        #region PhysX.PxQueryFilterCallback(3)

        /// <summary>This filter callback is executed before the exact intersection test if PxQueryFlag::ePREFILTER flag was set.  the updated type for this hit  (see [`PxQueryHitType`])</summary>
        public static global::PhysX.PxQueryHitType PreFilterMut(this ref global::PhysX.PxQueryFilterCallback @self_, global::PhysX.PxFilterData* @filterData, global::PhysX.PxShape* @shape, global::PhysX.PxRigidActor* @actor, global::PhysX.PxHitFlags* @queryFlags)
        {
            return NativeMethods.PxQueryFilterCallback_preFilter_mut((global::PhysX.PxQueryFilterCallback*)Unsafe.AsPointer(ref @self_), @filterData, @shape, @actor, @queryFlags);
        }

        /// <summary>This filter callback is executed if the exact intersection test returned true and PxQueryFlag::ePOSTFILTER flag was set.  the updated hit type for this hit  (see [`PxQueryHitType`])</summary>
        public static global::PhysX.PxQueryHitType PostFilterMut(this ref global::PhysX.PxQueryFilterCallback @self_, global::PhysX.PxFilterData* @filterData, global::PhysX.PxQueryHit* @hit, global::PhysX.PxShape* @shape, global::PhysX.PxRigidActor* @actor)
        {
            return NativeMethods.PxQueryFilterCallback_postFilter_mut((global::PhysX.PxQueryFilterCallback*)Unsafe.AsPointer(ref @self_), @filterData, @hit, @shape, @actor);
        }

        /// <summary>virtual destructor</summary>
        public static void Delete(this ref global::PhysX.PxQueryFilterCallback @self_)
        {
            NativeMethods.PxQueryFilterCallback_delete((global::PhysX.PxQueryFilterCallback*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxRigidDynamic(23)

        /// <summary>Moves kinematically controlled dynamic actors through the game world.  You set a dynamic actor to be kinematic using the PxRigidBodyFlag::eKINEMATIC flag with setRigidBodyFlag().  The move command will result in a velocity that will move the body into the desired pose. After the move is carried out during a single time step, the velocity is returned to zero. Thus, you must continuously call this in every time step for kinematic actors so that they move along a path.  This function simply stores the move destination until the next simulation step is processed, so consecutive calls will simply overwrite the stored target variable.  The motion is always fully carried out.  It is invalid to use this method if the actor has not been added to a scene already or if PxActorFlag::eDISABLE_SIMULATION is set.  Sleeping: This call wakes the actor if it is sleeping and will set the wake counter to [`PxSceneDesc::wakeCounterResetValue`].</summary>
        public static void SetKinematicTargetMut(this ref global::PhysX.PxRigidDynamic @self_, global::PhysX.PxTransform* @destination)
        {
            NativeMethods.PxRigidDynamic_setKinematicTarget_mut((global::PhysX.PxRigidDynamic*)Unsafe.AsPointer(ref @self_), @destination);
        }

        /// <summary>Get target pose of a kinematically controlled dynamic actor.  True if the actor is a kinematically controlled dynamic and the target has been set, else False.</summary>
        public static bool GetKinematicTarget(this ref global::PhysX.PxRigidDynamic @self_, global::PhysX.PxTransform* @target)
        {
            return NativeMethods.PxRigidDynamic_getKinematicTarget((global::PhysX.PxRigidDynamic*)Unsafe.AsPointer(ref @self_), @target);
        }

        /// <summary>Returns true if this body is sleeping.  When an actor does not move for a period of time, it is no longer simulated in order to save time. This state is called sleeping. However, because the object automatically wakes up when it is either touched by an awake object, or one of its properties is changed by the user, the entire sleep mechanism should be transparent to the user.  In general, a dynamic rigid actor is guaranteed to be awake if at least one of the following holds:  The wake counter is positive (see [`setWakeCounter`]()).  The linear or angular velocity is non-zero.  A non-zero force or torque has been applied.  If a dynamic rigid actor is sleeping, the following state is guaranteed:  The wake counter is zero.  The linear and angular velocity is zero.  There is no force update pending.  When an actor gets inserted into a scene, it will be considered asleep if all the points above hold, else it will be treated as awake.  If an actor is asleep after the call to PxScene::fetchResults() returns, it is guaranteed that the pose of the actor was not changed. You can use this information to avoid updating the transforms of associated objects.  A kinematic actor is asleep unless a target pose has been set (in which case it will stay awake until two consecutive simulation steps without a target pose being set have passed). The wake counter will get set to zero or to the reset value [`PxSceneDesc::wakeCounterResetValue`] in the case where a target pose has been set to be consistent with the definitions above.  It is invalid to use this method if the actor has not been added to a scene already.  It is not allowed to use this method while the simulation is running.  True if the actor is sleeping.</summary>
        public static bool IsSleeping(this ref global::PhysX.PxRigidDynamic @self_)
        {
            return NativeMethods.PxRigidDynamic_isSleeping((global::PhysX.PxRigidDynamic*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Sets the mass-normalized kinetic energy threshold below which an actor may go to sleep.  Actors whose kinetic energy divided by their mass is below this threshold will be candidates for sleeping.  Default: 5e-5f * PxTolerancesScale::speed * PxTolerancesScale::speed</summary>
        public static void SetSleepThresholdMut(this ref global::PhysX.PxRigidDynamic @self_, float @threshold)
        {
            NativeMethods.PxRigidDynamic_setSleepThreshold_mut((global::PhysX.PxRigidDynamic*)Unsafe.AsPointer(ref @self_), @threshold);
        }

        /// <summary>Returns the mass-normalized kinetic energy below which an actor may go to sleep.  The energy threshold for sleeping.</summary>
        public static float GetSleepThreshold(this ref global::PhysX.PxRigidDynamic @self_)
        {
            return NativeMethods.PxRigidDynamic_getSleepThreshold((global::PhysX.PxRigidDynamic*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Sets the mass-normalized kinetic energy threshold below which an actor may participate in stabilization.  Actors whose kinetic energy divided by their mass is above this threshold will not participate in stabilization.  This value has no effect if PxSceneFlag::eENABLE_STABILIZATION was not enabled on the PxSceneDesc.  Default: 1e-5f * PxTolerancesScale::speed * PxTolerancesScale::speed</summary>
        public static void SetStabilizationThresholdMut(this ref global::PhysX.PxRigidDynamic @self_, float @threshold)
        {
            NativeMethods.PxRigidDynamic_setStabilizationThreshold_mut((global::PhysX.PxRigidDynamic*)Unsafe.AsPointer(ref @self_), @threshold);
        }

        /// <summary>Returns the mass-normalized kinetic energy below which an actor may participate in stabilization.  Actors whose kinetic energy divided by their mass is above this threshold will not participate in stabilization.  The energy threshold for participating in stabilization.</summary>
        public static float GetStabilizationThreshold(this ref global::PhysX.PxRigidDynamic @self_)
        {
            return NativeMethods.PxRigidDynamic_getStabilizationThreshold((global::PhysX.PxRigidDynamic*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Reads the PxRigidDynamic lock flags.  See the list of flags [`PxRigidDynamicLockFlag`]  The values of the PxRigidDynamicLock flags.</summary>
        public static global::PhysX.PxRigidDynamicLockFlags GetRigidDynamicLockFlags(this ref global::PhysX.PxRigidDynamic @self_)
        {
            return NativeMethods.PxRigidDynamic_getRigidDynamicLockFlags((global::PhysX.PxRigidDynamic*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Raises or clears a particular rigid dynamic lock flag.  See the list of flags [`PxRigidDynamicLockFlag`]  Default: no flags are set</summary>
        public static void SetRigidDynamicLockFlagMut(this ref global::PhysX.PxRigidDynamic @self_, global::PhysX.PxRigidDynamicLockFlag @flag, bool @value)
        {
            NativeMethods.PxRigidDynamic_setRigidDynamicLockFlag_mut((global::PhysX.PxRigidDynamic*)Unsafe.AsPointer(ref @self_), @flag, @value);
        }

        public static void SetRigidDynamicLockFlagsMut(this ref global::PhysX.PxRigidDynamic @self_, global::PhysX.PxRigidDynamicLockFlags @flags)
        {
            NativeMethods.PxRigidDynamic_setRigidDynamicLockFlags_mut((global::PhysX.PxRigidDynamic*)Unsafe.AsPointer(ref @self_), @flags);
        }

        /// <summary>Retrieves the linear velocity of an actor.  It is not allowed to use this method while the simulation is running (except during PxScene::collide(), in PxContactModifyCallback or in contact report callbacks).  The linear velocity of the actor.</summary>
        public static global::PhysX.PxVec3 GetLinearVelocity(this ref global::PhysX.PxRigidDynamic @self_)
        {
            return NativeMethods.PxRigidDynamic_getLinearVelocity((global::PhysX.PxRigidDynamic*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Sets the linear velocity of the actor.  Note that if you continuously set the velocity of an actor yourself, forces such as gravity or friction will not be able to manifest themselves, because forces directly influence only the velocity/momentum of an actor.  Default: (0.0, 0.0, 0.0)  Sleeping: This call wakes the actor if it is sleeping, and the autowake parameter is true (default) or the new velocity is non-zero.  It is invalid to use this method if PxActorFlag::eDISABLE_SIMULATION is set.</summary>
        public static void SetLinearVelocityMut(this ref global::PhysX.PxRigidDynamic @self_, global::PhysX.PxVec3* @linVel, bool @autowake)
        {
            NativeMethods.PxRigidDynamic_setLinearVelocity_mut((global::PhysX.PxRigidDynamic*)Unsafe.AsPointer(ref @self_), @linVel, @autowake);
        }

        /// <summary>Retrieves the angular velocity of the actor.  It is not allowed to use this method while the simulation is running (except during PxScene::collide(), in PxContactModifyCallback or in contact report callbacks).  The angular velocity of the actor.</summary>
        public static global::PhysX.PxVec3 GetAngularVelocity(this ref global::PhysX.PxRigidDynamic @self_)
        {
            return NativeMethods.PxRigidDynamic_getAngularVelocity((global::PhysX.PxRigidDynamic*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Sets the angular velocity of the actor.  Note that if you continuously set the angular velocity of an actor yourself, forces such as friction will not be able to rotate the actor, because forces directly influence only the velocity/momentum.  Default: (0.0, 0.0, 0.0)  Sleeping: This call wakes the actor if it is sleeping, and the autowake parameter is true (default) or the new velocity is non-zero.  It is invalid to use this method if PxActorFlag::eDISABLE_SIMULATION is set.</summary>
        public static void SetAngularVelocityMut(this ref global::PhysX.PxRigidDynamic @self_, global::PhysX.PxVec3* @angVel, bool @autowake)
        {
            NativeMethods.PxRigidDynamic_setAngularVelocity_mut((global::PhysX.PxRigidDynamic*)Unsafe.AsPointer(ref @self_), @angVel, @autowake);
        }

        /// <summary>Sets the wake counter for the actor.  The wake counter value determines the minimum amount of time until the body can be put to sleep. Please note that a body will not be put to sleep if the energy is above the specified threshold (see [`setSleepThreshold`]()) or if other awake bodies are touching it.  Passing in a positive value will wake the actor up automatically.  It is invalid to use this method for kinematic actors since the wake counter for kinematics is defined based on whether a target pose has been set (see the comment in [`isSleeping`]()).  It is invalid to use this method if PxActorFlag::eDISABLE_SIMULATION is set.  Default: 0.4 (which corresponds to 20 frames for a time step of 0.02)</summary>
        public static void SetWakeCounterMut(this ref global::PhysX.PxRigidDynamic @self_, float @wakeCounterValue)
        {
            NativeMethods.PxRigidDynamic_setWakeCounter_mut((global::PhysX.PxRigidDynamic*)Unsafe.AsPointer(ref @self_), @wakeCounterValue);
        }

        /// <summary>Returns the wake counter of the actor.  It is not allowed to use this method while the simulation is running.  The wake counter of the actor.</summary>
        public static float GetWakeCounter(this ref global::PhysX.PxRigidDynamic @self_)
        {
            return NativeMethods.PxRigidDynamic_getWakeCounter((global::PhysX.PxRigidDynamic*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Wakes up the actor if it is sleeping.  The actor will get woken up and might cause other touching actors to wake up as well during the next simulation step.  This will set the wake counter of the actor to the value specified in [`PxSceneDesc::wakeCounterResetValue`].  It is invalid to use this method if the actor has not been added to a scene already or if PxActorFlag::eDISABLE_SIMULATION is set.  It is invalid to use this method for kinematic actors since the sleep state for kinematics is defined based on whether a target pose has been set (see the comment in [`isSleeping`]()).</summary>
        public static void WakeUpMut(this ref global::PhysX.PxRigidDynamic @self_)
        {
            NativeMethods.PxRigidDynamic_wakeUp_mut((global::PhysX.PxRigidDynamic*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Forces the actor to sleep.  The actor will stay asleep during the next simulation step if not touched by another non-sleeping actor.  Any applied force will be cleared and the velocity and the wake counter of the actor will be set to 0.  It is invalid to use this method if the actor has not been added to a scene already or if PxActorFlag::eDISABLE_SIMULATION is set.  It is invalid to use this method for kinematic actors since the sleep state for kinematics is defined based on whether a target pose has been set (see the comment in [`isSleeping`]()).</summary>
        public static void PutToSleepMut(this ref global::PhysX.PxRigidDynamic @self_)
        {
            NativeMethods.PxRigidDynamic_putToSleep_mut((global::PhysX.PxRigidDynamic*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Sets the solver iteration counts for the body.  The solver iteration count determines how accurately joints and contacts are resolved. If you are having trouble with jointed bodies oscillating and behaving erratically, then setting a higher position iteration count may improve their stability.  If intersecting bodies are being depenetrated too violently, increase the number of velocity iterations. More velocity iterations will drive the relative exit velocity of the intersecting objects closer to the correct value given the restitution.  Default: 4 position iterations, 1 velocity iteration</summary>
        public static void SetSolverIterationCountsMut(this ref global::PhysX.PxRigidDynamic @self_, uint @minPositionIters, uint @minVelocityIters)
        {
            NativeMethods.PxRigidDynamic_setSolverIterationCounts_mut((global::PhysX.PxRigidDynamic*)Unsafe.AsPointer(ref @self_), @minPositionIters, @minVelocityIters);
        }

        /// <summary>Retrieves the solver iteration counts.</summary>
        public static void GetSolverIterationCounts(this ref global::PhysX.PxRigidDynamic @self_, uint* @minPositionIters, uint* @minVelocityIters)
        {
            NativeMethods.PxRigidDynamic_getSolverIterationCounts((global::PhysX.PxRigidDynamic*)Unsafe.AsPointer(ref @self_), @minPositionIters, @minVelocityIters);
        }

        /// <summary>Retrieves the force threshold for contact reports.  The contact report threshold is a force threshold. If the force between two actors exceeds this threshold for either of the two actors, a contact report will be generated according to the contact report threshold flags provided by the filter shader/callback. See [`PxPairFlag`].  The threshold used for a collision between a dynamic actor and the static environment is the threshold of the dynamic actor, and all contacts with static actors are summed to find the total normal force.  Default: PX_MAX_F32  Force threshold for contact reports.</summary>
        public static float GetContactReportThreshold(this ref global::PhysX.PxRigidDynamic @self_)
        {
            return NativeMethods.PxRigidDynamic_getContactReportThreshold((global::PhysX.PxRigidDynamic*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Sets the force threshold for contact reports.  See [`getContactReportThreshold`]().</summary>
        public static void SetContactReportThresholdMut(this ref global::PhysX.PxRigidDynamic @self_, float @threshold)
        {
            NativeMethods.PxRigidDynamic_setContactReportThreshold_mut((global::PhysX.PxRigidDynamic*)Unsafe.AsPointer(ref @self_), @threshold);
        }

        public static byte* GetConcreteTypeName(this ref global::PhysX.PxRigidDynamic @self_)
        {
            return NativeMethods.PxRigidDynamic_getConcreteTypeName((global::PhysX.PxRigidDynamic*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxRigidStatic(1)

        public static byte* GetConcreteTypeName(this ref global::PhysX.PxRigidStatic @self_)
        {
            return NativeMethods.PxRigidStatic_getConcreteTypeName((global::PhysX.PxRigidStatic*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxSceneQueryDesc(3)

        /// <summary>(re)sets the structure to the default.</summary>
        public static void SetToDefaultMut(this ref global::PhysX.PxSceneQueryDesc @self_)
        {
            NativeMethods.PxSceneQueryDesc_setToDefault_mut((global::PhysX.PxSceneQueryDesc*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Returns true if the descriptor is valid.  true if the current settings are valid.</summary>
        public static bool IsValid(this ref global::PhysX.PxSceneQueryDesc @self_)
        {
            return NativeMethods.PxSceneQueryDesc_isValid((global::PhysX.PxSceneQueryDesc*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Creates an external scene query system.  An external SQ system is the part of a PxScene that deals with scene queries (SQ). This is usually taken care of by an internal implementation inside PxScene, but it is also possible to re-route all SQ calls to an external implementation, potentially opening the door to some customizations in behavior and features for advanced users.  The following external SQ system is an example of how an implementation would look like. It re-uses much of the same code as the internal version, but it could be re-implemented in a completely different way to match users' specific needs.  An external SQ system instance</summary>
        public static global::PhysX.PxSceneQuerySystem* PhysPxCreateExternalSceneQuerySystem(this ref global::PhysX.PxSceneQueryDesc @desc, ulong @contextID)
        {
            return NativeMethods.phys_PxCreateExternalSceneQuerySystem((global::PhysX.PxSceneQueryDesc*)Unsafe.AsPointer(ref @desc), @contextID);
        }

        #endregion

        #region PhysX.PxSceneQuerySystemBase(10)

        /// <summary>Sets the rebuild rate of the dynamic tree pruning structures.</summary>
        public static void SetDynamicTreeRebuildRateHintMut(this ref global::PhysX.PxSceneQuerySystemBase @self_, uint @dynamicTreeRebuildRateHint)
        {
            NativeMethods.PxSceneQuerySystemBase_setDynamicTreeRebuildRateHint_mut((global::PhysX.PxSceneQuerySystemBase*)Unsafe.AsPointer(ref @self_), @dynamicTreeRebuildRateHint);
        }

        /// <summary>Retrieves the rebuild rate of the dynamic tree pruning structures.  The rebuild rate of the dynamic tree pruning structures.</summary>
        public static uint GetDynamicTreeRebuildRateHint(this ref global::PhysX.PxSceneQuerySystemBase @self_)
        {
            return NativeMethods.PxSceneQuerySystemBase_getDynamicTreeRebuildRateHint((global::PhysX.PxSceneQuerySystemBase*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Forces dynamic trees to be immediately rebuilt.  PxScene will call this function with the PX_SCENE_PRUNER_STATIC or PX_SCENE_PRUNER_DYNAMIC value.</summary>
        public static void ForceRebuildDynamicTreeMut(this ref global::PhysX.PxSceneQuerySystemBase @self_, uint @prunerIndex)
        {
            NativeMethods.PxSceneQuerySystemBase_forceRebuildDynamicTree_mut((global::PhysX.PxSceneQuerySystemBase*)Unsafe.AsPointer(ref @self_), @prunerIndex);
        }

        /// <summary>Sets scene query update mode</summary>
        public static void SetUpdateModeMut(this ref global::PhysX.PxSceneQuerySystemBase @self_, global::PhysX.PxSceneQueryUpdateMode @updateMode)
        {
            NativeMethods.PxSceneQuerySystemBase_setUpdateMode_mut((global::PhysX.PxSceneQuerySystemBase*)Unsafe.AsPointer(ref @self_), @updateMode);
        }

        /// <summary>Gets scene query update mode  Current scene query update mode.</summary>
        public static global::PhysX.PxSceneQueryUpdateMode GetUpdateMode(this ref global::PhysX.PxSceneQuerySystemBase @self_)
        {
            return NativeMethods.PxSceneQuerySystemBase_getUpdateMode((global::PhysX.PxSceneQuerySystemBase*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Retrieves the system's internal scene query timestamp, increased each time a change to the static scene query structure is performed.  scene query static timestamp</summary>
        public static uint GetStaticTimestamp(this ref global::PhysX.PxSceneQuerySystemBase @self_)
        {
            return NativeMethods.PxSceneQuerySystemBase_getStaticTimestamp((global::PhysX.PxSceneQuerySystemBase*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Flushes any changes to the scene query representation.  This method updates the state of the scene query representation to match changes in the scene state.  By default, these changes are buffered until the next query is submitted. Calling this function will not change the results from scene queries, but can be used to ensure that a query will not perform update work in the course of its execution.  A thread performing updates will hold a write lock on the query structure, and thus stall other querying threads. In multithread scenarios it can be useful to explicitly schedule the period where this lock may be held for a significant period, so that subsequent queries issued from multiple threads will not block.</summary>
        public static void FlushUpdatesMut(this ref global::PhysX.PxSceneQuerySystemBase @self_)
        {
            NativeMethods.PxSceneQuerySystemBase_flushUpdates_mut((global::PhysX.PxSceneQuerySystemBase*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Performs a raycast against objects in the scene, returns results in a PxRaycastBuffer object or via a custom user callback implementation inheriting from PxRaycastCallback.  Touching hits are not ordered.  Shooting a ray from within an object leads to different results depending on the shape type. Please check the details in user guide article SceneQuery. User can ignore such objects by employing one of the provided filter mechanisms.  True if any touching or blocking hits were found or any hit was found in case PxQueryFlag::eANY_HIT was specified.</summary>
        public static bool Raycast(this ref global::PhysX.PxSceneQuerySystemBase @self_, global::PhysX.PxVec3* @origin, global::PhysX.PxVec3* @unitDir, float @distance, global::PhysX.PxRaycastCallback* @hitCall, global::PhysX.PxHitFlags @hitFlags, global::PhysX.PxQueryFilterData* @filterData, global::PhysX.PxQueryFilterCallback* @filterCall, global::PhysX.PxQueryCache* @cache, global::PhysX.PxGeometryQueryFlags @queryFlags)
        {
            return NativeMethods.PxSceneQuerySystemBase_raycast((global::PhysX.PxSceneQuerySystemBase*)Unsafe.AsPointer(ref @self_), @origin, @unitDir, @distance, @hitCall, @hitFlags, @filterData, @filterCall, @cache, @queryFlags);
        }

        /// <summary>Performs a sweep test against objects in the scene, returns results in a PxSweepBuffer object or via a custom user callback implementation inheriting from PxSweepCallback.  Touching hits are not ordered.  If a shape from the scene is already overlapping with the query shape in its starting position, the hit is returned unless eASSUME_NO_INITIAL_OVERLAP was specified.  True if any touching or blocking hits were found or any hit was found in case PxQueryFlag::eANY_HIT was specified.</summary>
        public static bool Sweep(this ref global::PhysX.PxSceneQuerySystemBase @self_, global::PhysX.PxGeometry* @geometry, global::PhysX.PxTransform* @pose, global::PhysX.PxVec3* @unitDir, float @distance, global::PhysX.PxSweepCallback* @hitCall, global::PhysX.PxHitFlags @hitFlags, global::PhysX.PxQueryFilterData* @filterData, global::PhysX.PxQueryFilterCallback* @filterCall, global::PhysX.PxQueryCache* @cache, float @inflation, global::PhysX.PxGeometryQueryFlags @queryFlags)
        {
            return NativeMethods.PxSceneQuerySystemBase_sweep((global::PhysX.PxSceneQuerySystemBase*)Unsafe.AsPointer(ref @self_), @geometry, @pose, @unitDir, @distance, @hitCall, @hitFlags, @filterData, @filterCall, @cache, @inflation, @queryFlags);
        }

        /// <summary>Performs an overlap test of a given geometry against objects in the scene, returns results in a PxOverlapBuffer object or via a custom user callback implementation inheriting from PxOverlapCallback.  Filtering: returning eBLOCK from user filter for overlap queries will cause a warning (see [`PxQueryHitType`]).  True if any touching or blocking hits were found or any hit was found in case PxQueryFlag::eANY_HIT was specified.  eBLOCK should not be returned from user filters for overlap(). Doing so will result in undefined behavior, and a warning will be issued.  If the PxQueryFlag::eNO_BLOCK flag is set, the eBLOCK will instead be automatically converted to an eTOUCH and the warning suppressed.</summary>
        public static bool Overlap(this ref global::PhysX.PxSceneQuerySystemBase @self_, global::PhysX.PxGeometry* @geometry, global::PhysX.PxTransform* @pose, global::PhysX.PxOverlapCallback* @hitCall, global::PhysX.PxQueryFilterData* @filterData, global::PhysX.PxQueryFilterCallback* @filterCall, global::PhysX.PxQueryCache* @cache, global::PhysX.PxGeometryQueryFlags @queryFlags)
        {
            return NativeMethods.PxSceneQuerySystemBase_overlap((global::PhysX.PxSceneQuerySystemBase*)Unsafe.AsPointer(ref @self_), @geometry, @pose, @hitCall, @filterData, @filterCall, @cache, @queryFlags);
        }

        #endregion

        #region PhysX.PxSceneSQSystem(10)

        /// <summary>Sets scene query update mode</summary>
        public static void SetSceneQueryUpdateModeMut(this ref global::PhysX.PxSceneSQSystem @self_, global::PhysX.PxSceneQueryUpdateMode @updateMode)
        {
            NativeMethods.PxSceneSQSystem_setSceneQueryUpdateMode_mut((global::PhysX.PxSceneSQSystem*)Unsafe.AsPointer(ref @self_), @updateMode);
        }

        /// <summary>Gets scene query update mode  Current scene query update mode.</summary>
        public static global::PhysX.PxSceneQueryUpdateMode GetSceneQueryUpdateMode(this ref global::PhysX.PxSceneSQSystem @self_)
        {
            return NativeMethods.PxSceneSQSystem_getSceneQueryUpdateMode((global::PhysX.PxSceneSQSystem*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Retrieves the scene's internal scene query timestamp, increased each time a change to the static scene query structure is performed.  scene query static timestamp</summary>
        public static uint GetSceneQueryStaticTimestamp(this ref global::PhysX.PxSceneSQSystem @self_)
        {
            return NativeMethods.PxSceneSQSystem_getSceneQueryStaticTimestamp((global::PhysX.PxSceneSQSystem*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Flushes any changes to the scene query representation.</summary>
        public static void FlushQueryUpdatesMut(this ref global::PhysX.PxSceneSQSystem @self_)
        {
            NativeMethods.PxSceneSQSystem_flushQueryUpdates_mut((global::PhysX.PxSceneSQSystem*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Forces dynamic trees to be immediately rebuilt.</summary>
        public static void ForceDynamicTreeRebuildMut(this ref global::PhysX.PxSceneSQSystem @self_, bool @rebuildStaticStructure, bool @rebuildDynamicStructure)
        {
            NativeMethods.PxSceneSQSystem_forceDynamicTreeRebuild_mut((global::PhysX.PxSceneSQSystem*)Unsafe.AsPointer(ref @self_), @rebuildStaticStructure, @rebuildDynamicStructure);
        }

        /// <summary>Return the value of PxSceneQueryDesc::staticStructure that was set when creating the scene with PxPhysics::createScene</summary>
        public static global::PhysX.PxPruningStructureType GetStaticStructure(this ref global::PhysX.PxSceneSQSystem @self_)
        {
            return NativeMethods.PxSceneSQSystem_getStaticStructure((global::PhysX.PxSceneSQSystem*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Return the value of PxSceneQueryDesc::dynamicStructure that was set when creating the scene with PxPhysics::createScene</summary>
        public static global::PhysX.PxPruningStructureType GetDynamicStructure(this ref global::PhysX.PxSceneSQSystem @self_)
        {
            return NativeMethods.PxSceneSQSystem_getDynamicStructure((global::PhysX.PxSceneSQSystem*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Executes scene queries update tasks.  This function will refit dirty shapes within the pruner and will execute a task to build a new AABB tree, which is build on a different thread. The new AABB tree is built based on the dynamic tree rebuild hint rate. Once the new tree is ready it will be commited in next fetchQueries call, which must be called after.  This function is equivalent to the following PxSceneQuerySystem calls: Synchronous calls: - PxSceneQuerySystemBase::flushUpdates() - handle0 = PxSceneQuerySystem::prepareSceneQueryBuildStep(PX_SCENE_PRUNER_STATIC) - handle1 = PxSceneQuerySystem::prepareSceneQueryBuildStep(PX_SCENE_PRUNER_DYNAMIC) Asynchronous calls: - PxSceneQuerySystem::sceneQueryBuildStep(handle0); - PxSceneQuerySystem::sceneQueryBuildStep(handle1);  This function is part of the PxSceneSQSystem interface because it uses the PxScene task system under the hood. But it calls PxSceneQuerySystem functions, which are independent from this system and could be called in a similar fashion by a separate, possibly user-defined task manager.  If PxSceneQueryUpdateMode::eBUILD_DISABLED_COMMIT_DISABLED is used, it is required to update the scene queries using this function.</summary>
        public static void SceneQueriesUpdateMut(this ref global::PhysX.PxSceneSQSystem @self_, global::PhysX.PxBaseTask* @completionTask, bool @controlSimulation)
        {
            NativeMethods.PxSceneSQSystem_sceneQueriesUpdate_mut((global::PhysX.PxSceneSQSystem*)Unsafe.AsPointer(ref @self_), @completionTask, @controlSimulation);
        }

        /// <summary>This checks to see if the scene queries update has completed.  This does not cause the data available for reading to be updated with the results of the scene queries update, it is simply a status check. The bool will allow it to either return immediately or block waiting for the condition to be met so that it can return true  True if the results are available.</summary>
        public static bool CheckQueriesMut(this ref global::PhysX.PxSceneSQSystem @self_, bool @block)
        {
            return NativeMethods.PxSceneSQSystem_checkQueries_mut((global::PhysX.PxSceneSQSystem*)Unsafe.AsPointer(ref @self_), @block);
        }

        /// <summary>This method must be called after sceneQueriesUpdate. It will wait for the scene queries update to finish. If the user makes an illegal scene queries update call, the SDK will issue an error message.  If a new AABB tree build finished, then during fetchQueries the current tree within the pruning structure is swapped with the new tree.</summary>
        public static bool FetchQueriesMut(this ref global::PhysX.PxSceneSQSystem @self_, bool @block)
        {
            return NativeMethods.PxSceneSQSystem_fetchQueries_mut((global::PhysX.PxSceneSQSystem*)Unsafe.AsPointer(ref @self_), @block);
        }

        #endregion

        #region PhysX.PxSceneQuerySystem(17)

        /// <summary>Decrements the reference count of the object and releases it if the new reference count is zero.</summary>
        public static void ReleaseMut(this ref global::PhysX.PxSceneQuerySystem @self_)
        {
            NativeMethods.PxSceneQuerySystem_release_mut((global::PhysX.PxSceneQuerySystem*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Acquires a counted reference to this object.  This method increases the reference count of the object by 1. Decrement the reference count by calling release()</summary>
        public static void AcquireReferenceMut(this ref global::PhysX.PxSceneQuerySystem @self_)
        {
            NativeMethods.PxSceneQuerySystem_acquireReference_mut((global::PhysX.PxSceneQuerySystem*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Preallocates internal arrays to minimize the amount of reallocations.  The system does not prevent more allocations than given numbers. It is legal to not call this function at all, or to add more shapes to the system than the preallocated amounts.</summary>
        public static void PreallocateMut(this ref global::PhysX.PxSceneQuerySystem @self_, uint @prunerIndex, uint @nbShapes)
        {
            NativeMethods.PxSceneQuerySystem_preallocate_mut((global::PhysX.PxSceneQuerySystem*)Unsafe.AsPointer(ref @self_), @prunerIndex, @nbShapes);
        }

        /// <summary>Frees internal memory that may not be in-use anymore.  This is an entry point for reclaiming transient memory allocated at some point by the SQ system, but which wasn't been immediately freed for performance reason. Calling this function might free some memory, but it might also produce a new set of allocations in the next frame.</summary>
        public static void FlushMemoryMut(this ref global::PhysX.PxSceneQuerySystem @self_)
        {
            NativeMethods.PxSceneQuerySystem_flushMemory_mut((global::PhysX.PxSceneQuerySystem*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Adds a shape to the SQ system.  The same function is used to add either a regular shape, or a SQ compound shape.</summary>
        public static void AddSQShapeMut(this ref global::PhysX.PxSceneQuerySystem @self_, global::PhysX.PxRigidActor* @actor, global::PhysX.PxShape* @shape, global::PhysX.PxBounds3* @bounds, global::PhysX.PxTransform* @transform, uint* @compoundHandle, bool @hasPruningStructure)
        {
            NativeMethods.PxSceneQuerySystem_addSQShape_mut((global::PhysX.PxSceneQuerySystem*)Unsafe.AsPointer(ref @self_), @actor, @shape, @bounds, @transform, @compoundHandle, @hasPruningStructure);
        }

        /// <summary>Removes a shape from the SQ system.  The same function is used to remove either a regular shape, or a SQ compound shape.</summary>
        public static void RemoveSQShapeMut(this ref global::PhysX.PxSceneQuerySystem @self_, global::PhysX.PxRigidActor* @actor, global::PhysX.PxShape* @shape)
        {
            NativeMethods.PxSceneQuerySystem_removeSQShape_mut((global::PhysX.PxSceneQuerySystem*)Unsafe.AsPointer(ref @self_), @actor, @shape);
        }

        /// <summary>Updates a shape in the SQ system.  The same function is used to update either a regular shape, or a SQ compound shape.  The transforms are eager-evaluated, but the bounds are lazy-evaluated. This means that the updated transform has to be passed to the update function, while the bounds are automatically recomputed by the system whenever needed.</summary>
        public static void UpdateSQShapeMut(this ref global::PhysX.PxSceneQuerySystem @self_, global::PhysX.PxRigidActor* @actor, global::PhysX.PxShape* @shape, global::PhysX.PxTransform* @transform)
        {
            NativeMethods.PxSceneQuerySystem_updateSQShape_mut((global::PhysX.PxSceneQuerySystem*)Unsafe.AsPointer(ref @self_), @actor, @shape, @transform);
        }

        /// <summary>Adds a compound to the SQ system.  SQ compound handle</summary>
        public static uint AddSQCompoundMut(this ref global::PhysX.PxSceneQuerySystem @self_, global::PhysX.PxRigidActor* @actor, global::PhysX.PxShape** @shapes, global::PhysX.PxBVH* @bvh, global::PhysX.PxTransform* @transforms)
        {
            return NativeMethods.PxSceneQuerySystem_addSQCompound_mut((global::PhysX.PxSceneQuerySystem*)Unsafe.AsPointer(ref @self_), @actor, @shapes, @bvh, @transforms);
        }

        /// <summary>Removes a compound from the SQ system.</summary>
        public static void RemoveSQCompoundMut(this ref global::PhysX.PxSceneQuerySystem @self_, uint @compoundHandle)
        {
            NativeMethods.PxSceneQuerySystem_removeSQCompound_mut((global::PhysX.PxSceneQuerySystem*)Unsafe.AsPointer(ref @self_), @compoundHandle);
        }

        /// <summary>Updates a compound in the SQ system.  The compound structures are immediately updated when the call occurs.</summary>
        public static void UpdateSQCompoundMut(this ref global::PhysX.PxSceneQuerySystem @self_, uint @compoundHandle, global::PhysX.PxTransform* @compoundTransform)
        {
            NativeMethods.PxSceneQuerySystem_updateSQCompound_mut((global::PhysX.PxSceneQuerySystem*)Unsafe.AsPointer(ref @self_), @compoundHandle, @compoundTransform);
        }

        /// <summary>Shift the data structures' origin by the specified vector.  Please refer to the notes of the similar function in PxScene.</summary>
        public static void ShiftOriginMut(this ref global::PhysX.PxSceneQuerySystem @self_, global::PhysX.PxVec3* @shift)
        {
            NativeMethods.PxSceneQuerySystem_shiftOrigin_mut((global::PhysX.PxSceneQuerySystem*)Unsafe.AsPointer(ref @self_), @shift);
        }

        /// <summary>Merges a pruning structure with the SQ system's internal pruners.</summary>
        public static void MergeMut(this ref global::PhysX.PxSceneQuerySystem @self_, global::PhysX.PxPruningStructure* @pruningStructure)
        {
            NativeMethods.PxSceneQuerySystem_merge_mut((global::PhysX.PxSceneQuerySystem*)Unsafe.AsPointer(ref @self_), @pruningStructure);
        }

        /// <summary>Shape to SQ-pruner-handle mapping function.  This function finds and returns the SQ pruner handle associated with a given (actor/shape) couple that was previously added to the system. This is needed for the sync function.  Associated SQ pruner handle.</summary>
        public static uint GetHandle(this ref global::PhysX.PxSceneQuerySystem @self_, global::PhysX.PxRigidActor* @actor, global::PhysX.PxShape* @shape, uint* @prunerIndex)
        {
            return NativeMethods.PxSceneQuerySystem_getHandle((global::PhysX.PxSceneQuerySystem*)Unsafe.AsPointer(ref @self_), @actor, @shape, @prunerIndex);
        }

        /// <summary>Synchronizes the scene-query system with another system that references the same objects.  This function is used when the scene-query objects also exist in another system that can also update them. For example the scene-query objects (used for raycast, overlap or sweep queries) might be driven by equivalent objects in an external rigid-body simulation engine. In this case the rigid-body simulation engine computes the new poses and transforms, and passes them to the scene-query system using this function. It is more efficient than calling updateSQShape on each object individually, since updateSQShape would end up recomputing the bounds already available in the rigid-body engine.</summary>
        public static void SyncMut(this ref global::PhysX.PxSceneQuerySystem @self_, uint @prunerIndex, uint* @handles, uint* @indices, global::PhysX.PxBounds3* @bounds, global::PhysX.PxTransformPadded* @transforms, uint @count, global::PhysX.PxBitMap* @ignoredIndices)
        {
            NativeMethods.PxSceneQuerySystem_sync_mut((global::PhysX.PxSceneQuerySystem*)Unsafe.AsPointer(ref @self_), @prunerIndex, @handles, @indices, @bounds, @transforms, @count, @ignoredIndices);
        }

        /// <summary>Finalizes updates made to the SQ system.  This function should be called after updates have been made to the SQ system, to fully reflect the changes inside the internal pruners. In particular it should be called: - after calls to updateSQShape - after calls to sync  This function: - recomputes bounds of manually updated shapes (i.e. either regular or SQ compound shapes modified by updateSQShape) - updates dynamic pruners (refit operations) - incrementally rebuilds AABB-trees  The amount of work performed in this function depends on PxSceneQueryUpdateMode.</summary>
        public static void FinalizeUpdatesMut(this ref global::PhysX.PxSceneQuerySystem @self_)
        {
            NativeMethods.PxSceneQuerySystem_finalizeUpdates_mut((global::PhysX.PxSceneQuerySystem*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Prepares asynchronous build step.  This is directly called (synchronously) by PxSceneSQSystem::sceneQueriesUpdate(). See the comments there.  This function is called to let the system execute any necessary synchronous operation before the asynchronous sceneQueryBuildStep() function is called.  If there is any work to do for the specific pruner, the function returns a pruner-specific handle that will be passed to the corresponding, asynchronous sceneQueryBuildStep function.  A pruner-specific handle that will be sent to sceneQueryBuildStep if there is any work to do, i.e. to execute the corresponding sceneQueryBuildStep() call.  Null if there is no work to do, otherwise a pruner-specific handle.</summary>
        public static void* PrepareSceneQueryBuildStepMut(this ref global::PhysX.PxSceneQuerySystem @self_, uint @prunerIndex)
        {
            return NativeMethods.PxSceneQuerySystem_prepareSceneQueryBuildStep_mut((global::PhysX.PxSceneQuerySystem*)Unsafe.AsPointer(ref @self_), @prunerIndex);
        }

        /// <summary>Executes asynchronous build step.  This is directly called (asynchronously) by PxSceneSQSystem::sceneQueriesUpdate(). See the comments there.  This function incrementally builds the internal trees/pruners. It is called asynchronously, i.e. this can be called from different threads for building multiple trees at the same time.</summary>
        public static void SceneQueryBuildStepMut(this ref global::PhysX.PxSceneQuerySystem @self_, void* @handle)
        {
            NativeMethods.PxSceneQuerySystem_sceneQueryBuildStep_mut((global::PhysX.PxSceneQuerySystem*)Unsafe.AsPointer(ref @self_), @handle);
        }

        #endregion

        #region PhysX.PxBroadPhaseDesc(2)

        public static bool IsValid(this ref global::PhysX.PxBroadPhaseDesc @self_)
        {
            return NativeMethods.PxBroadPhaseDesc_isValid((global::PhysX.PxBroadPhaseDesc*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Broadphase factory function.  Use this function to create a new standalone broadphase.  Newly created broadphase, or NULL</summary>
        public static global::PhysX.PxBroadPhase* PhysPxCreateBroadPhase(this ref global::PhysX.PxBroadPhaseDesc @desc)
        {
            return NativeMethods.phys_PxCreateBroadPhase((global::PhysX.PxBroadPhaseDesc*)Unsafe.AsPointer(ref @desc));
        }

        #endregion

        #region PhysX.PxBroadPhaseRegions(6)

        /// <summary>Returns number of regions currently registered in the broad-phase.  Number of regions</summary>
        public static uint GetNbRegions(this ref global::PhysX.PxBroadPhaseRegions @self_)
        {
            return NativeMethods.PxBroadPhaseRegions_getNbRegions((global::PhysX.PxBroadPhaseRegions*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Gets broad-phase regions.  Number of written out regions.</summary>
        public static uint GetRegions(this ref global::PhysX.PxBroadPhaseRegions @self_, global::PhysX.PxBroadPhaseRegionInfo* @userBuffer, uint @bufferSize, uint @startIndex)
        {
            return NativeMethods.PxBroadPhaseRegions_getRegions((global::PhysX.PxBroadPhaseRegions*)Unsafe.AsPointer(ref @self_), @userBuffer, @bufferSize, @startIndex);
        }

        /// <summary>Adds a new broad-phase region.  The total number of regions is limited to PxBroadPhaseCaps::mMaxNbRegions. If that number is exceeded, the call is ignored.  The newly added region will be automatically populated with already existing objects that touch it, if the 'populateRegion' parameter is set to true. Otherwise the newly added region will be empty, and it will only be populated with objects when those objects are added to the simulation, or updated if they already exist.  Using 'populateRegion=true' has a cost, so it is best to avoid it if possible. In particular it is more efficient to create the empty regions first (with populateRegion=false) and then add the objects afterwards (rather than the opposite).  Objects automatically move from one region to another during their lifetime. The system keeps tracks of what regions a given object is in. It is legal for an object to be in an arbitrary number of regions. However if an object leaves all regions, or is created outside of all regions, several things happen: - collisions get disabled for this object - the object appears in the getOutOfBoundsObjects() array  If an out-of-bounds object, whose collisions are disabled, re-enters a valid broadphase region, then collisions are re-enabled for that object.  Handle for newly created region, or 0xffffffff in case of failure.</summary>
        public static uint AddRegionMut(this ref global::PhysX.PxBroadPhaseRegions @self_, global::PhysX.PxBroadPhaseRegion* @region, bool @populateRegion, global::PhysX.PxBounds3* @bounds, float* @distances)
        {
            return NativeMethods.PxBroadPhaseRegions_addRegion_mut((global::PhysX.PxBroadPhaseRegions*)Unsafe.AsPointer(ref @self_), @region, @populateRegion, @bounds, @distances);
        }

        /// <summary>Removes a broad-phase region.  If the region still contains objects, and if those objects do not overlap any region any more, they are not automatically removed from the simulation. Instead, the PxBroadPhaseCallback::onObjectOutOfBounds notification is used for each object. Users are responsible for removing the objects from the simulation if this is the desired behavior.  If the handle is invalid, or if a valid handle is removed twice, an error message is sent to the error stream.  True if success</summary>
        public static bool RemoveRegionMut(this ref global::PhysX.PxBroadPhaseRegions @self_, uint @handle)
        {
            return NativeMethods.PxBroadPhaseRegions_removeRegion_mut((global::PhysX.PxBroadPhaseRegions*)Unsafe.AsPointer(ref @self_), @handle);
        }

        public static uint GetNbOutOfBoundsObjects(this ref global::PhysX.PxBroadPhaseRegions @self_)
        {
            return NativeMethods.PxBroadPhaseRegions_getNbOutOfBoundsObjects((global::PhysX.PxBroadPhaseRegions*)Unsafe.AsPointer(ref @self_));
        }

        public static uint* GetOutOfBoundsObjects(this ref global::PhysX.PxBroadPhaseRegions @self_)
        {
            return NativeMethods.PxBroadPhaseRegions_getOutOfBoundsObjects((global::PhysX.PxBroadPhaseRegions*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxBroadPhase(11)

        public static void ReleaseMut(this ref global::PhysX.PxBroadPhase @self_)
        {
            NativeMethods.PxBroadPhase_release_mut((global::PhysX.PxBroadPhase*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Gets the broadphase type.  Broadphase type.</summary>
        public static global::PhysX.PxBroadPhaseType GetType(this ref global::PhysX.PxBroadPhase @self_)
        {
            return NativeMethods.PxBroadPhase_getType((global::PhysX.PxBroadPhase*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Gets broad-phase caps.</summary>
        public static void GetCaps(this ref global::PhysX.PxBroadPhase @self_, global::PhysX.PxBroadPhaseCaps* @caps)
        {
            NativeMethods.PxBroadPhase_getCaps((global::PhysX.PxBroadPhase*)Unsafe.AsPointer(ref @self_), @caps);
        }

        /// <summary>Retrieves the regions API if applicable.  For broadphases that do not use explicit user-defined regions, this call returns NULL.  Region API, or NULL.</summary>
        public static global::PhysX.PxBroadPhaseRegions* GetRegionsMut(this ref global::PhysX.PxBroadPhase @self_)
        {
            return NativeMethods.PxBroadPhase_getRegions_mut((global::PhysX.PxBroadPhase*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Retrieves the broadphase allocator.  User-provided buffers should ideally be allocated with this allocator, for best performance. This is especially true for the GPU broadphases, whose buffers need to be allocated in CUDA host memory.  The broadphase allocator.</summary>
        public static global::PhysX.PxAllocatorCallback* GetAllocatorMut(this ref global::PhysX.PxBroadPhase @self_)
        {
            return NativeMethods.PxBroadPhase_getAllocator_mut((global::PhysX.PxBroadPhase*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Retrieves the profiler's context ID.  The context ID.</summary>
        public static ulong GetContextID(this ref global::PhysX.PxBroadPhase @self_)
        {
            return NativeMethods.PxBroadPhase_getContextID((global::PhysX.PxBroadPhase*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Sets a scratch buffer  Some broadphases might take advantage of a scratch buffer to limit runtime allocations.  All broadphases still work without providing a scratch buffer, this is an optional function that can potentially reduce runtime allocations.</summary>
        public static void SetScratchBlockMut(this ref global::PhysX.PxBroadPhase @self_, void* @scratchBlock, uint @size)
        {
            NativeMethods.PxBroadPhase_setScratchBlock_mut((global::PhysX.PxBroadPhase*)Unsafe.AsPointer(ref @self_), @scratchBlock, @size);
        }

        /// <summary>Updates the broadphase and computes the lists of created/deleted pairs.  The provided update data describes changes to objects since the last broadphase update.  To benefit from potentially multithreaded implementations, it is necessary to provide a continuation task to the function. It is legal to pass NULL there, but the underlying (CPU) implementations will then run single-threaded.</summary>
        public static void UpdateMut(this ref global::PhysX.PxBroadPhase @self_, global::PhysX.PxBroadPhaseUpdateData* @updateData, global::PhysX.PxBaseTask* @continuation)
        {
            NativeMethods.PxBroadPhase_update_mut((global::PhysX.PxBroadPhase*)Unsafe.AsPointer(ref @self_), @updateData, @continuation);
        }

        /// <summary>Retrieves the broadphase results after an update.  This should be called once after each update call to retrieve the results of the broadphase. The results are incremental, i.e. the system only returns new and lost pairs, not all current pairs.</summary>
        public static void FetchResultsMut(this ref global::PhysX.PxBroadPhase @self_, global::PhysX.PxBroadPhaseResults* @results)
        {
            NativeMethods.PxBroadPhase_fetchResults_mut((global::PhysX.PxBroadPhase*)Unsafe.AsPointer(ref @self_), @results);
        }

        /// <summary>Helper for single-threaded updates.  This short helper function performs a single-theaded update and reports the results in a single call.</summary>
        public static void UpdateMut1(this ref global::PhysX.PxBroadPhase @self_, global::PhysX.PxBroadPhaseResults* @results, global::PhysX.PxBroadPhaseUpdateData* @updateData)
        {
            NativeMethods.PxBroadPhase_update_mut_1((global::PhysX.PxBroadPhase*)Unsafe.AsPointer(ref @self_), @results, @updateData);
        }

        /// <summary>AABB manager factory function.  Use this function to create a new standalone high-level broadphase.  Newly created AABB manager, or NULL</summary>
        public static global::PhysX.PxAABBManager* PhysPxCreateAABBManager(this ref global::PhysX.PxBroadPhase @broadphase)
        {
            return NativeMethods.phys_PxCreateAABBManager((global::PhysX.PxBroadPhase*)Unsafe.AsPointer(ref @broadphase));
        }

        #endregion

        #region PhysX.PxAABBManager(12)

        public static void ReleaseMut(this ref global::PhysX.PxAABBManager @self_)
        {
            NativeMethods.PxAABBManager_release_mut((global::PhysX.PxAABBManager*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Retrieves the underlying broadphase.  The managed broadphase.</summary>
        public static global::PhysX.PxBroadPhase* GetBroadPhaseMut(this ref global::PhysX.PxAABBManager @self_)
        {
            return NativeMethods.PxAABBManager_getBroadPhase_mut((global::PhysX.PxAABBManager*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Retrieves the managed bounds.  This is needed as input parameters to functions like PxBroadPhaseRegions::addRegion.  The managed object bounds.</summary>
        public static global::PhysX.PxBounds3* GetBounds(this ref global::PhysX.PxAABBManager @self_)
        {
            return NativeMethods.PxAABBManager_getBounds((global::PhysX.PxAABBManager*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Retrieves the managed distances.  This is needed as input parameters to functions like PxBroadPhaseRegions::addRegion.  The managed object distances.</summary>
        public static float* GetDistances(this ref global::PhysX.PxAABBManager @self_)
        {
            return NativeMethods.PxAABBManager_getDistances((global::PhysX.PxAABBManager*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Retrieves the managed filter groups.  The managed object groups.</summary>
        public static uint* GetGroups(this ref global::PhysX.PxAABBManager @self_)
        {
            return NativeMethods.PxAABBManager_getGroups((global::PhysX.PxAABBManager*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Retrieves the managed buffers' capacity.  Bounds, distances and groups buffers have the same capacity.  The managed buffers' capacity.</summary>
        public static uint GetCapacity(this ref global::PhysX.PxAABBManager @self_)
        {
            return NativeMethods.PxAABBManager_getCapacity((global::PhysX.PxAABBManager*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Adds an object to the manager.  Objects' indices are externally managed, i.e. they must be provided by users (as opposed to handles that could be returned by this manager). The design allows users to identify an object by a single ID, and use the same ID in multiple sub-systems.</summary>
        public static void AddObjectMut(this ref global::PhysX.PxAABBManager @self_, uint @index, global::PhysX.PxBounds3* @bounds, uint @group, float @distance)
        {
            NativeMethods.PxAABBManager_addObject_mut((global::PhysX.PxAABBManager*)Unsafe.AsPointer(ref @self_), @index, @bounds, @group, @distance);
        }

        /// <summary>Removes an object from the manager.</summary>
        public static void RemoveObjectMut(this ref global::PhysX.PxAABBManager @self_, uint @index)
        {
            NativeMethods.PxAABBManager_removeObject_mut((global::PhysX.PxAABBManager*)Unsafe.AsPointer(ref @self_), @index);
        }

        /// <summary>Updates an object in the manager.  This call can update an object's bounds, distance, or both. It is not possible to update an object's filter group.</summary>
        public static void UpdateObjectMut(this ref global::PhysX.PxAABBManager @self_, uint @index, global::PhysX.PxBounds3* @bounds, float* @distance)
        {
            NativeMethods.PxAABBManager_updateObject_mut((global::PhysX.PxAABBManager*)Unsafe.AsPointer(ref @self_), @index, @bounds, @distance);
        }

        /// <summary>Updates the broadphase and computes the lists of created/deleted pairs.  The data necessary for updating the broadphase is internally computed by the AABB manager.  To benefit from potentially multithreaded implementations, it is necessary to provide a continuation task to the function. It is legal to pass NULL there, but the underlying (CPU) implementations will then run single-threaded.</summary>
        public static void UpdateMut(this ref global::PhysX.PxAABBManager @self_, global::PhysX.PxBaseTask* @continuation)
        {
            NativeMethods.PxAABBManager_update_mut((global::PhysX.PxAABBManager*)Unsafe.AsPointer(ref @self_), @continuation);
        }

        /// <summary>Retrieves the broadphase results after an update.  This should be called once after each update call to retrieve the results of the broadphase. The results are incremental, i.e. the system only returns new and lost pairs, not all current pairs.</summary>
        public static void FetchResultsMut(this ref global::PhysX.PxAABBManager @self_, global::PhysX.PxBroadPhaseResults* @results)
        {
            NativeMethods.PxAABBManager_fetchResults_mut((global::PhysX.PxAABBManager*)Unsafe.AsPointer(ref @self_), @results);
        }

        /// <summary>Helper for single-threaded updates.  This short helper function performs a single-theaded update and reports the results in a single call.</summary>
        public static void UpdateMut1(this ref global::PhysX.PxAABBManager @self_, global::PhysX.PxBroadPhaseResults* @results)
        {
            NativeMethods.PxAABBManager_update_mut_1((global::PhysX.PxAABBManager*)Unsafe.AsPointer(ref @self_), @results);
        }

        #endregion

        #region PhysX.PxSceneLimits(2)

        /// <summary>(re)sets the structure to the default</summary>
        public static void SetToDefaultMut(this ref global::PhysX.PxSceneLimits @self_)
        {
            NativeMethods.PxSceneLimits_setToDefault_mut((global::PhysX.PxSceneLimits*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Returns true if the descriptor is valid.  true if the current settings are valid.</summary>
        public static bool IsValid(this ref global::PhysX.PxSceneLimits @self_)
        {
            return NativeMethods.PxSceneLimits_isValid((global::PhysX.PxSceneLimits*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxgDynamicsMemoryConfig(1)

        public static bool IsValid(this ref global::PhysX.PxgDynamicsMemoryConfig @self_)
        {
            return NativeMethods.PxgDynamicsMemoryConfig_isValid((global::PhysX.PxgDynamicsMemoryConfig*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxSimulationStatistics(3)

        /// <summary>Get number of broadphase volumes added for the current simulation step.  Number of broadphase volumes added.</summary>
        public static uint GetNbBroadPhaseAdds(this ref global::PhysX.PxSimulationStatistics @self_)
        {
            return NativeMethods.PxSimulationStatistics_getNbBroadPhaseAdds((global::PhysX.PxSimulationStatistics*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Get number of broadphase volumes removed for the current simulation step.  Number of broadphase volumes removed.</summary>
        public static uint GetNbBroadPhaseRemoves(this ref global::PhysX.PxSimulationStatistics @self_)
        {
            return NativeMethods.PxSimulationStatistics_getNbBroadPhaseRemoves((global::PhysX.PxSimulationStatistics*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Get number of shape collision pairs of a certain type processed for the current simulation step.  There is an entry for each geometry pair type.  entry[i][j] = entry[j][i], hence, if you want the sum of all pair types, you need to discard the symmetric entries  Number of processed pairs of the specified geometry types.</summary>
        public static uint GetRbPairStats(this ref global::PhysX.PxSimulationStatistics @self_, global::PhysX.RbPairStatsType @pairType, global::PhysX.PxGeometryType @g0, global::PhysX.PxGeometryType @g1)
        {
            return NativeMethods.PxSimulationStatistics_getRbPairStats((global::PhysX.PxSimulationStatistics*)Unsafe.AsPointer(ref @self_), @pairType, @g0, @g1);
        }

        #endregion

        #region PhysX.PxPvdSceneClient(8)

        /// <summary>Sets the PVD flag. See PxPvdSceneFlag.</summary>
        public static void SetScenePvdFlagMut(this ref global::PhysX.PxPvdSceneClient @self_, global::PhysX.PxPvdSceneFlag @flag, bool @value)
        {
            NativeMethods.PxPvdSceneClient_setScenePvdFlag_mut((global::PhysX.PxPvdSceneClient*)Unsafe.AsPointer(ref @self_), @flag, @value);
        }

        /// <summary>Sets the PVD flags. See PxPvdSceneFlags.</summary>
        public static void SetScenePvdFlagsMut(this ref global::PhysX.PxPvdSceneClient @self_, global::PhysX.PxPvdSceneFlags @flags)
        {
            NativeMethods.PxPvdSceneClient_setScenePvdFlags_mut((global::PhysX.PxPvdSceneClient*)Unsafe.AsPointer(ref @self_), @flags);
        }

        /// <summary>Retrieves the PVD flags. See PxPvdSceneFlags.</summary>
        public static global::PhysX.PxPvdSceneFlags GetScenePvdFlags(this ref global::PhysX.PxPvdSceneClient @self_)
        {
            return NativeMethods.PxPvdSceneClient_getScenePvdFlags((global::PhysX.PxPvdSceneClient*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>update camera on PVD application's render window</summary>
        public static void UpdateCameraMut(this ref global::PhysX.PxPvdSceneClient @self_, byte* @name, global::PhysX.PxVec3* @origin, global::PhysX.PxVec3* @up, global::PhysX.PxVec3* @target)
        {
            NativeMethods.PxPvdSceneClient_updateCamera_mut((global::PhysX.PxPvdSceneClient*)Unsafe.AsPointer(ref @self_), @name, @origin, @up, @target);
        }

        /// <summary>draw points on PVD application's render window</summary>
        public static void DrawPointsMut(this ref global::PhysX.PxPvdSceneClient @self_, global::PhysX.PxDebugPoint* @points, uint @count)
        {
            NativeMethods.PxPvdSceneClient_drawPoints_mut((global::PhysX.PxPvdSceneClient*)Unsafe.AsPointer(ref @self_), @points, @count);
        }

        /// <summary>draw lines on PVD application's render window</summary>
        public static void DrawLinesMut(this ref global::PhysX.PxPvdSceneClient @self_, global::PhysX.PxDebugLine* @lines, uint @count)
        {
            NativeMethods.PxPvdSceneClient_drawLines_mut((global::PhysX.PxPvdSceneClient*)Unsafe.AsPointer(ref @self_), @lines, @count);
        }

        /// <summary>draw triangles on PVD application's render window</summary>
        public static void DrawTrianglesMut(this ref global::PhysX.PxPvdSceneClient @self_, global::PhysX.PxDebugTriangle* @triangles, uint @count)
        {
            NativeMethods.PxPvdSceneClient_drawTriangles_mut((global::PhysX.PxPvdSceneClient*)Unsafe.AsPointer(ref @self_), @triangles, @count);
        }

        /// <summary>draw text on PVD application's render window</summary>
        public static void DrawTextMut(this ref global::PhysX.PxPvdSceneClient @self_, global::PhysX.PxDebugText* @text)
        {
            NativeMethods.PxPvdSceneClient_drawText_mut((global::PhysX.PxPvdSceneClient*)Unsafe.AsPointer(ref @self_), @text);
        }

        #endregion

        #region PhysX.PxBroadPhaseCallback(3)

        public static void Delete(this ref global::PhysX.PxBroadPhaseCallback @self_)
        {
            NativeMethods.PxBroadPhaseCallback_delete((global::PhysX.PxBroadPhaseCallback*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Out-of-bounds notification.  This function is called when an object leaves the broad-phase.</summary>
        public static void OnObjectOutOfBoundsMut(this ref global::PhysX.PxBroadPhaseCallback @self_, global::PhysX.PxShape* @shape, global::PhysX.PxActor* @actor)
        {
            NativeMethods.PxBroadPhaseCallback_onObjectOutOfBounds_mut((global::PhysX.PxBroadPhaseCallback*)Unsafe.AsPointer(ref @self_), @shape, @actor);
        }

        /// <summary>Out-of-bounds notification.  This function is called when an aggregate leaves the broad-phase.</summary>
        public static void OnObjectOutOfBoundsMut1(this ref global::PhysX.PxBroadPhaseCallback @self_, global::PhysX.PxAggregate* @aggregate)
        {
            NativeMethods.PxBroadPhaseCallback_onObjectOutOfBounds_mut_1((global::PhysX.PxBroadPhaseCallback*)Unsafe.AsPointer(ref @self_), @aggregate);
        }

        #endregion

        #region PhysX.PxScene(128)

        /// <summary>Deletes the scene.  Removes any actors and constraint shaders from this scene (if the user hasn't already done so).  Be sure to not keep a reference to this object after calling release. Avoid release calls while the scene is simulating (in between simulate() and fetchResults() calls).</summary>
        public static void ReleaseMut(this ref global::PhysX.PxScene @self_)
        {
            NativeMethods.PxScene_release_mut((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Sets a scene flag. You can only set one flag at a time.  Not all flags are mutable and changing some will result in an error. Please check [`PxSceneFlag`] to see which flags can be changed.</summary>
        public static void SetFlagMut(this ref global::PhysX.PxScene @self_, global::PhysX.PxSceneFlag @flag, bool @value)
        {
            NativeMethods.PxScene_setFlag_mut((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_), @flag, @value);
        }

        /// <summary>Get the scene flags.  The scene flags. See [`PxSceneFlag`]</summary>
        public static global::PhysX.PxSceneFlags GetFlags(this ref global::PhysX.PxScene @self_)
        {
            return NativeMethods.PxScene_getFlags((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Set new scene limits.  Increase the maximum capacity of various data structures in the scene. The new capacities will be at least as large as required to deal with the objects currently in the scene. Further, these values are for preallocation and do not represent hard limits.</summary>
        public static void SetLimitsMut(this ref global::PhysX.PxScene @self_, global::PhysX.PxSceneLimits* @limits)
        {
            NativeMethods.PxScene_setLimits_mut((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_), @limits);
        }

        /// <summary>Get current scene limits.  Current scene limits.</summary>
        public static global::PhysX.PxSceneLimits GetLimits(this ref global::PhysX.PxScene @self_)
        {
            return NativeMethods.PxScene_getLimits((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Call this method to retrieve the Physics SDK.  The physics SDK this scene is associated with.</summary>
        public static global::PhysX.PxPhysics* GetPhysicsMut(this ref global::PhysX.PxScene @self_)
        {
            return NativeMethods.PxScene_getPhysics_mut((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Retrieves the scene's internal timestamp, increased each time a simulation step is completed.  scene timestamp</summary>
        public static uint GetTimestamp(this ref global::PhysX.PxScene @self_)
        {
            return NativeMethods.PxScene_getTimestamp((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Adds an articulation to this scene.  If the articulation is already assigned to a scene (see [`PxArticulationReducedCoordinate::getScene`]), the call is ignored and an error is issued.  True if success</summary>
        public static bool AddArticulationMut(this ref global::PhysX.PxScene @self_, global::PhysX.PxArticulationReducedCoordinate* @articulation)
        {
            return NativeMethods.PxScene_addArticulation_mut((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_), @articulation);
        }

        /// <summary>Removes an articulation from this scene.  If the articulation is not part of this scene (see [`PxArticulationReducedCoordinate::getScene`]), the call is ignored and an error is issued.  If the articulation is in an aggregate it will be removed from the aggregate.</summary>
        public static void RemoveArticulationMut(this ref global::PhysX.PxScene @self_, global::PhysX.PxArticulationReducedCoordinate* @articulation, bool @wakeOnLostTouch)
        {
            NativeMethods.PxScene_removeArticulation_mut((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_), @articulation, @wakeOnLostTouch);
        }

        /// <summary>Adds an actor to this scene.  If the actor is already assigned to a scene (see [`PxActor::getScene`]), the call is ignored and an error is issued.  If the actor has an invalid constraint, in checked builds the call is ignored and an error is issued.  You can not add individual articulation links (see [`PxArticulationLink`]) to the scene. Use #addArticulation() instead.  If the actor is a PxRigidActor then each assigned PxConstraint object will get added to the scene automatically if it connects to another actor that is part of the scene already.  When a BVH is provided the actor shapes are grouped together. The scene query pruning structure inside PhysX SDK will store/update one bound per actor. The scene queries against such an actor will query actor bounds and then make a local space query against the provided BVH, which is in actor's local space.  True if success</summary>
        public static bool AddActorMut(this ref global::PhysX.PxScene @self_, global::PhysX.PxActor* @actor, global::PhysX.PxBVH* @bvh)
        {
            return NativeMethods.PxScene_addActor_mut((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_), @actor, @bvh);
        }

        /// <summary>Adds actors to this scene. Only supports actors of type PxRigidStatic and PxRigidDynamic.  This method only supports actors of type PxRigidStatic and PxRigidDynamic. For other actors, use addActor() instead. For articulation links, use addArticulation().  If one of the actors is already assigned to a scene (see [`PxActor::getScene`]), the call is ignored and an error is issued.  If an actor in the array contains an invalid constraint, in checked builds the call is ignored and an error is issued.  If an actor in the array is a PxRigidActor then each assigned PxConstraint object will get added to the scene automatically if it connects to another actor that is part of the scene already.  this method is optimized for high performance.  True if success</summary>
        public static bool AddActorsMut(this ref global::PhysX.PxScene @self_, global::PhysX.PxActor** @actors, uint @nbActors)
        {
            return NativeMethods.PxScene_addActors_mut((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_), @actors, @nbActors);
        }

        /// <summary>Adds a pruning structure together with its actors to this scene. Only supports actors of type PxRigidStatic and PxRigidDynamic.  This method only supports actors of type PxRigidStatic and PxRigidDynamic. For other actors, use addActor() instead. For articulation links, use addArticulation().  If an actor in the pruning structure contains an invalid constraint, in checked builds the call is ignored and an error is issued.  For all actors in the pruning structure each assigned PxConstraint object will get added to the scene automatically if it connects to another actor that is part of the scene already.  This method is optimized for high performance.  Merging a PxPruningStructure into an active scene query optimization AABB tree might unbalance the tree. A typical use case for PxPruningStructure is a large world scenario where blocks of closely positioned actors get streamed in. The merge process finds the best node in the active scene query optimization AABB tree and inserts the PxPruningStructure. Therefore using PxPruningStructure for actors scattered throughout the world will result in an unbalanced tree.  True if success</summary>
        public static bool AddActorsMut1(this ref global::PhysX.PxScene @self_, global::PhysX.PxPruningStructure* @pruningStructure)
        {
            return NativeMethods.PxScene_addActors_mut_1((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_), @pruningStructure);
        }

        /// <summary>Removes an actor from this scene.  If the actor is not part of this scene (see [`PxActor::getScene`]), the call is ignored and an error is issued.  You can not remove individual articulation links (see [`PxArticulationLink`]) from the scene. Use #removeArticulation() instead.  If the actor is a PxRigidActor then all assigned PxConstraint objects will get removed from the scene automatically.  If the actor is in an aggregate it will be removed from the aggregate.</summary>
        public static void RemoveActorMut(this ref global::PhysX.PxScene @self_, global::PhysX.PxActor* @actor, bool @wakeOnLostTouch)
        {
            NativeMethods.PxScene_removeActor_mut((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_), @actor, @wakeOnLostTouch);
        }

        /// <summary>Removes actors from this scene. Only supports actors of type PxRigidStatic and PxRigidDynamic.  This method only supports actors of type PxRigidStatic and PxRigidDynamic. For other actors, use removeActor() instead. For articulation links, use removeArticulation().  If some actor is not part of this scene (see [`PxActor::getScene`]), the actor remove is ignored and an error is issued.  You can not remove individual articulation links (see [`PxArticulationLink`]) from the scene. Use #removeArticulation() instead.  If the actor is a PxRigidActor then all assigned PxConstraint objects will get removed from the scene automatically.</summary>
        public static void RemoveActorsMut(this ref global::PhysX.PxScene @self_, global::PhysX.PxActor** @actors, uint @nbActors, bool @wakeOnLostTouch)
        {
            NativeMethods.PxScene_removeActors_mut((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_), @actors, @nbActors, @wakeOnLostTouch);
        }

        /// <summary>Adds an aggregate to this scene.  If the aggregate is already assigned to a scene (see [`PxAggregate::getScene`]), the call is ignored and an error is issued.  If the aggregate contains an actor with an invalid constraint, in checked builds the call is ignored and an error is issued.  If the aggregate already contains actors, those actors are added to the scene as well.  True if success</summary>
        public static bool AddAggregateMut(this ref global::PhysX.PxScene @self_, global::PhysX.PxAggregate* @aggregate)
        {
            return NativeMethods.PxScene_addAggregate_mut((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_), @aggregate);
        }

        /// <summary>Removes an aggregate from this scene.  If the aggregate is not part of this scene (see [`PxAggregate::getScene`]), the call is ignored and an error is issued.  If the aggregate contains actors, those actors are removed from the scene as well.</summary>
        public static void RemoveAggregateMut(this ref global::PhysX.PxScene @self_, global::PhysX.PxAggregate* @aggregate, bool @wakeOnLostTouch)
        {
            NativeMethods.PxScene_removeAggregate_mut((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_), @aggregate, @wakeOnLostTouch);
        }

        /// <summary>Adds objects in the collection to this scene.  This function adds the following types of objects to this scene: PxRigidActor (except PxArticulationLink), PxAggregate, PxArticulationReducedCoordinate. This method is typically used after deserializing the collection in order to populate the scene with deserialized objects.  If the collection contains an actor with an invalid constraint, in checked builds the call is ignored and an error is issued.  True if success</summary>
        public static bool AddCollectionMut(this ref global::PhysX.PxScene @self_, global::PhysX.PxCollection* @collection)
        {
            return NativeMethods.PxScene_addCollection_mut((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_), @collection);
        }

        /// <summary>Retrieve the number of actors of certain types in the scene. For supported types, see PxActorTypeFlags.  the number of actors.</summary>
        public static uint GetNbActors(this ref global::PhysX.PxScene @self_, global::PhysX.PxActorTypeFlags @types)
        {
            return NativeMethods.PxScene_getNbActors((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_), @types);
        }

        /// <summary>Retrieve an array of all the actors of certain types in the scene. For supported types, see PxActorTypeFlags.  Number of actors written to the buffer.</summary>
        public static uint GetActors(this ref global::PhysX.PxScene @self_, global::PhysX.PxActorTypeFlags @types, global::PhysX.PxActor** @userBuffer, uint @bufferSize, uint @startIndex)
        {
            return NativeMethods.PxScene_getActors((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_), @types, @userBuffer, @bufferSize, @startIndex);
        }

        /// <summary>Queries the PxScene for a list of the PxActors whose transforms have been updated during the previous simulation step. Only includes actors of type PxRigidDynamic and PxArticulationLink.  PxSceneFlag::eENABLE_ACTIVE_ACTORS must be set.  Do not use this method while the simulation is running. Calls to this method while the simulation is running will be ignored and NULL will be returned.  A pointer to the list of active PxActors generated during the last call to fetchResults().</summary>
        public static global::PhysX.PxActor** GetActiveActorsMut(this ref global::PhysX.PxScene @self_, uint* @nbActorsOut)
        {
            return NativeMethods.PxScene_getActiveActors_mut((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_), @nbActorsOut);
        }

        /// <summary>Returns the number of articulations in the scene.  the number of articulations in this scene.</summary>
        public static uint GetNbArticulations(this ref global::PhysX.PxScene @self_)
        {
            return NativeMethods.PxScene_getNbArticulations((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Retrieve all the articulations in the scene.  Number of articulations written to the buffer.</summary>
        public static uint GetArticulations(this ref global::PhysX.PxScene @self_, global::PhysX.PxArticulationReducedCoordinate** @userBuffer, uint @bufferSize, uint @startIndex)
        {
            return NativeMethods.PxScene_getArticulations((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_), @userBuffer, @bufferSize, @startIndex);
        }

        /// <summary>Returns the number of constraint shaders in the scene.  the number of constraint shaders in this scene.</summary>
        public static uint GetNbConstraints(this ref global::PhysX.PxScene @self_)
        {
            return NativeMethods.PxScene_getNbConstraints((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Retrieve all the constraint shaders in the scene.  Number of constraint shaders written to the buffer.</summary>
        public static uint GetConstraints(this ref global::PhysX.PxScene @self_, global::PhysX.PxConstraint** @userBuffer, uint @bufferSize, uint @startIndex)
        {
            return NativeMethods.PxScene_getConstraints((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_), @userBuffer, @bufferSize, @startIndex);
        }

        /// <summary>Returns the number of aggregates in the scene.  the number of aggregates in this scene.</summary>
        public static uint GetNbAggregates(this ref global::PhysX.PxScene @self_)
        {
            return NativeMethods.PxScene_getNbAggregates((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Retrieve all the aggregates in the scene.  Number of aggregates written to the buffer.</summary>
        public static uint GetAggregates(this ref global::PhysX.PxScene @self_, global::PhysX.PxAggregate** @userBuffer, uint @bufferSize, uint @startIndex)
        {
            return NativeMethods.PxScene_getAggregates((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_), @userBuffer, @bufferSize, @startIndex);
        }

        /// <summary>Specifies the dominance behavior of contacts between two actors with two certain dominance groups.  It is possible to assign each actor to a dominance groups using [`PxActor::setDominanceGroup`]().  With dominance groups one can have all contacts created between actors act in one direction only. This is useful, for example, if you want an object to push debris out of its way and be unaffected,while still responding physically to forces and collisions with non-debris objects.  Whenever a contact between two actors (a0, a1) needs to be solved, the groups (g0, g1) of both actors are retrieved. Then the PxDominanceGroupPair setting for this group pair is retrieved with getDominanceGroupPair(g0, g1).  In the contact, PxDominanceGroupPair::dominance0 becomes the dominance setting for a0, and PxDominanceGroupPair::dominance1 becomes the dominance setting for a1. A dominanceN setting of 1.0f, the default, will permit aN to be pushed or pulled by a(1-N) through the contact. A dominanceN setting of 0.0f, will however prevent aN to be pushed by a(1-N) via the contact. Thus, a PxDominanceGroupPair of (1.0f, 0.0f) makes the interaction one-way.  The matrix sampled by getDominanceGroupPair(g1, g2) is initialised by default such that:  if g1 == g2, then (1.0f, 1.0f) is returned if g1 &lt; g2, then (0.0f, 1.0f) is returned if g1 &gt;  g2, then (1.0f, 0.0f) is returned  In other words, we permit actors in higher groups to be pushed around by actors in lower groups by default.  These settings should cover most applications, and in fact not overriding these settings may likely result in higher performance.  It is not possible to make the matrix asymetric, or to change the diagonal. In other words:  it is not possible to change (g1, g2) if (g1==g2) if you set  (g1, g2) to X, then (g2, g1) will implicitly and automatically be set to ~X, where:  ~(1.0f, 1.0f) is (1.0f, 1.0f) ~(0.0f, 1.0f) is (1.0f, 0.0f) ~(1.0f, 0.0f) is (0.0f, 1.0f)  These two restrictions are to make sure that contacts between two actors will always evaluate to the same dominance setting, regardless of the order of the actors.  Dominance settings are currently specified as floats 0.0f or 1.0f because in the future we may permit arbitrary fractional settings to express 'partly-one-way' interactions.  Sleeping: Does NOT wake actors up automatically.</summary>
        public static void SetDominanceGroupPairMut(this ref global::PhysX.PxScene @self_, byte @group1, byte @group2, global::PhysX.PxDominanceGroupPair* @dominance)
        {
            NativeMethods.PxScene_setDominanceGroupPair_mut((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_), @group1, @group2, @dominance);
        }

        /// <summary>Samples the dominance matrix.</summary>
        public static global::PhysX.PxDominanceGroupPair GetDominanceGroupPair(this ref global::PhysX.PxScene @self_, byte @group1, byte @group2)
        {
            return NativeMethods.PxScene_getDominanceGroupPair((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_), @group1, @group2);
        }

        /// <summary>Return the cpu dispatcher that was set in PxSceneDesc::cpuDispatcher when creating the scene with PxPhysics::createScene</summary>
        public static global::PhysX.PxCpuDispatcher* GetCpuDispatcher(this ref global::PhysX.PxScene @self_)
        {
            return NativeMethods.PxScene_getCpuDispatcher((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Reserves a new client ID.  PX_DEFAULT_CLIENT is always available as the default clientID. Additional clients are returned by this function. Clients cannot be released once created. An error is reported when more than a supported number of clients (currently 128) are created.</summary>
        public static byte CreateClientMut(this ref global::PhysX.PxScene @self_)
        {
            return NativeMethods.PxScene_createClient_mut((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Sets a user notify object which receives special simulation events when they occur.  Do not set the callback while the simulation is running. Calls to this method while the simulation is running will be ignored.</summary>
        public static void SetSimulationEventCallbackMut(this ref global::PhysX.PxScene @self_, global::PhysX.PxSimulationEventCallback* @callback)
        {
            NativeMethods.PxScene_setSimulationEventCallback_mut((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_), @callback);
        }

        /// <summary>Retrieves the simulationEventCallback pointer set with setSimulationEventCallback().  The current user notify pointer. See [`PxSimulationEventCallback`].</summary>
        public static global::PhysX.PxSimulationEventCallback* GetSimulationEventCallback(this ref global::PhysX.PxScene @self_)
        {
            return NativeMethods.PxScene_getSimulationEventCallback((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Sets a user callback object, which receives callbacks on all contacts generated for specified actors.  Do not set the callback while the simulation is running. Calls to this method while the simulation is running will be ignored.</summary>
        public static void SetContactModifyCallbackMut(this ref global::PhysX.PxScene @self_, global::PhysX.PxContactModifyCallback* @callback)
        {
            NativeMethods.PxScene_setContactModifyCallback_mut((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_), @callback);
        }

        /// <summary>Sets a user callback object, which receives callbacks on all CCD contacts generated for specified actors.  Do not set the callback while the simulation is running. Calls to this method while the simulation is running will be ignored.</summary>
        public static void SetCCDContactModifyCallbackMut(this ref global::PhysX.PxScene @self_, global::PhysX.PxCCDContactModifyCallback* @callback)
        {
            NativeMethods.PxScene_setCCDContactModifyCallback_mut((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_), @callback);
        }

        /// <summary>Retrieves the PxContactModifyCallback pointer set with setContactModifyCallback().  The current user contact modify callback pointer. See [`PxContactModifyCallback`].</summary>
        public static global::PhysX.PxContactModifyCallback* GetContactModifyCallback(this ref global::PhysX.PxScene @self_)
        {
            return NativeMethods.PxScene_getContactModifyCallback((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Retrieves the PxCCDContactModifyCallback pointer set with setContactModifyCallback().  The current user contact modify callback pointer. See [`PxContactModifyCallback`].</summary>
        public static global::PhysX.PxCCDContactModifyCallback* GetCCDContactModifyCallback(this ref global::PhysX.PxScene @self_)
        {
            return NativeMethods.PxScene_getCCDContactModifyCallback((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Sets a broad-phase user callback object.  Do not set the callback while the simulation is running. Calls to this method while the simulation is running will be ignored.</summary>
        public static void SetBroadPhaseCallbackMut(this ref global::PhysX.PxScene @self_, global::PhysX.PxBroadPhaseCallback* @callback)
        {
            NativeMethods.PxScene_setBroadPhaseCallback_mut((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_), @callback);
        }

        /// <summary>Retrieves the PxBroadPhaseCallback pointer set with setBroadPhaseCallback().  The current broad-phase callback pointer. See [`PxBroadPhaseCallback`].</summary>
        public static global::PhysX.PxBroadPhaseCallback* GetBroadPhaseCallback(this ref global::PhysX.PxScene @self_)
        {
            return NativeMethods.PxScene_getBroadPhaseCallback((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Sets the shared global filter data which will get passed into the filter shader.  It is the user's responsibility to ensure that changing the shared global filter data does not change the filter output value for existing pairs. If the filter output for existing pairs does change nonetheless then such a change will not take effect until the pair gets refiltered. resetFiltering() can be used to explicitly refilter the pairs of specific objects.  The provided data will get copied to internal buffers and this copy will be used for filtering calls.  Do not use this method while the simulation is running. Calls to this method while the simulation is running will be ignored.</summary>
        public static void SetFilterShaderDataMut(this ref global::PhysX.PxScene @self_, void* @data, uint @dataSize)
        {
            NativeMethods.PxScene_setFilterShaderData_mut((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_), @data, @dataSize);
        }

        /// <summary>Gets the shared global filter data in use for this scene.  The reference points to a copy of the original filter data specified in [`PxSceneDesc`].filterShaderData or provided by #setFilterShaderData().  Shared filter data for filter shader.</summary>
        public static void* GetFilterShaderData(this ref global::PhysX.PxScene @self_)
        {
            return NativeMethods.PxScene_getFilterShaderData((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Gets the size of the shared global filter data ([`PxSceneDesc`].filterShaderData)  Size of shared filter data [bytes].</summary>
        public static uint GetFilterShaderDataSize(this ref global::PhysX.PxScene @self_)
        {
            return NativeMethods.PxScene_getFilterShaderDataSize((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Marks the object to reset interactions and re-run collision filters in the next simulation step.  This call forces the object to remove all existing collision interactions, to search anew for existing contact pairs and to run the collision filters again for found collision pairs.  The operation is supported for PxRigidActor objects only.  All persistent state of existing interactions will be lost and can not be retrieved even if the same collison pair is found again in the next step. This will mean, for example, that you will not get notified about persistent contact for such an interaction (see [`PxPairFlag::eNOTIFY_TOUCH_PERSISTS`]), the contact pair will be interpreted as newly found instead.  Lost touch contact reports will be sent for every collision pair which includes this shape, if they have been requested through [`PxPairFlag::eNOTIFY_TOUCH_LOST`] or #PxPairFlag::eNOTIFY_THRESHOLD_FORCE_LOST.  This is an expensive operation, don't use it if you don't have to.  Can be used to retrieve collision pairs that were killed by the collision filters (see [`PxFilterFlag::eKILL`])  It is invalid to use this method if the actor has not been added to a scene already.  It is invalid to use this method if PxActorFlag::eDISABLE_SIMULATION is set.  Do not use this method while the simulation is running.  Sleeping: Does wake up the actor.  True if success</summary>
        public static bool ResetFilteringMut(this ref global::PhysX.PxScene @self_, global::PhysX.PxActor* @actor)
        {
            return NativeMethods.PxScene_resetFiltering_mut((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_), @actor);
        }

        /// <summary>Marks the object to reset interactions and re-run collision filters for specified shapes in the next simulation step.  This is a specialization of the resetFiltering(PxActor &amp; actor) method and allows to reset interactions for specific shapes of a PxRigidActor.  Do not use this method while the simulation is running.  Sleeping: Does wake up the actor.</summary>
        public static bool ResetFilteringMut1(this ref global::PhysX.PxScene @self_, global::PhysX.PxRigidActor* @actor, global::PhysX.PxShape** @shapes, uint @shapeCount)
        {
            return NativeMethods.PxScene_resetFiltering_mut_1((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_), @actor, @shapes, @shapeCount);
        }

        /// <summary>Gets the pair filtering mode for kinematic-kinematic pairs.  Filtering mode for kinematic-kinematic pairs.</summary>
        public static global::PhysX.PxPairFilteringMode GetKinematicKinematicFilteringMode(this ref global::PhysX.PxScene @self_)
        {
            return NativeMethods.PxScene_getKinematicKinematicFilteringMode((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Gets the pair filtering mode for static-kinematic pairs.  Filtering mode for static-kinematic pairs.</summary>
        public static global::PhysX.PxPairFilteringMode GetStaticKinematicFilteringMode(this ref global::PhysX.PxScene @self_)
        {
            return NativeMethods.PxScene_getStaticKinematicFilteringMode((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Advances the simulation by an elapsedTime time.  Large elapsedTime values can lead to instabilities. In such cases elapsedTime should be subdivided into smaller time intervals and simulate() should be called multiple times for each interval.  Calls to simulate() should pair with calls to fetchResults(): Each fetchResults() invocation corresponds to exactly one simulate() invocation; calling simulate() twice without an intervening fetchResults() or fetchResults() twice without an intervening simulate() causes an error condition.  scene-&gt;simulate(); ...do some processing until physics is computed... scene-&gt;fetchResults(); ...now results of run may be retrieved.  True if success</summary>
        public static bool SimulateMut(this ref global::PhysX.PxScene @self_, float @elapsedTime, global::PhysX.PxBaseTask* @completionTask, void* @scratchMemBlock, uint @scratchMemBlockSize, bool @controlSimulation)
        {
            return NativeMethods.PxScene_simulate_mut((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_), @elapsedTime, @completionTask, @scratchMemBlock, @scratchMemBlockSize, @controlSimulation);
        }

        /// <summary>Performs dynamics phase of the simulation pipeline.  Calls to advance() should follow calls to fetchCollision(). An error message will be issued if this sequence is not followed.  True if success</summary>
        public static bool AdvanceMut(this ref global::PhysX.PxScene @self_, global::PhysX.PxBaseTask* @completionTask)
        {
            return NativeMethods.PxScene_advance_mut((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_), @completionTask);
        }

        /// <summary>Performs collision detection for the scene over elapsedTime  Calls to collide() should be the first method called to simulate a frame.  True if success</summary>
        public static bool CollideMut(this ref global::PhysX.PxScene @self_, float @elapsedTime, global::PhysX.PxBaseTask* @completionTask, void* @scratchMemBlock, uint @scratchMemBlockSize, bool @controlSimulation)
        {
            return NativeMethods.PxScene_collide_mut((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_), @elapsedTime, @completionTask, @scratchMemBlock, @scratchMemBlockSize, @controlSimulation);
        }

        /// <summary>This checks to see if the simulation run has completed.  This does not cause the data available for reading to be updated with the results of the simulation, it is simply a status check. The bool will allow it to either return immediately or block waiting for the condition to be met so that it can return true  True if the results are available.</summary>
        public static bool CheckResultsMut(this ref global::PhysX.PxScene @self_, bool @block)
        {
            return NativeMethods.PxScene_checkResults_mut((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_), @block);
        }

        /// <summary>This method must be called after collide() and before advance(). It will wait for the collision phase to finish. If the user makes an illegal simulation call, the SDK will issue an error message.</summary>
        public static bool FetchCollisionMut(this ref global::PhysX.PxScene @self_, bool @block)
        {
            return NativeMethods.PxScene_fetchCollision_mut((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_), @block);
        }

        /// <summary>This is the big brother to checkResults() it basically does the following:  True if the results have been fetched.</summary>
        public static bool FetchResultsMut(this ref global::PhysX.PxScene @self_, bool @block, uint* @errorState)
        {
            return NativeMethods.PxScene_fetchResults_mut((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_), @block, @errorState);
        }

        /// <summary>This call performs the first section of fetchResults, and returns a pointer to the contact streams output by the simulation. It can be used to process contact pairs in parallel, which is often a limiting factor for fetchResults() performance.  After calling this function and processing the contact streams, call fetchResultsFinish(). Note that writes to the simulation are not permitted between the start of fetchResultsStart() and the end of fetchResultsFinish().  True if the results have been fetched.</summary>
        public static bool FetchResultsStartMut(this ref global::PhysX.PxScene @self_, global::PhysX.PxContactPairHeader** @contactPairs, uint* @nbContactPairs, bool @block)
        {
            return NativeMethods.PxScene_fetchResultsStart_mut((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_), @contactPairs, @nbContactPairs, @block);
        }

        /// <summary>This call processes all event callbacks in parallel. It takes a continuation task, which will be executed once all callbacks have been processed.  This is a utility function to make it easier to process callbacks in parallel using the PhysX task system. It can only be used in conjunction with fetchResultsStart(...) and fetchResultsFinish(...)</summary>
        public static void ProcessCallbacksMut(this ref global::PhysX.PxScene @self_, global::PhysX.PxBaseTask* @continuation)
        {
            NativeMethods.PxScene_processCallbacks_mut((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_), @continuation);
        }

        /// <summary>This call performs the second section of fetchResults.  It must be called after fetchResultsStart() returns and contact reports have been processed.  Note that once fetchResultsFinish() has been called, the contact streams returned in fetchResultsStart() will be invalid.</summary>
        public static void FetchResultsFinishMut(this ref global::PhysX.PxScene @self_, uint* @errorState)
        {
            NativeMethods.PxScene_fetchResultsFinish_mut((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_), @errorState);
        }

        /// <summary>This call performs the synchronization of particle system data copies.</summary>
        public static void FetchResultsParticleSystemMut(this ref global::PhysX.PxScene @self_)
        {
            NativeMethods.PxScene_fetchResultsParticleSystem_mut((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Clear internal buffers and free memory.  This method can be used to clear buffers and free internal memory without having to destroy the scene. Can be useful if the physics data gets streamed in and a checkpoint with a clean state should be created.  It is not allowed to call this method while the simulation is running. The call will fail.</summary>
        public static void FlushSimulationMut(this ref global::PhysX.PxScene @self_, bool @sendPendingReports)
        {
            NativeMethods.PxScene_flushSimulation_mut((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_), @sendPendingReports);
        }

        /// <summary>Sets a constant gravity for the entire scene.  Do not use this method while the simulation is running.  Sleeping: Does NOT wake the actor up automatically.</summary>
        public static void SetGravityMut(this ref global::PhysX.PxScene @self_, global::PhysX.PxVec3* @vec)
        {
            NativeMethods.PxScene_setGravity_mut((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_), @vec);
        }

        /// <summary>Retrieves the current gravity setting.  The current gravity for the scene.</summary>
        public static global::PhysX.PxVec3 GetGravity(this ref global::PhysX.PxScene @self_)
        {
            return NativeMethods.PxScene_getGravity((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Set the bounce threshold velocity.  Collision speeds below this threshold will not cause a bounce.  Do not use this method while the simulation is running.</summary>
        public static void SetBounceThresholdVelocityMut(this ref global::PhysX.PxScene @self_, float @t)
        {
            NativeMethods.PxScene_setBounceThresholdVelocity_mut((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_), @t);
        }

        /// <summary>Return the bounce threshold velocity.</summary>
        public static float GetBounceThresholdVelocity(this ref global::PhysX.PxScene @self_)
        {
            return NativeMethods.PxScene_getBounceThresholdVelocity((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Sets the maximum number of CCD passes  Do not use this method while the simulation is running.</summary>
        public static void SetCCDMaxPassesMut(this ref global::PhysX.PxScene @self_, uint @ccdMaxPasses)
        {
            NativeMethods.PxScene_setCCDMaxPasses_mut((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_), @ccdMaxPasses);
        }

        /// <summary>Gets the maximum number of CCD passes.  The maximum number of CCD passes.</summary>
        public static uint GetCCDMaxPasses(this ref global::PhysX.PxScene @self_)
        {
            return NativeMethods.PxScene_getCCDMaxPasses((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Set the maximum CCD separation.  Do not use this method while the simulation is running.</summary>
        public static void SetCCDMaxSeparationMut(this ref global::PhysX.PxScene @self_, float @t)
        {
            NativeMethods.PxScene_setCCDMaxSeparation_mut((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_), @t);
        }

        /// <summary>Gets the maximum CCD separation.  The maximum CCD separation.</summary>
        public static float GetCCDMaxSeparation(this ref global::PhysX.PxScene @self_)
        {
            return NativeMethods.PxScene_getCCDMaxSeparation((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Set the CCD threshold.  Do not use this method while the simulation is running.</summary>
        public static void SetCCDThresholdMut(this ref global::PhysX.PxScene @self_, float @t)
        {
            NativeMethods.PxScene_setCCDThreshold_mut((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_), @t);
        }

        /// <summary>Gets the CCD threshold.  The CCD threshold.</summary>
        public static float GetCCDThreshold(this ref global::PhysX.PxScene @self_)
        {
            return NativeMethods.PxScene_getCCDThreshold((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Set the max bias coefficient.  Do not use this method while the simulation is running.</summary>
        public static void SetMaxBiasCoefficientMut(this ref global::PhysX.PxScene @self_, float @t)
        {
            NativeMethods.PxScene_setMaxBiasCoefficient_mut((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_), @t);
        }

        /// <summary>Gets the max bias coefficient.  The max bias coefficient.</summary>
        public static float GetMaxBiasCoefficient(this ref global::PhysX.PxScene @self_)
        {
            return NativeMethods.PxScene_getMaxBiasCoefficient((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Set the friction offset threshold.  Do not use this method while the simulation is running.</summary>
        public static void SetFrictionOffsetThresholdMut(this ref global::PhysX.PxScene @self_, float @t)
        {
            NativeMethods.PxScene_setFrictionOffsetThreshold_mut((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_), @t);
        }

        /// <summary>Gets the friction offset threshold.</summary>
        public static float GetFrictionOffsetThreshold(this ref global::PhysX.PxScene @self_)
        {
            return NativeMethods.PxScene_getFrictionOffsetThreshold((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Set the friction correlation distance.  Do not use this method while the simulation is running.</summary>
        public static void SetFrictionCorrelationDistanceMut(this ref global::PhysX.PxScene @self_, float @t)
        {
            NativeMethods.PxScene_setFrictionCorrelationDistance_mut((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_), @t);
        }

        /// <summary>Gets the friction correlation distance.</summary>
        public static float GetFrictionCorrelationDistance(this ref global::PhysX.PxScene @self_)
        {
            return NativeMethods.PxScene_getFrictionCorrelationDistance((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Return the friction model.</summary>
        public static global::PhysX.PxFrictionType GetFrictionType(this ref global::PhysX.PxScene @self_)
        {
            return NativeMethods.PxScene_getFrictionType((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Return the solver model.</summary>
        public static global::PhysX.PxSolverType GetSolverType(this ref global::PhysX.PxScene @self_)
        {
            return NativeMethods.PxScene_getSolverType((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Function that lets you set debug visualization parameters.  Returns false if the value passed is out of range for usage specified by the enum.  Do not use this method while the simulation is running.  False if the parameter is out of range.</summary>
        public static bool SetVisualizationParameterMut(this ref global::PhysX.PxScene @self_, global::PhysX.PxVisualizationParameter @param, float @value)
        {
            return NativeMethods.PxScene_setVisualizationParameter_mut((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_), @param, @value);
        }

        /// <summary>Function that lets you query debug visualization parameters.  The value of the parameter.</summary>
        public static float GetVisualizationParameter(this ref global::PhysX.PxScene @self_, global::PhysX.PxVisualizationParameter @paramEnum)
        {
            return NativeMethods.PxScene_getVisualizationParameter((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_), @paramEnum);
        }

        /// <summary>Defines a box in world space to which visualization geometry will be (conservatively) culled. Use a non-empty culling box to enable the feature, and an empty culling box to disable it.  Do not use this method while the simulation is running.</summary>
        public static void SetVisualizationCullingBoxMut(this ref global::PhysX.PxScene @self_, global::PhysX.PxBounds3* @box_)
        {
            NativeMethods.PxScene_setVisualizationCullingBox_mut((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_), @box_);
        }

        /// <summary>Retrieves the visualization culling box.  the box to which the geometry will be culled.</summary>
        public static global::PhysX.PxBounds3 GetVisualizationCullingBox(this ref global::PhysX.PxScene @self_)
        {
            return NativeMethods.PxScene_getVisualizationCullingBox((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Retrieves the render buffer.  This will contain the results of any active visualization for this scene.  Do not use this method while the simulation is running. Calls to this method while the simulation is running will result in undefined behaviour.  The render buffer.</summary>
        public static global::PhysX.PxRenderBuffer* GetRenderBufferMut(this ref global::PhysX.PxScene @self_)
        {
            return NativeMethods.PxScene_getRenderBuffer_mut((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Call this method to retrieve statistics for the current simulation step.  Do not use this method while the simulation is running. Calls to this method while the simulation is running will be ignored.</summary>
        public static void GetSimulationStatistics(this ref global::PhysX.PxScene @self_, global::PhysX.PxSimulationStatistics* @stats)
        {
            NativeMethods.PxScene_getSimulationStatistics((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_), @stats);
        }

        /// <summary>Returns broad-phase type.  Broad-phase type</summary>
        public static global::PhysX.PxBroadPhaseType GetBroadPhaseType(this ref global::PhysX.PxScene @self_)
        {
            return NativeMethods.PxScene_getBroadPhaseType((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Gets broad-phase caps.  True if success</summary>
        public static bool GetBroadPhaseCaps(this ref global::PhysX.PxScene @self_, global::PhysX.PxBroadPhaseCaps* @caps)
        {
            return NativeMethods.PxScene_getBroadPhaseCaps((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_), @caps);
        }

        /// <summary>Returns number of regions currently registered in the broad-phase.  Number of regions</summary>
        public static uint GetNbBroadPhaseRegions(this ref global::PhysX.PxScene @self_)
        {
            return NativeMethods.PxScene_getNbBroadPhaseRegions((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Gets broad-phase regions.  Number of written out regions</summary>
        public static uint GetBroadPhaseRegions(this ref global::PhysX.PxScene @self_, global::PhysX.PxBroadPhaseRegionInfo* @userBuffer, uint @bufferSize, uint @startIndex)
        {
            return NativeMethods.PxScene_getBroadPhaseRegions((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_), @userBuffer, @bufferSize, @startIndex);
        }

        /// <summary>Adds a new broad-phase region.  The bounds for the new region must be non-empty, otherwise an error occurs and the call is ignored.  Note that by default, objects already existing in the SDK that might touch this region will not be automatically added to the region. In other words the newly created region will be empty, and will only be populated with new objects when they are added to the simulation, or with already existing objects when they are updated.  It is nonetheless possible to override this default behavior and let the SDK populate the new region automatically with already existing objects overlapping the incoming region. This has a cost though, and it should only be used when the game can not guarantee that all objects within the new region will be added to the simulation after the region itself.  Objects automatically move from one region to another during their lifetime. The system keeps tracks of what regions a given object is in. It is legal for an object to be in an arbitrary number of regions. However if an object leaves all regions, or is created outside of all regions, several things happen: - collisions get disabled for this object - if a PxBroadPhaseCallback object is provided, an \"out-of-bounds\" event is generated via that callback - if a PxBroadPhaseCallback object is not provided, a warning/error message is sent to the error stream  If an object goes out-of-bounds and user deletes it during the same frame, neither the out-of-bounds event nor the error message is generated.  Handle for newly created region, or 0xffffffff in case of failure.</summary>
        public static uint AddBroadPhaseRegionMut(this ref global::PhysX.PxScene @self_, global::PhysX.PxBroadPhaseRegion* @region, bool @populateRegion)
        {
            return NativeMethods.PxScene_addBroadPhaseRegion_mut((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_), @region, @populateRegion);
        }

        /// <summary>Removes a new broad-phase region.  If the region still contains objects, and if those objects do not overlap any region any more, they are not automatically removed from the simulation. Instead, the PxBroadPhaseCallback::onObjectOutOfBounds notification is used for each object. Users are responsible for removing the objects from the simulation if this is the desired behavior.  If the handle is invalid, or if a valid handle is removed twice, an error message is sent to the error stream.  True if success</summary>
        public static bool RemoveBroadPhaseRegionMut(this ref global::PhysX.PxScene @self_, uint @handle)
        {
            return NativeMethods.PxScene_removeBroadPhaseRegion_mut((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_), @handle);
        }

        /// <summary>Get the task manager associated with this scene  the task manager associated with the scene</summary>
        public static global::PhysX.PxTaskManager* GetTaskManager(this ref global::PhysX.PxScene @self_)
        {
            return NativeMethods.PxScene_getTaskManager((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Lock the scene for reading from the calling thread.  When the PxSceneFlag::eREQUIRE_RW_LOCK flag is enabled lockRead() must be called before any read calls are made on the scene.  Multiple threads may read at the same time, no threads may read while a thread is writing. If a call to lockRead() is made while another thread is holding a write lock then the calling thread will be blocked until the writing thread calls unlockWrite().  Lock upgrading is *not* supported, that means it is an error to call lockRead() followed by lockWrite().  Recursive locking is supported but each lockRead() call must be paired with an unlockRead().</summary>
        public static void LockReadMut(this ref global::PhysX.PxScene @self_, byte* @file, uint @line)
        {
            NativeMethods.PxScene_lockRead_mut((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_), @file, @line);
        }

        /// <summary>Unlock the scene from reading.  Each unlockRead() must be paired with a lockRead() from the same thread.</summary>
        public static void UnlockReadMut(this ref global::PhysX.PxScene @self_)
        {
            NativeMethods.PxScene_unlockRead_mut((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Lock the scene for writing from this thread.  When the PxSceneFlag::eREQUIRE_RW_LOCK flag is enabled lockWrite() must be called before any write calls are made on the scene.  Only one thread may write at a time and no threads may read while a thread is writing. If a call to lockWrite() is made and there are other threads reading then the calling thread will be blocked until the readers complete.  Writers have priority. If a thread is blocked waiting to write then subsequent calls to lockRead() from other threads will be blocked until the writer completes.  If multiple threads are waiting to write then the thread that is first granted access depends on OS scheduling.  Recursive locking is supported but each lockWrite() call must be paired with an unlockWrite().  If a thread has already locked the scene for writing then it may call lockRead().</summary>
        public static void LockWriteMut(this ref global::PhysX.PxScene @self_, byte* @file, uint @line)
        {
            NativeMethods.PxScene_lockWrite_mut((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_), @file, @line);
        }

        /// <summary>Unlock the scene from writing.  Each unlockWrite() must be paired with a lockWrite() from the same thread.</summary>
        public static void UnlockWriteMut(this ref global::PhysX.PxScene @self_)
        {
            NativeMethods.PxScene_unlockWrite_mut((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>set the cache blocks that can be used during simulate().  Each frame the simulation requires memory to store contact, friction, and contact cache data. This memory is used in blocks of 16K. Each frame the blocks used by the previous frame are freed, and may be retrieved by the application using PxScene::flushSimulation()  This call will force allocation of cache blocks if the numBlocks parameter is greater than the currently allocated number of blocks, and less than the max16KContactDataBlocks parameter specified at scene creation time.  Do not use this method while the simulation is running.</summary>
        public static void SetNbContactDataBlocksMut(this ref global::PhysX.PxScene @self_, uint @numBlocks)
        {
            NativeMethods.PxScene_setNbContactDataBlocks_mut((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_), @numBlocks);
        }

        /// <summary>get the number of cache blocks currently used by the scene  This function may not be called while the scene is simulating  the number of cache blocks currently used by the scene</summary>
        public static uint GetNbContactDataBlocksUsed(this ref global::PhysX.PxScene @self_)
        {
            return NativeMethods.PxScene_getNbContactDataBlocksUsed((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>get the maximum number of cache blocks used by the scene  This function may not be called while the scene is simulating  the maximum number of cache blocks everused by the scene</summary>
        public static uint GetMaxNbContactDataBlocksUsed(this ref global::PhysX.PxScene @self_)
        {
            return NativeMethods.PxScene_getMaxNbContactDataBlocksUsed((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Return the value of PxSceneDesc::contactReportStreamBufferSize that was set when creating the scene with PxPhysics::createScene</summary>
        public static uint GetContactReportStreamBufferSize(this ref global::PhysX.PxScene @self_)
        {
            return NativeMethods.PxScene_getContactReportStreamBufferSize((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Sets the number of actors required to spawn a separate rigid body solver thread.  Do not use this method while the simulation is running.</summary>
        public static void SetSolverBatchSizeMut(this ref global::PhysX.PxScene @self_, uint @solverBatchSize)
        {
            NativeMethods.PxScene_setSolverBatchSize_mut((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_), @solverBatchSize);
        }

        /// <summary>Retrieves the number of actors required to spawn a separate rigid body solver thread.  Current number of actors required to spawn a separate rigid body solver thread.</summary>
        public static uint GetSolverBatchSize(this ref global::PhysX.PxScene @self_)
        {
            return NativeMethods.PxScene_getSolverBatchSize((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Sets the number of articulations required to spawn a separate rigid body solver thread.  Do not use this method while the simulation is running.</summary>
        public static void SetSolverArticulationBatchSizeMut(this ref global::PhysX.PxScene @self_, uint @solverBatchSize)
        {
            NativeMethods.PxScene_setSolverArticulationBatchSize_mut((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_), @solverBatchSize);
        }

        /// <summary>Retrieves the number of articulations required to spawn a separate rigid body solver thread.  Current number of articulations required to spawn a separate rigid body solver thread.</summary>
        public static uint GetSolverArticulationBatchSize(this ref global::PhysX.PxScene @self_)
        {
            return NativeMethods.PxScene_getSolverArticulationBatchSize((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Returns the wake counter reset value.  Wake counter reset value</summary>
        public static float GetWakeCounterResetValue(this ref global::PhysX.PxScene @self_)
        {
            return NativeMethods.PxScene_getWakeCounterResetValue((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Shift the scene origin by the specified vector.  The poses of all objects in the scene and the corresponding data structures will get adjusted to reflect the new origin location (the shift vector will get subtracted from all object positions).  It is the user's responsibility to keep track of the summed total origin shift and adjust all input/output to/from PhysX accordingly.  Do not use this method while the simulation is running. Calls to this method while the simulation is running will be ignored.  Make sure to propagate the origin shift to other dependent modules (for example, the character controller module etc.).  This is an expensive operation and we recommend to use it only in the case where distance related precision issues may arise in areas far from the origin.</summary>
        public static void ShiftOriginMut(this ref global::PhysX.PxScene @self_, global::PhysX.PxVec3* @shift)
        {
            NativeMethods.PxScene_shiftOrigin_mut((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_), @shift);
        }

        /// <summary>Returns the Pvd client associated with the scene.  the client, NULL if no PVD supported.</summary>
        public static global::PhysX.PxPvdSceneClient* GetScenePvdClientMut(this ref global::PhysX.PxScene @self_)
        {
            return NativeMethods.PxScene_getScenePvdClient_mut((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Copy GPU articulation data from the internal GPU buffer to a user-provided device buffer.</summary>
        public static void CopyArticulationDataMut(this ref global::PhysX.PxScene @self_, void* @data, void* @index, global::PhysX.PxArticulationGpuDataType @dataType, uint @nbCopyArticulations, void* @copyEvent)
        {
            NativeMethods.PxScene_copyArticulationData_mut((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_), @data, @index, @dataType, @nbCopyArticulations, @copyEvent);
        }

        /// <summary>Apply GPU articulation data from a user-provided device buffer to the internal GPU buffer.</summary>
        public static void ApplyArticulationDataMut(this ref global::PhysX.PxScene @self_, void* @data, void* @index, global::PhysX.PxArticulationGpuDataType @dataType, uint @nbUpdatedArticulations, void* @waitEvent, void* @signalEvent)
        {
            NativeMethods.PxScene_applyArticulationData_mut((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_), @data, @index, @dataType, @nbUpdatedArticulations, @waitEvent, @signalEvent);
        }

        /// <summary>Copy GPU softbody data from the internal GPU buffer to a user-provided device buffer.</summary>
        public static void CopySoftBodyDataMut(this ref global::PhysX.PxScene @self_, void** @data, void* @dataSizes, void* @softBodyIndices, global::PhysX.PxSoftBodyDataFlag @flag, uint @nbCopySoftBodies, uint @maxSize, void* @copyEvent)
        {
            NativeMethods.PxScene_copySoftBodyData_mut((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_), @data, @dataSizes, @softBodyIndices, @flag, @nbCopySoftBodies, @maxSize, @copyEvent);
        }

        /// <summary>Apply user-provided data to the internal softbody system.</summary>
        public static void ApplySoftBodyDataMut(this ref global::PhysX.PxScene @self_, void** @data, void* @dataSizes, void* @softBodyIndices, global::PhysX.PxSoftBodyDataFlag @flag, uint @nbUpdatedSoftBodies, uint @maxSize, void* @applyEvent)
        {
            NativeMethods.PxScene_applySoftBodyData_mut((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_), @data, @dataSizes, @softBodyIndices, @flag, @nbUpdatedSoftBodies, @maxSize, @applyEvent);
        }

        /// <summary>Copy contact data from the internal GPU buffer to a user-provided device buffer.  The contact data contains pointers to internal state and is only valid until the next call to simulate().</summary>
        public static void CopyContactDataMut(this ref global::PhysX.PxScene @self_, void* @data, uint @maxContactPairs, void* @numContactPairs, void* @copyEvent)
        {
            NativeMethods.PxScene_copyContactData_mut((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_), @data, @maxContactPairs, @numContactPairs, @copyEvent);
        }

        /// <summary>Copy GPU rigid body data from the internal GPU buffer to a user-provided device buffer.</summary>
        public static void CopyBodyDataMut(this ref global::PhysX.PxScene @self_, global::PhysX.PxGpuBodyData* @data, global::PhysX.PxGpuActorPair* @index, uint @nbCopyActors, void* @copyEvent)
        {
            NativeMethods.PxScene_copyBodyData_mut((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_), @data, @index, @nbCopyActors, @copyEvent);
        }

        /// <summary>Apply user-provided data to rigid body.</summary>
        public static void ApplyActorDataMut(this ref global::PhysX.PxScene @self_, void* @data, global::PhysX.PxGpuActorPair* @index, global::PhysX.PxActorCacheFlag @flag, uint @nbUpdatedActors, void* @waitEvent, void* @signalEvent)
        {
            NativeMethods.PxScene_applyActorData_mut((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_), @data, @index, @flag, @nbUpdatedActors, @waitEvent, @signalEvent);
        }

        /// <summary>Compute dense Jacobian matrices for specified articulations on the GPU.  The size of Jacobians can vary by articulation, since it depends on the number of links, degrees-of-freedom, and whether the base is fixed.  The size is determined using these formulas: nCols = (fixedBase ? 0 : 6) + dofCount nRows = (fixedBase ? 0 : 6) + (linkCount - 1) * 6;  The user must ensure that adequate space is provided for each Jacobian matrix.</summary>
        public static void ComputeDenseJacobiansMut(this ref global::PhysX.PxScene @self_, global::PhysX.PxIndexDataPair* @indices, uint @nbIndices, void* @computeEvent)
        {
            NativeMethods.PxScene_computeDenseJacobians_mut((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_), @indices, @nbIndices, @computeEvent);
        }

        /// <summary>Compute the joint-space inertia matrices that maps joint accelerations to joint forces: forces = M * accelerations on the GPU.  The size of matrices can vary by articulation, since it depends on the number of links and degrees-of-freedom.  The size is determined using this formula: sizeof(float) * dofCount * dofCount  The user must ensure that adequate space is provided for each mass matrix.</summary>
        public static void ComputeGeneralizedMassMatricesMut(this ref global::PhysX.PxScene @self_, global::PhysX.PxIndexDataPair* @indices, uint @nbIndices, void* @computeEvent)
        {
            NativeMethods.PxScene_computeGeneralizedMassMatrices_mut((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_), @indices, @nbIndices, @computeEvent);
        }

        /// <summary>Computes the joint DOF forces required to counteract gravitational forces for the given articulation pose.  The size of the result can vary by articulation, since it depends on the number of links and degrees-of-freedom.  The size is determined using this formula: sizeof(float) * dofCount  The user must ensure that adequate space is provided for each articulation.</summary>
        public static void ComputeGeneralizedGravityForcesMut(this ref global::PhysX.PxScene @self_, global::PhysX.PxIndexDataPair* @indices, uint @nbIndices, void* @computeEvent)
        {
            NativeMethods.PxScene_computeGeneralizedGravityForces_mut((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_), @indices, @nbIndices, @computeEvent);
        }

        /// <summary>Computes the joint DOF forces required to counteract coriolis and centrifugal forces for the given articulation pose.  The size of the result can vary by articulation, since it depends on the number of links and degrees-of-freedom.  The size is determined using this formula: sizeof(float) * dofCount  The user must ensure that adequate space is provided for each articulation.</summary>
        public static void ComputeCoriolisAndCentrifugalForcesMut(this ref global::PhysX.PxScene @self_, global::PhysX.PxIndexDataPair* @indices, uint @nbIndices, void* @computeEvent)
        {
            NativeMethods.PxScene_computeCoriolisAndCentrifugalForces_mut((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_), @indices, @nbIndices, @computeEvent);
        }

        public static global::PhysX.PxgDynamicsMemoryConfig GetGpuDynamicsConfig(this ref global::PhysX.PxScene @self_)
        {
            return NativeMethods.PxScene_getGpuDynamicsConfig((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Apply user-provided data to particle buffers.  This function should be used if the particle buffer flags are already on the device. Otherwise, use PxParticleBuffer::raiseFlags() from the CPU.  This assumes the data has been changed directly in the PxParticleBuffer.</summary>
        public static void ApplyParticleBufferDataMut(this ref global::PhysX.PxScene @self_, uint* @indices, global::PhysX.PxGpuParticleBufferIndexPair* @bufferIndexPair, global::PhysX.PxParticleBufferFlags* @flags, uint @nbUpdatedBuffers, void* @waitEvent, void* @signalEvent)
        {
            NativeMethods.PxScene_applyParticleBufferData_mut((global::PhysX.PxScene*)Unsafe.AsPointer(ref @self_), @indices, @bufferIndexPair, @flags, @nbUpdatedBuffers, @waitEvent, @signalEvent);
        }

        /// <summary>Constructor</summary>
        public static global::PhysX.PxSceneReadLock* ReadLockNewAlloc(this ref global::PhysX.PxScene @scene, byte* @file, uint @line)
        {
            return NativeMethods.PxSceneReadLock_new_alloc((global::PhysX.PxScene*)Unsafe.AsPointer(ref @scene), @file, @line);
        }

        /// <summary>Constructor</summary>
        public static global::PhysX.PxSceneWriteLock* WriteLockNewAlloc(this ref global::PhysX.PxScene @scene, byte* @file, uint @line)
        {
            return NativeMethods.PxSceneWriteLock_new_alloc((global::PhysX.PxScene*)Unsafe.AsPointer(ref @scene), @file, @line);
        }

        /// <summary>Creates the controller manager.  The character controller is informed by [`PxDeletionListener::onRelease`]() when actors or shapes are released, and updates its internal caches accordingly. If character controller movement or a call to [`PxControllerManager::shiftOrigin`]() may overlap with actor/shape releases, internal data structures must be guarded against concurrent access.  Locking guarantees thread safety in such scenarios.  locking may result in significant slowdown for release of actors or shapes.  By default, locking is disabled.</summary>
        public static global::PhysX.PxControllerManager* PhysPxCreateControllerManager(this ref global::PhysX.PxScene @scene, bool @lockingEnabled)
        {
            return NativeMethods.phys_PxCreateControllerManager((global::PhysX.PxScene*)Unsafe.AsPointer(ref @scene), @lockingEnabled);
        }

        /// <summary>Raycast returning any blocking hit, not necessarily the closest.  Returns whether any rigid actor is hit along the ray.  Shooting a ray from within an object leads to different results depending on the shape type. Please check the details in article SceneQuery. User can ignore such objects by using one of the provided filter mechanisms.  True if a blocking hit was found.</summary>
        public static bool QueryExtRaycastAny(this ref global::PhysX.PxScene @scene, global::PhysX.PxVec3* @origin, global::PhysX.PxVec3* @unitDir, float @distance, global::PhysX.PxQueryHit* @hit, global::PhysX.PxQueryFilterData* @filterData, global::PhysX.PxQueryFilterCallback* @filterCall, global::PhysX.PxQueryCache* @cache)
        {
            return NativeMethods.PxSceneQueryExt_raycastAny((global::PhysX.PxScene*)Unsafe.AsPointer(ref @scene), @origin, @unitDir, @distance, @hit, @filterData, @filterCall, @cache);
        }

        /// <summary>Raycast returning a single result.  Returns the first rigid actor that is hit along the ray. Data for a blocking hit will be returned as specified by the outputFlags field. Touching hits will be ignored.  Shooting a ray from within an object leads to different results depending on the shape type. Please check the details in article SceneQuery. User can ignore such objects by using one of the provided filter mechanisms.  True if a blocking hit was found.</summary>
        public static bool QueryExtRaycastSingle(this ref global::PhysX.PxScene @scene, global::PhysX.PxVec3* @origin, global::PhysX.PxVec3* @unitDir, float @distance, global::PhysX.PxHitFlags @outputFlags, global::PhysX.PxRaycastHit* @hit, global::PhysX.PxQueryFilterData* @filterData, global::PhysX.PxQueryFilterCallback* @filterCall, global::PhysX.PxQueryCache* @cache)
        {
            return NativeMethods.PxSceneQueryExt_raycastSingle((global::PhysX.PxScene*)Unsafe.AsPointer(ref @scene), @origin, @unitDir, @distance, @outputFlags, @hit, @filterData, @filterCall, @cache);
        }

        /// <summary>Raycast returning multiple results.  Find all rigid actors that get hit along the ray. Each result contains data as specified by the outputFlags field.  Touching hits are not ordered.  Shooting a ray from within an object leads to different results depending on the shape type. Please check the details in article SceneQuery. User can ignore such objects by using one of the provided filter mechanisms.  Number of hits in the buffer, or -1 if the buffer overflowed.</summary>
        public static int QueryExtRaycastMultiple(this ref global::PhysX.PxScene @scene, global::PhysX.PxVec3* @origin, global::PhysX.PxVec3* @unitDir, float @distance, global::PhysX.PxHitFlags @outputFlags, global::PhysX.PxRaycastHit* @hitBuffer, uint @hitBufferSize, bool* @blockingHit, global::PhysX.PxQueryFilterData* @filterData, global::PhysX.PxQueryFilterCallback* @filterCall, global::PhysX.PxQueryCache* @cache)
        {
            return NativeMethods.PxSceneQueryExt_raycastMultiple((global::PhysX.PxScene*)Unsafe.AsPointer(ref @scene), @origin, @unitDir, @distance, @outputFlags, @hitBuffer, @hitBufferSize, @blockingHit, @filterData, @filterCall, @cache);
        }

        /// <summary>Sweep returning any blocking hit, not necessarily the closest.  Returns whether any rigid actor is hit along the sweep path.  If a shape from the scene is already overlapping with the query shape in its starting position, behavior is controlled by the PxSceneQueryFlag::eINITIAL_OVERLAP flag.  True if a blocking hit was found.</summary>
        public static bool QueryExtSweepAny(this ref global::PhysX.PxScene @scene, global::PhysX.PxGeometry* @geometry, global::PhysX.PxTransform* @pose, global::PhysX.PxVec3* @unitDir, float @distance, global::PhysX.PxHitFlags @queryFlags, global::PhysX.PxQueryHit* @hit, global::PhysX.PxQueryFilterData* @filterData, global::PhysX.PxQueryFilterCallback* @filterCall, global::PhysX.PxQueryCache* @cache, float @inflation)
        {
            return NativeMethods.PxSceneQueryExt_sweepAny((global::PhysX.PxScene*)Unsafe.AsPointer(ref @scene), @geometry, @pose, @unitDir, @distance, @queryFlags, @hit, @filterData, @filterCall, @cache, @inflation);
        }

        /// <summary>Sweep returning a single result.  Returns the first rigid actor that is hit along the ray. Data for a blocking hit will be returned as specified by the outputFlags field. Touching hits will be ignored.  If a shape from the scene is already overlapping with the query shape in its starting position, behavior is controlled by the PxSceneQueryFlag::eINITIAL_OVERLAP flag.  True if a blocking hit was found.</summary>
        public static bool QueryExtSweepSingle(this ref global::PhysX.PxScene @scene, global::PhysX.PxGeometry* @geometry, global::PhysX.PxTransform* @pose, global::PhysX.PxVec3* @unitDir, float @distance, global::PhysX.PxHitFlags @outputFlags, global::PhysX.PxSweepHit* @hit, global::PhysX.PxQueryFilterData* @filterData, global::PhysX.PxQueryFilterCallback* @filterCall, global::PhysX.PxQueryCache* @cache, float @inflation)
        {
            return NativeMethods.PxSceneQueryExt_sweepSingle((global::PhysX.PxScene*)Unsafe.AsPointer(ref @scene), @geometry, @pose, @unitDir, @distance, @outputFlags, @hit, @filterData, @filterCall, @cache, @inflation);
        }

        /// <summary>Sweep returning multiple results.  Find all rigid actors that get hit along the sweep. Each result contains data as specified by the outputFlags field.  Touching hits are not ordered.  If a shape from the scene is already overlapping with the query shape in its starting position, behavior is controlled by the PxSceneQueryFlag::eINITIAL_OVERLAP flag.  Number of hits in the buffer, or -1 if the buffer overflowed.</summary>
        public static int QueryExtSweepMultiple(this ref global::PhysX.PxScene @scene, global::PhysX.PxGeometry* @geometry, global::PhysX.PxTransform* @pose, global::PhysX.PxVec3* @unitDir, float @distance, global::PhysX.PxHitFlags @outputFlags, global::PhysX.PxSweepHit* @hitBuffer, uint @hitBufferSize, bool* @blockingHit, global::PhysX.PxQueryFilterData* @filterData, global::PhysX.PxQueryFilterCallback* @filterCall, global::PhysX.PxQueryCache* @cache, float @inflation)
        {
            return NativeMethods.PxSceneQueryExt_sweepMultiple((global::PhysX.PxScene*)Unsafe.AsPointer(ref @scene), @geometry, @pose, @unitDir, @distance, @outputFlags, @hitBuffer, @hitBufferSize, @blockingHit, @filterData, @filterCall, @cache, @inflation);
        }

        /// <summary>Test overlap between a geometry and objects in the scene.  Filtering: Overlap tests do not distinguish between touching and blocking hit types. Both get written to the hit buffer.  PxHitFlag::eMESH_MULTIPLE and PxHitFlag::eMESH_BOTH_SIDES have no effect in this case  Number of hits in the buffer, or -1 if the buffer overflowed.</summary>
        public static int QueryExtOverlapMultiple(this ref global::PhysX.PxScene @scene, global::PhysX.PxGeometry* @geometry, global::PhysX.PxTransform* @pose, global::PhysX.PxOverlapHit* @hitBuffer, uint @hitBufferSize, global::PhysX.PxQueryFilterData* @filterData, global::PhysX.PxQueryFilterCallback* @filterCall)
        {
            return NativeMethods.PxSceneQueryExt_overlapMultiple((global::PhysX.PxScene*)Unsafe.AsPointer(ref @scene), @geometry, @pose, @hitBuffer, @hitBufferSize, @filterData, @filterCall);
        }

        /// <summary>Test returning, for a given geometry, any overlapping object in the scene.  Filtering: Overlap tests do not distinguish between touching and blocking hit types. Both trigger a hit.  PxHitFlag::eMESH_MULTIPLE and PxHitFlag::eMESH_BOTH_SIDES have no effect in this case  True if an overlap was found.</summary>
        public static bool QueryExtOverlapAny(this ref global::PhysX.PxScene @scene, global::PhysX.PxGeometry* @geometry, global::PhysX.PxTransform* @pose, global::PhysX.PxOverlapHit* @hit, global::PhysX.PxQueryFilterData* @filterData, global::PhysX.PxQueryFilterCallback* @filterCall)
        {
            return NativeMethods.PxSceneQueryExt_overlapAny((global::PhysX.PxScene*)Unsafe.AsPointer(ref @scene), @geometry, @pose, @hit, @filterData, @filterCall);
        }

        /// <summary>Create a PxBatchQueryExt without the need for pre-allocated result or touch buffers.  Returns a PxBatchQueryExt instance. A NULL pointer will be returned if the subsequent allocations fail or if any of the arguments are illegal. In the event that a NULL pointer is returned a corresponding error will be issued to the error stream.</summary>
        public static global::PhysX.PxBatchQueryExt* PhysPxCreateBatchQueryExt(this ref global::PhysX.PxScene @scene, global::PhysX.PxQueryFilterCallback* @queryFilterCallback, uint @maxNbRaycasts, uint @maxNbRaycastTouches, uint @maxNbSweeps, uint @maxNbSweepTouches, uint @maxNbOverlaps, uint @maxNbOverlapTouches)
        {
            return NativeMethods.phys_PxCreateBatchQueryExt((global::PhysX.PxScene*)Unsafe.AsPointer(ref @scene), @queryFilterCallback, @maxNbRaycasts, @maxNbRaycastTouches, @maxNbSweeps, @maxNbSweepTouches, @maxNbOverlaps, @maxNbOverlapTouches);
        }

        /// <summary>Create a PxBatchQueryExt with user-supplied result and touch buffers.  Returns a PxBatchQueryExt instance. A NULL pointer will be returned if the subsequent allocations fail or if any of the arguments are illegal. In the event that a NULL pointer is returned a corresponding error will be issued to the error stream.</summary>
        public static global::PhysX.PxBatchQueryExt* PhysPxCreateBatchQueryExt1(this ref global::PhysX.PxScene @scene, global::PhysX.PxQueryFilterCallback* @queryFilterCallback, global::PhysX.PxRaycastBuffer* @raycastBuffers, uint @maxNbRaycasts, global::PhysX.PxRaycastHit* @raycastTouches, uint @maxNbRaycastTouches, global::PhysX.PxSweepBuffer* @sweepBuffers, uint @maxNbSweeps, global::PhysX.PxSweepHit* @sweepTouches, uint @maxNbSweepTouches, global::PhysX.PxOverlapBuffer* @overlapBuffers, uint @maxNbOverlaps, global::PhysX.PxOverlapHit* @overlapTouches, uint @maxNbOverlapTouches)
        {
            return NativeMethods.phys_PxCreateBatchQueryExt_1((global::PhysX.PxScene*)Unsafe.AsPointer(ref @scene), @queryFilterCallback, @raycastBuffers, @maxNbRaycasts, @raycastTouches, @maxNbRaycastTouches, @sweepBuffers, @maxNbSweeps, @sweepTouches, @maxNbSweepTouches, @overlapBuffers, @maxNbOverlaps, @overlapTouches, @maxNbOverlapTouches);
        }

        #endregion

        #region PhysX.PxSceneReadLock(1)

        public static void Delete(this ref global::PhysX.PxSceneReadLock @self_)
        {
            NativeMethods.PxSceneReadLock_delete((global::PhysX.PxSceneReadLock*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxSceneWriteLock(1)

        public static void Delete(this ref global::PhysX.PxSceneWriteLock @self_)
        {
            NativeMethods.PxSceneWriteLock_delete((global::PhysX.PxSceneWriteLock*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxContactPairExtraDataIterator(1)

        /// <summary>Advances the iterator to next set of extra data items.  The contact pair extra data stream contains sets of items as requested by the corresponding [`PxPairFlag`] flags [`PxPairFlag::ePRE_SOLVER_VELOCITY`], #PxPairFlag::ePOST_SOLVER_VELOCITY, #PxPairFlag::eCONTACT_EVENT_POSE. A set can contain one item of each plus the PxContactPairIndex item. This method parses the stream and points the iterator member variables to the corresponding items of the current set, if they are available. If CCD is not enabled, you should only get one set of items. If CCD with multiple passes is enabled, you might get more than one item set.  Even though contact pair extra data is requested per shape pair, you will not get an item set per shape pair but one per actor pair. If, for example, an actor has two shapes and both collide with another actor, then there will only be one item set (since it applies to both shape pairs).  True if there was another set of extra data items in the stream, else false.</summary>
        public static bool NextItemSetMut(this ref global::PhysX.PxContactPairExtraDataIterator @self_)
        {
            return NativeMethods.PxContactPairExtraDataIterator_nextItemSet_mut((global::PhysX.PxContactPairExtraDataIterator*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxContactPair(3)

        /// <summary>Extracts the contact points from the stream and stores them in a convenient format.  Number of contact points written to the buffer.</summary>
        public static uint ExtractContacts(this ref global::PhysX.PxContactPair @self_, global::PhysX.PxContactPairPoint* @userBuffer, uint @bufferSize)
        {
            return NativeMethods.PxContactPair_extractContacts((global::PhysX.PxContactPair*)Unsafe.AsPointer(ref @self_), @userBuffer, @bufferSize);
        }

        /// <summary>Helper method to clone the contact pair and copy the contact data stream into a user buffer.  The contact data stream is only accessible during the contact report callback. This helper function provides copy functionality to buffer the contact stream information such that it can get accessed at a later stage.</summary>
        public static void BufferContacts(this ref global::PhysX.PxContactPair @self_, global::PhysX.PxContactPair* @newPair, byte* @bufferMemory)
        {
            NativeMethods.PxContactPair_bufferContacts((global::PhysX.PxContactPair*)Unsafe.AsPointer(ref @self_), @newPair, @bufferMemory);
        }

        public static uint* GetInternalFaceIndices(this ref global::PhysX.PxContactPair @self_)
        {
            return NativeMethods.PxContactPair_getInternalFaceIndices((global::PhysX.PxContactPair*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxPruningStructure(6)

        /// <summary>Release this object.</summary>
        public static void ReleaseMut(this ref global::PhysX.PxPruningStructure @self_)
        {
            NativeMethods.PxPruningStructure_release_mut((global::PhysX.PxPruningStructure*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Retrieve rigid actors in the pruning structure.  You can retrieve the number of rigid actor pointers by calling [`getNbRigidActors`]()  Number of rigid actor pointers written to the buffer.</summary>
        public static uint GetRigidActors(this ref global::PhysX.PxPruningStructure @self_, global::PhysX.PxRigidActor** @userBuffer, uint @bufferSize, uint @startIndex)
        {
            return NativeMethods.PxPruningStructure_getRigidActors((global::PhysX.PxPruningStructure*)Unsafe.AsPointer(ref @self_), @userBuffer, @bufferSize, @startIndex);
        }

        /// <summary>Returns the number of rigid actors in the pruning structure.  You can use [`getRigidActors`]() to retrieve the rigid actor pointers.  Number of rigid actors in the pruning structure.</summary>
        public static uint GetNbRigidActors(this ref global::PhysX.PxPruningStructure @self_)
        {
            return NativeMethods.PxPruningStructure_getNbRigidActors((global::PhysX.PxPruningStructure*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Gets the merge data for static actors  This is mainly called by the PxSceneQuerySystem::merge() function to merge a PxPruningStructure with the internal data-structures of the scene-query system.  Implementation-dependent merge data for static actors.</summary>
        public static void* GetStaticMergeData(this ref global::PhysX.PxPruningStructure @self_)
        {
            return NativeMethods.PxPruningStructure_getStaticMergeData((global::PhysX.PxPruningStructure*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Gets the merge data for dynamic actors  This is mainly called by the PxSceneQuerySystem::merge() function to merge a PxPruningStructure with the internal data-structures of the scene-query system.  Implementation-dependent merge data for dynamic actors.</summary>
        public static void* GetDynamicMergeData(this ref global::PhysX.PxPruningStructure @self_)
        {
            return NativeMethods.PxPruningStructure_getDynamicMergeData((global::PhysX.PxPruningStructure*)Unsafe.AsPointer(ref @self_));
        }

        public static byte* GetConcreteTypeName(this ref global::PhysX.PxPruningStructure @self_)
        {
            return NativeMethods.PxPruningStructure_getConcreteTypeName((global::PhysX.PxPruningStructure*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxExtendedVec3(17)

        public static bool IsZero(this ref global::PhysX.PxExtendedVec3 @self_)
        {
            return NativeMethods.PxExtendedVec3_isZero((global::PhysX.PxExtendedVec3*)Unsafe.AsPointer(ref @self_));
        }

        public static double Dot(this ref global::PhysX.PxExtendedVec3 @self_, global::PhysX.PxVec3* @v)
        {
            return NativeMethods.PxExtendedVec3_dot((global::PhysX.PxExtendedVec3*)Unsafe.AsPointer(ref @self_), @v);
        }

        public static double DistanceSquared(this ref global::PhysX.PxExtendedVec3 @self_, global::PhysX.PxExtendedVec3* @v)
        {
            return NativeMethods.PxExtendedVec3_distanceSquared((global::PhysX.PxExtendedVec3*)Unsafe.AsPointer(ref @self_), @v);
        }

        public static double MagnitudeSquared(this ref global::PhysX.PxExtendedVec3 @self_)
        {
            return NativeMethods.PxExtendedVec3_magnitudeSquared((global::PhysX.PxExtendedVec3*)Unsafe.AsPointer(ref @self_));
        }

        public static double Magnitude(this ref global::PhysX.PxExtendedVec3 @self_)
        {
            return NativeMethods.PxExtendedVec3_magnitude((global::PhysX.PxExtendedVec3*)Unsafe.AsPointer(ref @self_));
        }

        public static double NormalizeMut(this ref global::PhysX.PxExtendedVec3 @self_)
        {
            return NativeMethods.PxExtendedVec3_normalize_mut((global::PhysX.PxExtendedVec3*)Unsafe.AsPointer(ref @self_));
        }

        public static bool IsFinite(this ref global::PhysX.PxExtendedVec3 @self_)
        {
            return NativeMethods.PxExtendedVec3_isFinite((global::PhysX.PxExtendedVec3*)Unsafe.AsPointer(ref @self_));
        }

        public static void MaximumMut(this ref global::PhysX.PxExtendedVec3 @self_, global::PhysX.PxExtendedVec3* @v)
        {
            NativeMethods.PxExtendedVec3_maximum_mut((global::PhysX.PxExtendedVec3*)Unsafe.AsPointer(ref @self_), @v);
        }

        public static void MinimumMut(this ref global::PhysX.PxExtendedVec3 @self_, global::PhysX.PxExtendedVec3* @v)
        {
            NativeMethods.PxExtendedVec3_minimum_mut((global::PhysX.PxExtendedVec3*)Unsafe.AsPointer(ref @self_), @v);
        }

        public static void SetMut(this ref global::PhysX.PxExtendedVec3 @self_, double @x_, double @y_, double @z_)
        {
            NativeMethods.PxExtendedVec3_set_mut((global::PhysX.PxExtendedVec3*)Unsafe.AsPointer(ref @self_), @x_, @y_, @z_);
        }

        public static void SetPlusInfinityMut(this ref global::PhysX.PxExtendedVec3 @self_)
        {
            NativeMethods.PxExtendedVec3_setPlusInfinity_mut((global::PhysX.PxExtendedVec3*)Unsafe.AsPointer(ref @self_));
        }

        public static void SetMinusInfinityMut(this ref global::PhysX.PxExtendedVec3 @self_)
        {
            NativeMethods.PxExtendedVec3_setMinusInfinity_mut((global::PhysX.PxExtendedVec3*)Unsafe.AsPointer(ref @self_));
        }

        public static void CrossMut(this ref global::PhysX.PxExtendedVec3 @self_, global::PhysX.PxExtendedVec3* @left, global::PhysX.PxVec3* @right)
        {
            NativeMethods.PxExtendedVec3_cross_mut((global::PhysX.PxExtendedVec3*)Unsafe.AsPointer(ref @self_), @left, @right);
        }

        public static void CrossMut1(this ref global::PhysX.PxExtendedVec3 @self_, global::PhysX.PxExtendedVec3* @left, global::PhysX.PxExtendedVec3* @right)
        {
            NativeMethods.PxExtendedVec3_cross_mut_1((global::PhysX.PxExtendedVec3*)Unsafe.AsPointer(ref @self_), @left, @right);
        }

        public static global::PhysX.PxExtendedVec3 Cross(this ref global::PhysX.PxExtendedVec3 @self_, global::PhysX.PxExtendedVec3* @v)
        {
            return NativeMethods.PxExtendedVec3_cross((global::PhysX.PxExtendedVec3*)Unsafe.AsPointer(ref @self_), @v);
        }

        public static void CrossMut2(this ref global::PhysX.PxExtendedVec3 @self_, global::PhysX.PxVec3* @left, global::PhysX.PxExtendedVec3* @right)
        {
            NativeMethods.PxExtendedVec3_cross_mut_2((global::PhysX.PxExtendedVec3*)Unsafe.AsPointer(ref @self_), @left, @right);
        }

        public static global::PhysX.PxVec3 PhysToVec3(this ref global::PhysX.PxExtendedVec3 @v)
        {
            return NativeMethods.phys_toVec3((global::PhysX.PxExtendedVec3*)Unsafe.AsPointer(ref @v));
        }

        #endregion

        #region PhysX.PxObstacle(1)

        public static global::PhysX.PxGeometryType GetType(this ref global::PhysX.PxObstacle @self_)
        {
            return NativeMethods.PxObstacle_getType((global::PhysX.PxObstacle*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxObstacleContext(8)

        /// <summary>Releases the context.</summary>
        public static void ReleaseMut(this ref global::PhysX.PxObstacleContext @self_)
        {
            NativeMethods.PxObstacleContext_release_mut((global::PhysX.PxObstacleContext*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Retrieves the controller manager associated with this context.  The associated controller manager</summary>
        public static global::PhysX.PxControllerManager* GetControllerManager(this ref global::PhysX.PxObstacleContext @self_)
        {
            return NativeMethods.PxObstacleContext_getControllerManager((global::PhysX.PxObstacleContext*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Adds an obstacle to the context.  Handle for newly-added obstacle</summary>
        public static uint AddObstacleMut(this ref global::PhysX.PxObstacleContext @self_, global::PhysX.PxObstacle* @obstacle)
        {
            return NativeMethods.PxObstacleContext_addObstacle_mut((global::PhysX.PxObstacleContext*)Unsafe.AsPointer(ref @self_), @obstacle);
        }

        /// <summary>Removes an obstacle from the context.  True if success</summary>
        public static bool RemoveObstacleMut(this ref global::PhysX.PxObstacleContext @self_, uint @handle)
        {
            return NativeMethods.PxObstacleContext_removeObstacle_mut((global::PhysX.PxObstacleContext*)Unsafe.AsPointer(ref @self_), @handle);
        }

        /// <summary>Updates data for an existing obstacle.  True if success</summary>
        public static bool UpdateObstacleMut(this ref global::PhysX.PxObstacleContext @self_, uint @handle, global::PhysX.PxObstacle* @obstacle)
        {
            return NativeMethods.PxObstacleContext_updateObstacle_mut((global::PhysX.PxObstacleContext*)Unsafe.AsPointer(ref @self_), @handle, @obstacle);
        }

        /// <summary>Retrieves number of obstacles in the context.  Number of obstacles in the context</summary>
        public static uint GetNbObstacles(this ref global::PhysX.PxObstacleContext @self_)
        {
            return NativeMethods.PxObstacleContext_getNbObstacles((global::PhysX.PxObstacleContext*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Retrieves desired obstacle.  Desired obstacle</summary>
        public static global::PhysX.PxObstacle* GetObstacle(this ref global::PhysX.PxObstacleContext @self_, uint @i)
        {
            return NativeMethods.PxObstacleContext_getObstacle((global::PhysX.PxObstacleContext*)Unsafe.AsPointer(ref @self_), @i);
        }

        /// <summary>Retrieves desired obstacle by given handle.  Desired obstacle</summary>
        public static global::PhysX.PxObstacle* GetObstacleByHandle(this ref global::PhysX.PxObstacleContext @self_, uint @handle)
        {
            return NativeMethods.PxObstacleContext_getObstacleByHandle((global::PhysX.PxObstacleContext*)Unsafe.AsPointer(ref @self_), @handle);
        }

        #endregion

        #region PhysX.PxUserControllerHitReport(3)

        /// <summary>Called when current controller hits a shape.  This is called when the CCT moves and hits a shape. This will not be called when a moving shape hits a non-moving CCT.</summary>
        public static void OnShapeHitMut(this ref global::PhysX.PxUserControllerHitReport @self_, global::PhysX.PxControllerShapeHit* @hit)
        {
            NativeMethods.PxUserControllerHitReport_onShapeHit_mut((global::PhysX.PxUserControllerHitReport*)Unsafe.AsPointer(ref @self_), @hit);
        }

        /// <summary>Called when current controller hits another controller.</summary>
        public static void OnControllerHitMut(this ref global::PhysX.PxUserControllerHitReport @self_, global::PhysX.PxControllersHit* @hit)
        {
            NativeMethods.PxUserControllerHitReport_onControllerHit_mut((global::PhysX.PxUserControllerHitReport*)Unsafe.AsPointer(ref @self_), @hit);
        }

        /// <summary>Called when current controller hits a user-defined obstacle.</summary>
        public static void OnObstacleHitMut(this ref global::PhysX.PxUserControllerHitReport @self_, global::PhysX.PxControllerObstacleHit* @hit)
        {
            NativeMethods.PxUserControllerHitReport_onObstacleHit_mut((global::PhysX.PxUserControllerHitReport*)Unsafe.AsPointer(ref @self_), @hit);
        }

        #endregion

        #region PhysX.PxControllerFilterCallback(2)

        public static void Delete(this ref global::PhysX.PxControllerFilterCallback @self_)
        {
            NativeMethods.PxControllerFilterCallback_delete((global::PhysX.PxControllerFilterCallback*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Filtering method for CCT-vs-CCT.  true to keep the pair, false to filter it out</summary>
        public static bool FilterMut(this ref global::PhysX.PxControllerFilterCallback @self_, global::PhysX.PxController* @a, global::PhysX.PxController* @b)
        {
            return NativeMethods.PxControllerFilterCallback_filter_mut((global::PhysX.PxControllerFilterCallback*)Unsafe.AsPointer(ref @self_), @a, @b);
        }

        #endregion

        #region PhysX.PxControllerDesc(2)

        /// <summary>returns true if the current settings are valid  True if the descriptor is valid.</summary>
        public static bool IsValid(this ref global::PhysX.PxControllerDesc @self_)
        {
            return NativeMethods.PxControllerDesc_isValid((global::PhysX.PxControllerDesc*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Returns the character controller type  The controllers type.</summary>
        public static global::PhysX.PxControllerShapeType GetType(this ref global::PhysX.PxControllerDesc @self_)
        {
            return NativeMethods.PxControllerDesc_getType((global::PhysX.PxControllerDesc*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxController(25)

        /// <summary>Return the type of controller</summary>
        public static global::PhysX.PxControllerShapeType GetType(this ref global::PhysX.PxController @self_)
        {
            return NativeMethods.PxController_getType((global::PhysX.PxController*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Releases the controller.</summary>
        public static void ReleaseMut(this ref global::PhysX.PxController @self_)
        {
            NativeMethods.PxController_release_mut((global::PhysX.PxController*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Moves the character using a \"collide-and-slide\" algorithm.  Collision flags, collection of ::PxControllerCollisionFlags</summary>
        public static global::PhysX.PxControllerCollisionFlags MoveMut(this ref global::PhysX.PxController @self_, global::PhysX.PxVec3* @disp, float @minDist, float @elapsedTime, global::PhysX.PxControllerFilters* @filters, global::PhysX.PxObstacleContext* @obstacles)
        {
            return NativeMethods.PxController_move_mut((global::PhysX.PxController*)Unsafe.AsPointer(ref @self_), @disp, @minDist, @elapsedTime, @filters, @obstacles);
        }

        /// <summary>Sets controller's position.  The position controlled by this function is the center of the collision shape.  This is a 'teleport' function, it doesn't check for collisions.  The character's position must be such that it does not overlap the static geometry.  To move the character under normal conditions use the [`move`]() function.  Currently always returns true.</summary>
        public static bool SetPositionMut(this ref global::PhysX.PxController @self_, global::PhysX.PxExtendedVec3* @position)
        {
            return NativeMethods.PxController_setPosition_mut((global::PhysX.PxController*)Unsafe.AsPointer(ref @self_), @position);
        }

        /// <summary>Retrieve the raw position of the controller.  The position retrieved by this function is the center of the collision shape. To retrieve the bottom position of the shape, a.k.a. the foot position, use the getFootPosition() function.  The position is updated by calls to move(). Calling this method without calling move() will return the last position or the initial position of the controller.  The controller's center position</summary>
        public static global::PhysX.PxExtendedVec3* GetPosition(this ref global::PhysX.PxController @self_)
        {
            return NativeMethods.PxController_getPosition((global::PhysX.PxController*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Set controller's foot position.  The position controlled by this function is the bottom of the collision shape, a.k.a. the foot position.  The foot position takes the contact offset into account  This is a 'teleport' function, it doesn't check for collisions.  To move the character under normal conditions use the [`move`]() function.  Currently always returns true.</summary>
        public static bool SetFootPositionMut(this ref global::PhysX.PxController @self_, global::PhysX.PxExtendedVec3* @position)
        {
            return NativeMethods.PxController_setFootPosition_mut((global::PhysX.PxController*)Unsafe.AsPointer(ref @self_), @position);
        }

        /// <summary>Retrieve the \"foot\" position of the controller, i.e. the position of the bottom of the CCT's shape.  The foot position takes the contact offset into account  The controller's foot position</summary>
        public static global::PhysX.PxExtendedVec3 GetFootPosition(this ref global::PhysX.PxController @self_)
        {
            return NativeMethods.PxController_getFootPosition((global::PhysX.PxController*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Get the rigid body actor associated with this controller (see PhysX documentation). The behavior upon manually altering this actor is undefined, you should primarily use it for reading const properties.  the actor associated with the controller.</summary>
        public static global::PhysX.PxRigidDynamic* GetActor(this ref global::PhysX.PxController @self_)
        {
            return NativeMethods.PxController_getActor((global::PhysX.PxController*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>The step height.</summary>
        public static void SetStepOffsetMut(this ref global::PhysX.PxController @self_, float @offset)
        {
            NativeMethods.PxController_setStepOffset_mut((global::PhysX.PxController*)Unsafe.AsPointer(ref @self_), @offset);
        }

        /// <summary>Retrieve the step height.  The step offset for the controller.</summary>
        public static float GetStepOffset(this ref global::PhysX.PxController @self_)
        {
            return NativeMethods.PxController_getStepOffset((global::PhysX.PxController*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Sets the non-walkable mode for the CCT.</summary>
        public static void SetNonWalkableModeMut(this ref global::PhysX.PxController @self_, global::PhysX.PxControllerNonWalkableMode @flag)
        {
            NativeMethods.PxController_setNonWalkableMode_mut((global::PhysX.PxController*)Unsafe.AsPointer(ref @self_), @flag);
        }

        /// <summary>Retrieves the non-walkable mode for the CCT.  The current non-walkable mode.</summary>
        public static global::PhysX.PxControllerNonWalkableMode GetNonWalkableMode(this ref global::PhysX.PxController @self_)
        {
            return NativeMethods.PxController_getNonWalkableMode((global::PhysX.PxController*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Retrieve the contact offset.  The contact offset for the controller.</summary>
        public static float GetContactOffset(this ref global::PhysX.PxController @self_)
        {
            return NativeMethods.PxController_getContactOffset((global::PhysX.PxController*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Sets the contact offset.</summary>
        public static void SetContactOffsetMut(this ref global::PhysX.PxController @self_, float @offset)
        {
            NativeMethods.PxController_setContactOffset_mut((global::PhysX.PxController*)Unsafe.AsPointer(ref @self_), @offset);
        }

        /// <summary>Retrieve the 'up' direction.  The up direction for the controller.</summary>
        public static global::PhysX.PxVec3 GetUpDirection(this ref global::PhysX.PxController @self_)
        {
            return NativeMethods.PxController_getUpDirection((global::PhysX.PxController*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Sets the 'up' direction.</summary>
        public static void SetUpDirectionMut(this ref global::PhysX.PxController @self_, global::PhysX.PxVec3* @up)
        {
            NativeMethods.PxController_setUpDirection_mut((global::PhysX.PxController*)Unsafe.AsPointer(ref @self_), @up);
        }

        /// <summary>Retrieve the slope limit.  The slope limit for the controller.</summary>
        public static float GetSlopeLimit(this ref global::PhysX.PxController @self_)
        {
            return NativeMethods.PxController_getSlopeLimit((global::PhysX.PxController*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Sets the slope limit.  This feature can not be enabled at runtime, i.e. if the slope limit is zero when creating the CCT (which disables the feature) then changing the slope limit at runtime will not have any effect, and the call will be ignored.</summary>
        public static void SetSlopeLimitMut(this ref global::PhysX.PxController @self_, float @slopeLimit)
        {
            NativeMethods.PxController_setSlopeLimit_mut((global::PhysX.PxController*)Unsafe.AsPointer(ref @self_), @slopeLimit);
        }

        /// <summary>Flushes internal geometry cache.  The character controller uses caching in order to speed up collision testing. The cache is automatically flushed when a change to static objects is detected in the scene. For example when a static shape is added, updated, or removed from the scene, the cache is automatically invalidated.  However there may be situations that cannot be automatically detected, and those require manual invalidation of the cache. Currently the user must call this when the filtering behavior changes (the PxControllerFilters parameter of the PxController::move call).  While the controller in principle could detect a change in these parameters, it cannot detect a change in the behavior of the filtering function.</summary>
        public static void InvalidateCacheMut(this ref global::PhysX.PxController @self_)
        {
            NativeMethods.PxController_invalidateCache_mut((global::PhysX.PxController*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Retrieve the scene associated with the controller.  The physics scene</summary>
        public static global::PhysX.PxScene* GetSceneMut(this ref global::PhysX.PxController @self_)
        {
            return NativeMethods.PxController_getScene_mut((global::PhysX.PxController*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Returns the user data associated with this controller.  The user pointer associated with the controller.</summary>
        public static void* GetUserData(this ref global::PhysX.PxController @self_)
        {
            return NativeMethods.PxController_getUserData((global::PhysX.PxController*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Sets the user data associated with this controller.</summary>
        public static void SetUserDataMut(this ref global::PhysX.PxController @self_, void* @userData)
        {
            NativeMethods.PxController_setUserData_mut((global::PhysX.PxController*)Unsafe.AsPointer(ref @self_), @userData);
        }

        /// <summary>Returns information about the controller's internal state.</summary>
        public static void GetState(this ref global::PhysX.PxController @self_, global::PhysX.PxControllerState* @state)
        {
            NativeMethods.PxController_getState((global::PhysX.PxController*)Unsafe.AsPointer(ref @self_), @state);
        }

        /// <summary>Returns the controller's internal statistics.</summary>
        public static void GetStats(this ref global::PhysX.PxController @self_, global::PhysX.PxControllerStats* @stats)
        {
            NativeMethods.PxController_getStats((global::PhysX.PxController*)Unsafe.AsPointer(ref @self_), @stats);
        }

        /// <summary>Resizes the controller.  This function attempts to resize the controller to a given size, while making sure the bottom position of the controller remains constant. In other words the function modifies both the height and the (center) position of the controller. This is a helper function that can be used to implement a 'crouch' functionality for example.</summary>
        public static void ResizeMut(this ref global::PhysX.PxController @self_, float @height)
        {
            NativeMethods.PxController_resize_mut((global::PhysX.PxController*)Unsafe.AsPointer(ref @self_), @height);
        }

        #endregion

        #region PhysX.PxBoxControllerDesc(3)

        public static void Delete(this ref global::PhysX.PxBoxControllerDesc @self_)
        {
            NativeMethods.PxBoxControllerDesc_delete((global::PhysX.PxBoxControllerDesc*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>(re)sets the structure to the default.</summary>
        public static void SetToDefaultMut(this ref global::PhysX.PxBoxControllerDesc @self_)
        {
            NativeMethods.PxBoxControllerDesc_setToDefault_mut((global::PhysX.PxBoxControllerDesc*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>returns true if the current settings are valid  True if the descriptor is valid.</summary>
        public static bool IsValid(this ref global::PhysX.PxBoxControllerDesc @self_)
        {
            return NativeMethods.PxBoxControllerDesc_isValid((global::PhysX.PxBoxControllerDesc*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxBoxController(6)

        /// <summary>Gets controller's half height.  The half height of the controller.</summary>
        public static float GetHalfHeight(this ref global::PhysX.PxBoxController @self_)
        {
            return NativeMethods.PxBoxController_getHalfHeight((global::PhysX.PxBoxController*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Gets controller's half side extent.  The half side extent of the controller.</summary>
        public static float GetHalfSideExtent(this ref global::PhysX.PxBoxController @self_)
        {
            return NativeMethods.PxBoxController_getHalfSideExtent((global::PhysX.PxBoxController*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Gets controller's half forward extent.  The half forward extent of the controller.</summary>
        public static float GetHalfForwardExtent(this ref global::PhysX.PxBoxController @self_)
        {
            return NativeMethods.PxBoxController_getHalfForwardExtent((global::PhysX.PxBoxController*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Sets controller's half height.  this doesn't check for collisions.  Currently always true.</summary>
        public static bool SetHalfHeightMut(this ref global::PhysX.PxBoxController @self_, float @halfHeight)
        {
            return NativeMethods.PxBoxController_setHalfHeight_mut((global::PhysX.PxBoxController*)Unsafe.AsPointer(ref @self_), @halfHeight);
        }

        /// <summary>Sets controller's half side extent.  this doesn't check for collisions.  Currently always true.</summary>
        public static bool SetHalfSideExtentMut(this ref global::PhysX.PxBoxController @self_, float @halfSideExtent)
        {
            return NativeMethods.PxBoxController_setHalfSideExtent_mut((global::PhysX.PxBoxController*)Unsafe.AsPointer(ref @self_), @halfSideExtent);
        }

        /// <summary>Sets controller's half forward extent.  this doesn't check for collisions.  Currently always true.</summary>
        public static bool SetHalfForwardExtentMut(this ref global::PhysX.PxBoxController @self_, float @halfForwardExtent)
        {
            return NativeMethods.PxBoxController_setHalfForwardExtent_mut((global::PhysX.PxBoxController*)Unsafe.AsPointer(ref @self_), @halfForwardExtent);
        }

        #endregion

        #region PhysX.PxCapsuleControllerDesc(3)

        public static void Delete(this ref global::PhysX.PxCapsuleControllerDesc @self_)
        {
            NativeMethods.PxCapsuleControllerDesc_delete((global::PhysX.PxCapsuleControllerDesc*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>(re)sets the structure to the default.</summary>
        public static void SetToDefaultMut(this ref global::PhysX.PxCapsuleControllerDesc @self_)
        {
            NativeMethods.PxCapsuleControllerDesc_setToDefault_mut((global::PhysX.PxCapsuleControllerDesc*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>returns true if the current settings are valid  True if the descriptor is valid.</summary>
        public static bool IsValid(this ref global::PhysX.PxCapsuleControllerDesc @self_)
        {
            return NativeMethods.PxCapsuleControllerDesc_isValid((global::PhysX.PxCapsuleControllerDesc*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxCapsuleController(6)

        /// <summary>Gets controller's radius.  The radius of the controller.</summary>
        public static float GetRadius(this ref global::PhysX.PxCapsuleController @self_)
        {
            return NativeMethods.PxCapsuleController_getRadius((global::PhysX.PxCapsuleController*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Sets controller's radius.  this doesn't check for collisions.  Currently always true.</summary>
        public static bool SetRadiusMut(this ref global::PhysX.PxCapsuleController @self_, float @radius)
        {
            return NativeMethods.PxCapsuleController_setRadius_mut((global::PhysX.PxCapsuleController*)Unsafe.AsPointer(ref @self_), @radius);
        }

        /// <summary>Gets controller's height.  The height of the capsule controller.</summary>
        public static float GetHeight(this ref global::PhysX.PxCapsuleController @self_)
        {
            return NativeMethods.PxCapsuleController_getHeight((global::PhysX.PxCapsuleController*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Resets controller's height.  this doesn't check for collisions.  Currently always true.</summary>
        public static bool SetHeightMut(this ref global::PhysX.PxCapsuleController @self_, float @height)
        {
            return NativeMethods.PxCapsuleController_setHeight_mut((global::PhysX.PxCapsuleController*)Unsafe.AsPointer(ref @self_), @height);
        }

        /// <summary>Gets controller's climbing mode.  The capsule controller's climbing mode.</summary>
        public static global::PhysX.PxCapsuleClimbingMode GetClimbingMode(this ref global::PhysX.PxCapsuleController @self_)
        {
            return NativeMethods.PxCapsuleController_getClimbingMode((global::PhysX.PxCapsuleController*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Sets controller's climbing mode.</summary>
        public static bool SetClimbingModeMut(this ref global::PhysX.PxCapsuleController @self_, global::PhysX.PxCapsuleClimbingMode @mode)
        {
            return NativeMethods.PxCapsuleController_setClimbingMode_mut((global::PhysX.PxCapsuleController*)Unsafe.AsPointer(ref @self_), @mode);
        }

        #endregion

        #region PhysX.PxControllerBehaviorCallback(3)

        /// <summary>Retrieve behavior flags for a shape.  When the CCT touches a shape, the CCT's behavior w.r.t. this shape can be customized by users. This function retrieves the desired PxControllerBehaviorFlag flags capturing the desired behavior.  See comments about deprecated functions at the start of this class  Desired behavior flags for the given shape</summary>
        public static global::PhysX.PxControllerBehaviorFlags GetBehaviorFlagsMut(this ref global::PhysX.PxControllerBehaviorCallback @self_, global::PhysX.PxShape* @shape, global::PhysX.PxActor* @actor)
        {
            return NativeMethods.PxControllerBehaviorCallback_getBehaviorFlags_mut((global::PhysX.PxControllerBehaviorCallback*)Unsafe.AsPointer(ref @self_), @shape, @actor);
        }

        /// <summary>Retrieve behavior flags for a controller.  When the CCT touches a controller, the CCT's behavior w.r.t. this controller can be customized by users. This function retrieves the desired PxControllerBehaviorFlag flags capturing the desired behavior.  The flag PxControllerBehaviorFlag::eCCT_CAN_RIDE_ON_OBJECT is not supported.  See comments about deprecated functions at the start of this class  Desired behavior flags for the given controller</summary>
        public static global::PhysX.PxControllerBehaviorFlags GetBehaviorFlagsMut1(this ref global::PhysX.PxControllerBehaviorCallback @self_, global::PhysX.PxController* @controller)
        {
            return NativeMethods.PxControllerBehaviorCallback_getBehaviorFlags_mut_1((global::PhysX.PxControllerBehaviorCallback*)Unsafe.AsPointer(ref @self_), @controller);
        }

        /// <summary>Retrieve behavior flags for an obstacle.  When the CCT touches an obstacle, the CCT's behavior w.r.t. this obstacle can be customized by users. This function retrieves the desired PxControllerBehaviorFlag flags capturing the desired behavior.  See comments about deprecated functions at the start of this class  Desired behavior flags for the given obstacle</summary>
        public static global::PhysX.PxControllerBehaviorFlags GetBehaviorFlagsMut2(this ref global::PhysX.PxControllerBehaviorCallback @self_, global::PhysX.PxObstacle* @obstacle)
        {
            return NativeMethods.PxControllerBehaviorCallback_getBehaviorFlags_mut_2((global::PhysX.PxControllerBehaviorCallback*)Unsafe.AsPointer(ref @self_), @obstacle);
        }

        #endregion

        #region PhysX.PxControllerManager(17)

        /// <summary>Releases the controller manager.  This will release all associated controllers and obstacle contexts.  This function is required to be called to release foundation usage.</summary>
        public static void ReleaseMut(this ref global::PhysX.PxControllerManager @self_)
        {
            NativeMethods.PxControllerManager_release_mut((global::PhysX.PxControllerManager*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Returns the scene the manager is adding the controllers to.  The associated physics scene.</summary>
        public static global::PhysX.PxScene* GetScene(this ref global::PhysX.PxControllerManager @self_)
        {
            return NativeMethods.PxControllerManager_getScene((global::PhysX.PxControllerManager*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Returns the number of controllers that are being managed.  The number of controllers.</summary>
        public static uint GetNbControllers(this ref global::PhysX.PxControllerManager @self_)
        {
            return NativeMethods.PxControllerManager_getNbControllers((global::PhysX.PxControllerManager*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Retrieve one of the controllers in the manager.  The controller with the specified index.</summary>
        public static global::PhysX.PxController* GetControllerMut(this ref global::PhysX.PxControllerManager @self_, uint @index)
        {
            return NativeMethods.PxControllerManager_getController_mut((global::PhysX.PxControllerManager*)Unsafe.AsPointer(ref @self_), @index);
        }

        /// <summary>Creates a new character controller.  The new controller</summary>
        public static global::PhysX.PxController* CreateControllerMut(this ref global::PhysX.PxControllerManager @self_, global::PhysX.PxControllerDesc* @desc)
        {
            return NativeMethods.PxControllerManager_createController_mut((global::PhysX.PxControllerManager*)Unsafe.AsPointer(ref @self_), @desc);
        }

        /// <summary>Releases all the controllers that are being managed.</summary>
        public static void PurgeControllersMut(this ref global::PhysX.PxControllerManager @self_)
        {
            NativeMethods.PxControllerManager_purgeControllers_mut((global::PhysX.PxControllerManager*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Retrieves debug data.  The render buffer filled with debug-render data</summary>
        public static global::PhysX.PxRenderBuffer* GetRenderBufferMut(this ref global::PhysX.PxControllerManager @self_)
        {
            return NativeMethods.PxControllerManager_getRenderBuffer_mut((global::PhysX.PxControllerManager*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Sets debug rendering flags</summary>
        public static void SetDebugRenderingFlagsMut(this ref global::PhysX.PxControllerManager @self_, global::PhysX.PxControllerDebugRenderFlags @flags)
        {
            NativeMethods.PxControllerManager_setDebugRenderingFlags_mut((global::PhysX.PxControllerManager*)Unsafe.AsPointer(ref @self_), @flags);
        }

        /// <summary>Returns the number of obstacle contexts that are being managed.  The number of obstacle contexts.</summary>
        public static uint GetNbObstacleContexts(this ref global::PhysX.PxControllerManager @self_)
        {
            return NativeMethods.PxControllerManager_getNbObstacleContexts((global::PhysX.PxControllerManager*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Retrieve one of the obstacle contexts in the manager.  The obstacle context with the specified index.</summary>
        public static global::PhysX.PxObstacleContext* GetObstacleContextMut(this ref global::PhysX.PxControllerManager @self_, uint @index)
        {
            return NativeMethods.PxControllerManager_getObstacleContext_mut((global::PhysX.PxControllerManager*)Unsafe.AsPointer(ref @self_), @index);
        }

        /// <summary>Creates an obstacle context.  New obstacle context</summary>
        public static global::PhysX.PxObstacleContext* CreateObstacleContextMut(this ref global::PhysX.PxControllerManager @self_)
        {
            return NativeMethods.PxControllerManager_createObstacleContext_mut((global::PhysX.PxControllerManager*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Computes character-character interactions.  This function is an optional helper to properly resolve interactions between characters, in case they overlap (which can happen for gameplay reasons, etc).  You should call this once per frame, before your PxController::move() calls. The function will not move the characters directly, but it will compute overlap information for each character that will be used in the next move() call.  You need to provide a proper time value here so that interactions are resolved in a way that do not depend on the framerate.  If you only have one character in the scene, or if you can guarantee your characters will never overlap, then you do not need to call this function.  Releasing the manager will automatically release all the associated obstacle contexts.</summary>
        public static void ComputeInteractionsMut(this ref global::PhysX.PxControllerManager @self_, float @elapsedTime, global::PhysX.PxControllerFilterCallback* @cctFilterCb)
        {
            NativeMethods.PxControllerManager_computeInteractions_mut((global::PhysX.PxControllerManager*)Unsafe.AsPointer(ref @self_), @elapsedTime, @cctFilterCb);
        }

        /// <summary>Enables or disables runtime tessellation.  Large triangles can create accuracy issues in the sweep code, which in turn can lead to characters not sliding smoothly against geometries, or even penetrating them. This feature allows one to reduce those issues by tessellating large triangles at runtime, before performing sweeps against them. The amount of tessellation is controlled by the 'maxEdgeLength' parameter. Any triangle with at least one edge length greater than the maxEdgeLength will get recursively tessellated, until resulting triangles are small enough.  This features only applies to triangle meshes, convex meshes, heightfields and boxes.</summary>
        public static void SetTessellationMut(this ref global::PhysX.PxControllerManager @self_, bool @flag, float @maxEdgeLength)
        {
            NativeMethods.PxControllerManager_setTessellation_mut((global::PhysX.PxControllerManager*)Unsafe.AsPointer(ref @self_), @flag, @maxEdgeLength);
        }

        /// <summary>Enables or disables the overlap recovery module.  The overlap recovery module can be used to depenetrate CCTs from static objects when an overlap is detected. This can happen in three main cases: - when the CCT is directly spawned or teleported in another object - when the CCT algorithm fails due to limited FPU accuracy - when the \"up vector\" is modified, making the rotated CCT shape overlap surrounding objects  When activated, the CCT module will automatically try to resolve the penetration, and move the CCT to a safe place where it does not overlap other objects anymore. This only concerns static objects, dynamic objects are ignored by the recovery module.  When the recovery module is not activated, it is possible for the CCTs to go through static objects. By default, the recovery module is enabled.  The recovery module currently works with all geometries except heightfields.</summary>
        public static void SetOverlapRecoveryModuleMut(this ref global::PhysX.PxControllerManager @self_, bool @flag)
        {
            NativeMethods.PxControllerManager_setOverlapRecoveryModule_mut((global::PhysX.PxControllerManager*)Unsafe.AsPointer(ref @self_), @flag);
        }

        /// <summary>Enables or disables the precise sweeps.  Precise sweeps are more accurate, but also potentially slower than regular sweeps.  By default, precise sweeps are enabled.</summary>
        public static void SetPreciseSweepsMut(this ref global::PhysX.PxControllerManager @self_, bool @flag)
        {
            NativeMethods.PxControllerManager_setPreciseSweeps_mut((global::PhysX.PxControllerManager*)Unsafe.AsPointer(ref @self_), @flag);
        }

        /// <summary>Enables or disables vertical sliding against ceilings.  Geometry is seen as \"ceilings\" when the following condition is met:  dot product(contact normal, up direction) &lt; 0.0f  This flag controls whether characters should slide vertically along the geometry in that case.  By default, sliding is allowed.</summary>
        public static void SetPreventVerticalSlidingAgainstCeilingMut(this ref global::PhysX.PxControllerManager @self_, bool @flag)
        {
            NativeMethods.PxControllerManager_setPreventVerticalSlidingAgainstCeiling_mut((global::PhysX.PxControllerManager*)Unsafe.AsPointer(ref @self_), @flag);
        }

        /// <summary>Shift the origin of the character controllers and obstacle objects by the specified vector.  The positions of all character controllers, obstacle objects and the corresponding data structures will get adjusted to reflect the shifted origin location (the shift vector will get subtracted from all character controller and obstacle object positions).  It is the user's responsibility to keep track of the summed total origin shift and adjust all input/output to/from PhysXCharacterKinematic accordingly.  This call will not automatically shift the PhysX scene and its objects. You need to call PxScene::shiftOrigin() seperately to keep the systems in sync.</summary>
        public static void ShiftOriginMut(this ref global::PhysX.PxControllerManager @self_, global::PhysX.PxVec3* @shift)
        {
            NativeMethods.PxControllerManager_shiftOrigin_mut((global::PhysX.PxControllerManager*)Unsafe.AsPointer(ref @self_), @shift);
        }

        #endregion

        #region PhysX.PxSDFDesc(1)

        /// <summary>Returns true if the descriptor is valid.  true if the current settings are valid</summary>
        public static bool IsValid(this ref global::PhysX.PxSDFDesc @self_)
        {
            return NativeMethods.PxSDFDesc_isValid((global::PhysX.PxSDFDesc*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxConvexMeshDesc(2)

        /// <summary>(re)sets the structure to the default.</summary>
        public static void SetToDefaultMut(this ref global::PhysX.PxConvexMeshDesc @self_)
        {
            NativeMethods.PxConvexMeshDesc_setToDefault_mut((global::PhysX.PxConvexMeshDesc*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Returns true if the descriptor is valid.  True if the current settings are valid</summary>
        public static bool IsValid(this ref global::PhysX.PxConvexMeshDesc @self_)
        {
            return NativeMethods.PxConvexMeshDesc_isValid((global::PhysX.PxConvexMeshDesc*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxTriangleMeshDesc(2)

        /// <summary>(re)sets the structure to the default.</summary>
        public static void SetToDefaultMut(this ref global::PhysX.PxTriangleMeshDesc @self_)
        {
            NativeMethods.PxTriangleMeshDesc_setToDefault_mut((global::PhysX.PxTriangleMeshDesc*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Returns true if the descriptor is valid.  true if the current settings are valid</summary>
        public static bool IsValid(this ref global::PhysX.PxTriangleMeshDesc @self_)
        {
            return NativeMethods.PxTriangleMeshDesc_isValid((global::PhysX.PxTriangleMeshDesc*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxTetrahedronMeshDesc(1)

        public static bool IsValid(this ref global::PhysX.PxTetrahedronMeshDesc @self_)
        {
            return NativeMethods.PxTetrahedronMeshDesc_isValid((global::PhysX.PxTetrahedronMeshDesc*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxSoftBodySimulationDataDesc(1)

        public static bool IsValid(this ref global::PhysX.PxSoftBodySimulationDataDesc @self_)
        {
            return NativeMethods.PxSoftBodySimulationDataDesc_isValid((global::PhysX.PxSoftBodySimulationDataDesc*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxBVH34MidphaseDesc(2)

        /// <summary>Desc initialization to default value.</summary>
        public static void SetToDefaultMut(this ref global::PhysX.PxBVH34MidphaseDesc @self_)
        {
            NativeMethods.PxBVH34MidphaseDesc_setToDefault_mut((global::PhysX.PxBVH34MidphaseDesc*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Returns true if the descriptor is valid.  true if the current settings are valid.</summary>
        public static bool IsValid(this ref global::PhysX.PxBVH34MidphaseDesc @self_)
        {
            return NativeMethods.PxBVH34MidphaseDesc_isValid((global::PhysX.PxBVH34MidphaseDesc*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxMidphaseDesc(3)

        /// <summary>Returns type of midphase mesh structure.  PxMeshMidPhase::Enum</summary>
        public static global::PhysX.PxMeshMidPhase GetType(this ref global::PhysX.PxMidphaseDesc @self_)
        {
            return NativeMethods.PxMidphaseDesc_getType((global::PhysX.PxMidphaseDesc*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Initialize the midphase mesh structure descriptor</summary>
        public static void SetToDefaultMut(this ref global::PhysX.PxMidphaseDesc @self_, global::PhysX.PxMeshMidPhase @type_)
        {
            NativeMethods.PxMidphaseDesc_setToDefault_mut((global::PhysX.PxMidphaseDesc*)Unsafe.AsPointer(ref @self_), @type_);
        }

        /// <summary>Returns true if the descriptor is valid.  true if the current settings are valid.</summary>
        public static bool IsValid(this ref global::PhysX.PxMidphaseDesc @self_)
        {
            return NativeMethods.PxMidphaseDesc_isValid((global::PhysX.PxMidphaseDesc*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxBVHDesc(4)

        /// <summary>Initialize the BVH descriptor</summary>
        public static void SetToDefaultMut(this ref global::PhysX.PxBVHDesc @self_)
        {
            NativeMethods.PxBVHDesc_setToDefault_mut((global::PhysX.PxBVHDesc*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Returns true if the descriptor is valid.  true if the current settings are valid.</summary>
        public static bool IsValid(this ref global::PhysX.PxBVHDesc @self_)
        {
            return NativeMethods.PxBVHDesc_isValid((global::PhysX.PxBVHDesc*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Cooks a bounding volume hierarchy. The results are written to the stream.  PxCookBVH() allows a BVH description to be cooked into a binary stream suitable for loading and performing BVH detection at runtime.  true on success.</summary>
        public static bool PhysPxCookBVH(this ref global::PhysX.PxBVHDesc @desc, global::PhysX.PxOutputStream* @stream)
        {
            return NativeMethods.phys_PxCookBVH((global::PhysX.PxBVHDesc*)Unsafe.AsPointer(ref @desc), @stream);
        }

        /// <summary>Cooks and creates a bounding volume hierarchy without going through a stream.  This method does the same as cookBVH, but the produced BVH is not stored into a stream but is either directly inserted in PxPhysics, or created as a standalone object. Use this method if you are unable to cook offline.  PxInsertionCallback can be obtained through PxPhysics::getPhysicsInsertionCallback() or PxCooking::getStandaloneInsertionCallback().  PxBVH pointer on success</summary>
        public static global::PhysX.PxBVH* PhysPxCreateBVH(this ref global::PhysX.PxBVHDesc @desc, global::PhysX.PxInsertionCallback* @insertionCallback)
        {
            return NativeMethods.phys_PxCreateBVH((global::PhysX.PxBVHDesc*)Unsafe.AsPointer(ref @desc), @insertionCallback);
        }

        #endregion

        #region PhysX.PxCookingParams(7)

        /// <summary>Cooks a convex mesh. The results are written to the stream.  To create a triangle mesh object it is necessary to first 'cook' the mesh data into a form which allows the SDK to perform efficient collision detection.  cookConvexMesh() allows a mesh description to be cooked into a binary stream suitable for loading and performing collision detection at runtime.  The number of vertices and the number of convex polygons in a cooked convex mesh is limited to 255.  If those limits are exceeded in either the user-provided data or the final cooked mesh, an error is reported.  true on success.</summary>
        public static bool PhysPxCookConvexMesh(this ref global::PhysX.PxCookingParams @params, global::PhysX.PxConvexMeshDesc* @desc, global::PhysX.PxOutputStream* @stream, global::PhysX.PxConvexMeshCookingResult* @condition)
        {
            return NativeMethods.phys_PxCookConvexMesh((global::PhysX.PxCookingParams*)Unsafe.AsPointer(ref @params), @desc, @stream, @condition);
        }

        /// <summary>Cooks and creates a convex mesh without going through a stream.  This method does the same as cookConvexMesh, but the produced mesh is not stored into a stream but is either directly inserted in PxPhysics, or created as a standalone object. Use this method if you are unable to cook offline.  PxInsertionCallback can be obtained through PxPhysics::getPhysicsInsertionCallback() or PxCooking::getStandaloneInsertionCallback().  PxConvexMesh pointer on success</summary>
        public static global::PhysX.PxConvexMesh* PhysPxCreateConvexMesh(this ref global::PhysX.PxCookingParams @params, global::PhysX.PxConvexMeshDesc* @desc, global::PhysX.PxInsertionCallback* @insertionCallback, global::PhysX.PxConvexMeshCookingResult* @condition)
        {
            return NativeMethods.phys_PxCreateConvexMesh((global::PhysX.PxCookingParams*)Unsafe.AsPointer(ref @params), @desc, @insertionCallback, @condition);
        }

        /// <summary>Verifies if the convex mesh is valid. Prints an error message for each inconsistency found.  The convex mesh descriptor must contain an already created convex mesh - the vertices, indices and polygons must be provided.  This function should be used if PxConvexFlag::eDISABLE_MESH_VALIDATION is planned to be used in release builds.  true if all the validity conditions hold, false otherwise.</summary>
        public static bool PhysPxValidateConvexMesh(this ref global::PhysX.PxCookingParams @params, global::PhysX.PxConvexMeshDesc* @desc)
        {
            return NativeMethods.phys_PxValidateConvexMesh((global::PhysX.PxCookingParams*)Unsafe.AsPointer(ref @params), @desc);
        }

        /// <summary>Computed hull polygons from given vertices and triangles. Polygons are needed for PxConvexMeshDesc rather than triangles.  Please note that the resulting polygons may have different number of vertices. Some vertices may be removed. The output vertices, indices and polygons must be used to construct a hull.  The provided PxAllocatorCallback does allocate the out array's. It is the user responsibility to deallocated those array's.  true on success</summary>
        public static bool PhysPxComputeHullPolygons(this ref global::PhysX.PxCookingParams @params, global::PhysX.PxSimpleTriangleMesh* @mesh, global::PhysX.PxAllocatorCallback* @inCallback, uint* @nbVerts, global::PhysX.PxVec3** @vertices, uint* @nbIndices, uint** @indices, uint* @nbPolygons, global::PhysX.PxHullPolygon** @hullPolygons)
        {
            return NativeMethods.phys_PxComputeHullPolygons((global::PhysX.PxCookingParams*)Unsafe.AsPointer(ref @params), @mesh, @inCallback, @nbVerts, @vertices, @nbIndices, @indices, @nbPolygons, @hullPolygons);
        }

        /// <summary>Verifies if the triangle mesh is valid. Prints an error message for each inconsistency found.  The following conditions are true for a valid triangle mesh: 1. There are no duplicate vertices (within specified vertexWeldTolerance. See PxCookingParams::meshWeldTolerance) 2. There are no large triangles (within specified PxTolerancesScale.)  true if all the validity conditions hold, false otherwise.</summary>
        public static bool PhysPxValidateTriangleMesh(this ref global::PhysX.PxCookingParams @params, global::PhysX.PxTriangleMeshDesc* @desc)
        {
            return NativeMethods.phys_PxValidateTriangleMesh((global::PhysX.PxCookingParams*)Unsafe.AsPointer(ref @params), @desc);
        }

        /// <summary>Cooks and creates a triangle mesh without going through a stream.  This method does the same as cookTriangleMesh, but the produced mesh is not stored into a stream but is either directly inserted in PxPhysics, or created as a standalone object. Use this method if you are unable to cook offline.  PxInsertionCallback can be obtained through PxPhysics::getPhysicsInsertionCallback() or PxCooking::getStandaloneInsertionCallback().  PxTriangleMesh pointer on success.</summary>
        public static global::PhysX.PxTriangleMesh* PhysPxCreateTriangleMesh(this ref global::PhysX.PxCookingParams @params, global::PhysX.PxTriangleMeshDesc* @desc, global::PhysX.PxInsertionCallback* @insertionCallback, global::PhysX.PxTriangleMeshCookingResult* @condition)
        {
            return NativeMethods.phys_PxCreateTriangleMesh((global::PhysX.PxCookingParams*)Unsafe.AsPointer(ref @params), @desc, @insertionCallback, @condition);
        }

        /// <summary>Cooks a triangle mesh. The results are written to the stream.  To create a triangle mesh object it is necessary to first 'cook' the mesh data into a form which allows the SDK to perform efficient collision detection.  PxCookTriangleMesh() allows a mesh description to be cooked into a binary stream suitable for loading and performing collision detection at runtime.  true on success</summary>
        public static bool PhysPxCookTriangleMesh(this ref global::PhysX.PxCookingParams @params, global::PhysX.PxTriangleMeshDesc* @desc, global::PhysX.PxOutputStream* @stream, global::PhysX.PxTriangleMeshCookingResult* @condition)
        {
            return NativeMethods.phys_PxCookTriangleMesh((global::PhysX.PxCookingParams*)Unsafe.AsPointer(ref @params), @desc, @stream, @condition);
        }

        #endregion

        #region PhysX.PxDefaultMemoryOutputStream(4)

        public static void Delete(this ref global::PhysX.PxDefaultMemoryOutputStream @self_)
        {
            NativeMethods.PxDefaultMemoryOutputStream_delete((global::PhysX.PxDefaultMemoryOutputStream*)Unsafe.AsPointer(ref @self_));
        }

        public static uint WriteMut(this ref global::PhysX.PxDefaultMemoryOutputStream @self_, void* @src, uint @count)
        {
            return NativeMethods.PxDefaultMemoryOutputStream_write_mut((global::PhysX.PxDefaultMemoryOutputStream*)Unsafe.AsPointer(ref @self_), @src, @count);
        }

        public static uint GetSize(this ref global::PhysX.PxDefaultMemoryOutputStream @self_)
        {
            return NativeMethods.PxDefaultMemoryOutputStream_getSize((global::PhysX.PxDefaultMemoryOutputStream*)Unsafe.AsPointer(ref @self_));
        }

        public static byte* GetData(this ref global::PhysX.PxDefaultMemoryOutputStream @self_)
        {
            return NativeMethods.PxDefaultMemoryOutputStream_getData((global::PhysX.PxDefaultMemoryOutputStream*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxDefaultMemoryInputData(4)

        public static uint ReadMut(this ref global::PhysX.PxDefaultMemoryInputData @self_, void* @dest, uint @count)
        {
            return NativeMethods.PxDefaultMemoryInputData_read_mut((global::PhysX.PxDefaultMemoryInputData*)Unsafe.AsPointer(ref @self_), @dest, @count);
        }

        public static uint GetLength(this ref global::PhysX.PxDefaultMemoryInputData @self_)
        {
            return NativeMethods.PxDefaultMemoryInputData_getLength((global::PhysX.PxDefaultMemoryInputData*)Unsafe.AsPointer(ref @self_));
        }

        public static void SeekMut(this ref global::PhysX.PxDefaultMemoryInputData @self_, uint @pos)
        {
            NativeMethods.PxDefaultMemoryInputData_seek_mut((global::PhysX.PxDefaultMemoryInputData*)Unsafe.AsPointer(ref @self_), @pos);
        }

        public static uint Tell(this ref global::PhysX.PxDefaultMemoryInputData @self_)
        {
            return NativeMethods.PxDefaultMemoryInputData_tell((global::PhysX.PxDefaultMemoryInputData*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxDefaultFileOutputStream(3)

        public static void Delete(this ref global::PhysX.PxDefaultFileOutputStream @self_)
        {
            NativeMethods.PxDefaultFileOutputStream_delete((global::PhysX.PxDefaultFileOutputStream*)Unsafe.AsPointer(ref @self_));
        }

        public static uint WriteMut(this ref global::PhysX.PxDefaultFileOutputStream @self_, void* @src, uint @count)
        {
            return NativeMethods.PxDefaultFileOutputStream_write_mut((global::PhysX.PxDefaultFileOutputStream*)Unsafe.AsPointer(ref @self_), @src, @count);
        }

        public static bool IsValidMut(this ref global::PhysX.PxDefaultFileOutputStream @self_)
        {
            return NativeMethods.PxDefaultFileOutputStream_isValid_mut((global::PhysX.PxDefaultFileOutputStream*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxDefaultFileInputData(6)

        public static void Delete(this ref global::PhysX.PxDefaultFileInputData @self_)
        {
            NativeMethods.PxDefaultFileInputData_delete((global::PhysX.PxDefaultFileInputData*)Unsafe.AsPointer(ref @self_));
        }

        public static uint ReadMut(this ref global::PhysX.PxDefaultFileInputData @self_, void* @dest, uint @count)
        {
            return NativeMethods.PxDefaultFileInputData_read_mut((global::PhysX.PxDefaultFileInputData*)Unsafe.AsPointer(ref @self_), @dest, @count);
        }

        public static void SeekMut(this ref global::PhysX.PxDefaultFileInputData @self_, uint @pos)
        {
            NativeMethods.PxDefaultFileInputData_seek_mut((global::PhysX.PxDefaultFileInputData*)Unsafe.AsPointer(ref @self_), @pos);
        }

        public static uint Tell(this ref global::PhysX.PxDefaultFileInputData @self_)
        {
            return NativeMethods.PxDefaultFileInputData_tell((global::PhysX.PxDefaultFileInputData*)Unsafe.AsPointer(ref @self_));
        }

        public static uint GetLength(this ref global::PhysX.PxDefaultFileInputData @self_)
        {
            return NativeMethods.PxDefaultFileInputData_getLength((global::PhysX.PxDefaultFileInputData*)Unsafe.AsPointer(ref @self_));
        }

        public static bool IsValid(this ref global::PhysX.PxDefaultFileInputData @self_)
        {
            return NativeMethods.PxDefaultFileInputData_isValid((global::PhysX.PxDefaultFileInputData*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxJoint(26)

        /// <summary>Set the actors for this joint.  An actor may be NULL to indicate the world frame. At most one of the actors may be NULL.</summary>
        public static void SetActorsMut(this ref global::PhysX.PxJoint @self_, global::PhysX.PxRigidActor* @actor0, global::PhysX.PxRigidActor* @actor1)
        {
            NativeMethods.PxJoint_setActors_mut((global::PhysX.PxJoint*)Unsafe.AsPointer(ref @self_), @actor0, @actor1);
        }

        /// <summary>Get the actors for this joint.</summary>
        public static void GetActors(this ref global::PhysX.PxJoint @self_, global::PhysX.PxRigidActor** @actor0, global::PhysX.PxRigidActor** @actor1)
        {
            NativeMethods.PxJoint_getActors((global::PhysX.PxJoint*)Unsafe.AsPointer(ref @self_), @actor0, @actor1);
        }

        /// <summary>Set the joint local pose for an actor.  This is the relative pose which locates the joint frame relative to the actor.</summary>
        public static void SetLocalPoseMut(this ref global::PhysX.PxJoint @self_, global::PhysX.PxJointActorIndex @actor, global::PhysX.PxTransform* @localPose)
        {
            NativeMethods.PxJoint_setLocalPose_mut((global::PhysX.PxJoint*)Unsafe.AsPointer(ref @self_), @actor, @localPose);
        }

        /// <summary>get the joint local pose for an actor.  return the local pose for this joint</summary>
        public static global::PhysX.PxTransform GetLocalPose(this ref global::PhysX.PxJoint @self_, global::PhysX.PxJointActorIndex @actor)
        {
            return NativeMethods.PxJoint_getLocalPose((global::PhysX.PxJoint*)Unsafe.AsPointer(ref @self_), @actor);
        }

        /// <summary>get the relative pose for this joint  This function returns the pose of the joint frame of actor1 relative to actor0</summary>
        public static global::PhysX.PxTransform GetRelativeTransform(this ref global::PhysX.PxJoint @self_)
        {
            return NativeMethods.PxJoint_getRelativeTransform((global::PhysX.PxJoint*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>get the relative linear velocity of the joint  This function returns the linear velocity of the origin of the constraint frame of actor1, relative to the origin of the constraint frame of actor0. The value is returned in the constraint frame of actor0</summary>
        public static global::PhysX.PxVec3 GetRelativeLinearVelocity(this ref global::PhysX.PxJoint @self_)
        {
            return NativeMethods.PxJoint_getRelativeLinearVelocity((global::PhysX.PxJoint*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>get the relative angular velocity of the joint  This function returns the angular velocity of  actor1 relative to actor0. The value is returned in the constraint frame of actor0</summary>
        public static global::PhysX.PxVec3 GetRelativeAngularVelocity(this ref global::PhysX.PxJoint @self_)
        {
            return NativeMethods.PxJoint_getRelativeAngularVelocity((global::PhysX.PxJoint*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>set the break force for this joint.  if the constraint force or torque on the joint exceeds the specified values, the joint will break, at which point it will not constrain the two actors and the flag PxConstraintFlag::eBROKEN will be set. The force and torque are measured in the joint frame of the first actor</summary>
        public static void SetBreakForceMut(this ref global::PhysX.PxJoint @self_, float @force, float @torque)
        {
            NativeMethods.PxJoint_setBreakForce_mut((global::PhysX.PxJoint*)Unsafe.AsPointer(ref @self_), @force, @torque);
        }

        /// <summary>get the break force for this joint.</summary>
        public static void GetBreakForce(this ref global::PhysX.PxJoint @self_, float* @force, float* @torque)
        {
            NativeMethods.PxJoint_getBreakForce((global::PhysX.PxJoint*)Unsafe.AsPointer(ref @self_), @force, @torque);
        }

        /// <summary>set the constraint flags for this joint.</summary>
        public static void SetConstraintFlagsMut(this ref global::PhysX.PxJoint @self_, global::PhysX.PxConstraintFlags @flags)
        {
            NativeMethods.PxJoint_setConstraintFlags_mut((global::PhysX.PxJoint*)Unsafe.AsPointer(ref @self_), @flags);
        }

        /// <summary>set a constraint flags for this joint to a specified value.</summary>
        public static void SetConstraintFlagMut(this ref global::PhysX.PxJoint @self_, global::PhysX.PxConstraintFlag @flag, bool @value)
        {
            NativeMethods.PxJoint_setConstraintFlag_mut((global::PhysX.PxJoint*)Unsafe.AsPointer(ref @self_), @flag, @value);
        }

        /// <summary>get the constraint flags for this joint.  the constraint flags</summary>
        public static global::PhysX.PxConstraintFlags GetConstraintFlags(this ref global::PhysX.PxJoint @self_)
        {
            return NativeMethods.PxJoint_getConstraintFlags((global::PhysX.PxJoint*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>set the inverse mass scale for actor0.</summary>
        public static void SetInvMassScale0Mut(this ref global::PhysX.PxJoint @self_, float @invMassScale)
        {
            NativeMethods.PxJoint_setInvMassScale0_mut((global::PhysX.PxJoint*)Unsafe.AsPointer(ref @self_), @invMassScale);
        }

        /// <summary>get the inverse mass scale for actor0.  inverse mass scale for actor0</summary>
        public static float GetInvMassScale0(this ref global::PhysX.PxJoint @self_)
        {
            return NativeMethods.PxJoint_getInvMassScale0((global::PhysX.PxJoint*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>set the inverse inertia scale for actor0.</summary>
        public static void SetInvInertiaScale0Mut(this ref global::PhysX.PxJoint @self_, float @invInertiaScale)
        {
            NativeMethods.PxJoint_setInvInertiaScale0_mut((global::PhysX.PxJoint*)Unsafe.AsPointer(ref @self_), @invInertiaScale);
        }

        /// <summary>get the inverse inertia scale for actor0.  inverse inertia scale for actor0</summary>
        public static float GetInvInertiaScale0(this ref global::PhysX.PxJoint @self_)
        {
            return NativeMethods.PxJoint_getInvInertiaScale0((global::PhysX.PxJoint*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>set the inverse mass scale for actor1.</summary>
        public static void SetInvMassScale1Mut(this ref global::PhysX.PxJoint @self_, float @invMassScale)
        {
            NativeMethods.PxJoint_setInvMassScale1_mut((global::PhysX.PxJoint*)Unsafe.AsPointer(ref @self_), @invMassScale);
        }

        /// <summary>get the inverse mass scale for actor1.  inverse mass scale for actor1</summary>
        public static float GetInvMassScale1(this ref global::PhysX.PxJoint @self_)
        {
            return NativeMethods.PxJoint_getInvMassScale1((global::PhysX.PxJoint*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>set the inverse inertia scale for actor1.</summary>
        public static void SetInvInertiaScale1Mut(this ref global::PhysX.PxJoint @self_, float @invInertiaScale)
        {
            NativeMethods.PxJoint_setInvInertiaScale1_mut((global::PhysX.PxJoint*)Unsafe.AsPointer(ref @self_), @invInertiaScale);
        }

        /// <summary>get the inverse inertia scale for actor1.  inverse inertia scale for actor1</summary>
        public static float GetInvInertiaScale1(this ref global::PhysX.PxJoint @self_)
        {
            return NativeMethods.PxJoint_getInvInertiaScale1((global::PhysX.PxJoint*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Retrieves the PxConstraint corresponding to this joint.  This can be used to determine, among other things, the force applied at the joint.  the constraint</summary>
        public static global::PhysX.PxConstraint* GetConstraint(this ref global::PhysX.PxJoint @self_)
        {
            return NativeMethods.PxJoint_getConstraint((global::PhysX.PxJoint*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Sets a name string for the object that can be retrieved with getName().  This is for debugging and is not used by the SDK. The string is not copied by the SDK, only the pointer is stored.</summary>
        public static void SetNameMut(this ref global::PhysX.PxJoint @self_, byte* @name)
        {
            NativeMethods.PxJoint_setName_mut((global::PhysX.PxJoint*)Unsafe.AsPointer(ref @self_), @name);
        }

        /// <summary>Retrieves the name string set with setName().  Name string associated with object.</summary>
        public static byte* GetName(this ref global::PhysX.PxJoint @self_)
        {
            return NativeMethods.PxJoint_getName((global::PhysX.PxJoint*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Deletes the joint.  This call does not wake up the connected rigid bodies.</summary>
        public static void ReleaseMut(this ref global::PhysX.PxJoint @self_)
        {
            NativeMethods.PxJoint_release_mut((global::PhysX.PxJoint*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Retrieves the scene which this joint belongs to.  Owner Scene. NULL if not part of a scene.</summary>
        public static global::PhysX.PxScene* GetScene(this ref global::PhysX.PxJoint @self_)
        {
            return NativeMethods.PxJoint_getScene((global::PhysX.PxJoint*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Helper function to setup a joint's global frame  This replaces the following functions from previous SDK versions:  void NxJointDesc::setGlobalAnchor(const NxVec3 &amp; wsAnchor); void NxJointDesc::setGlobalAxis(const NxVec3 &amp; wsAxis);  The function sets the joint's localPose using world-space input parameters.</summary>
        public static void PhysPxSetJointGlobalFrame(this ref global::PhysX.PxJoint @joint, global::PhysX.PxVec3* @wsAnchor, global::PhysX.PxVec3* @wsAxis)
        {
            NativeMethods.phys_PxSetJointGlobalFrame((global::PhysX.PxJoint*)Unsafe.AsPointer(ref @joint), @wsAnchor, @wsAxis);
        }

        #endregion

        #region PhysX.PxDistanceJoint(17)

        /// <summary>Return the current distance of the joint</summary>
        public static float GetDistance(this ref global::PhysX.PxDistanceJoint @self_)
        {
            return NativeMethods.PxDistanceJoint_getDistance((global::PhysX.PxDistanceJoint*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Set the allowed minimum distance for the joint.  The minimum distance must be no more than the maximum distance  Default 0.0f Range [0, PX_MAX_F32)</summary>
        public static void SetMinDistanceMut(this ref global::PhysX.PxDistanceJoint @self_, float @distance)
        {
            NativeMethods.PxDistanceJoint_setMinDistance_mut((global::PhysX.PxDistanceJoint*)Unsafe.AsPointer(ref @self_), @distance);
        }

        /// <summary>Get the allowed minimum distance for the joint.  the allowed minimum distance</summary>
        public static float GetMinDistance(this ref global::PhysX.PxDistanceJoint @self_)
        {
            return NativeMethods.PxDistanceJoint_getMinDistance((global::PhysX.PxDistanceJoint*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Set the allowed maximum distance for the joint.  The maximum distance must be no less than the minimum distance.  Default 0.0f Range [0, PX_MAX_F32)</summary>
        public static void SetMaxDistanceMut(this ref global::PhysX.PxDistanceJoint @self_, float @distance)
        {
            NativeMethods.PxDistanceJoint_setMaxDistance_mut((global::PhysX.PxDistanceJoint*)Unsafe.AsPointer(ref @self_), @distance);
        }

        /// <summary>Get the allowed maximum distance for the joint.  the allowed maximum distance</summary>
        public static float GetMaxDistance(this ref global::PhysX.PxDistanceJoint @self_)
        {
            return NativeMethods.PxDistanceJoint_getMaxDistance((global::PhysX.PxDistanceJoint*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Set the error tolerance of the joint.</summary>
        public static void SetToleranceMut(this ref global::PhysX.PxDistanceJoint @self_, float @tolerance)
        {
            NativeMethods.PxDistanceJoint_setTolerance_mut((global::PhysX.PxDistanceJoint*)Unsafe.AsPointer(ref @self_), @tolerance);
        }

        /// <summary>Get the error tolerance of the joint.  the distance beyond the joint's [min, max] range before the joint becomes active.  Default 0.25f * PxTolerancesScale::length Range (0, PX_MAX_F32)  This value should be used to ensure that if the minimum distance is zero and the spring function is in use, the rest length of the spring is non-zero.</summary>
        public static float GetTolerance(this ref global::PhysX.PxDistanceJoint @self_)
        {
            return NativeMethods.PxDistanceJoint_getTolerance((global::PhysX.PxDistanceJoint*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Set the strength of the joint spring.  The spring is used if enabled, and the distance exceeds the range [min-error, max+error].  Default 0.0f Range [0, PX_MAX_F32)</summary>
        public static void SetStiffnessMut(this ref global::PhysX.PxDistanceJoint @self_, float @stiffness)
        {
            NativeMethods.PxDistanceJoint_setStiffness_mut((global::PhysX.PxDistanceJoint*)Unsafe.AsPointer(ref @self_), @stiffness);
        }

        /// <summary>Get the strength of the joint spring.  stiffness the spring strength of the joint</summary>
        public static float GetStiffness(this ref global::PhysX.PxDistanceJoint @self_)
        {
            return NativeMethods.PxDistanceJoint_getStiffness((global::PhysX.PxDistanceJoint*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Set the damping of the joint spring.  The spring is used if enabled, and the distance exceeds the range [min-error, max+error].  Default 0.0f Range [0, PX_MAX_F32)</summary>
        public static void SetDampingMut(this ref global::PhysX.PxDistanceJoint @self_, float @damping)
        {
            NativeMethods.PxDistanceJoint_setDamping_mut((global::PhysX.PxDistanceJoint*)Unsafe.AsPointer(ref @self_), @damping);
        }

        /// <summary>Get the damping of the joint spring.  the degree of damping of the joint spring of the joint</summary>
        public static float GetDamping(this ref global::PhysX.PxDistanceJoint @self_)
        {
            return NativeMethods.PxDistanceJoint_getDamping((global::PhysX.PxDistanceJoint*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Set the contact distance for the min &amp; max distance limits.  This is similar to the PxJointLimitParameters::contactDistance parameter for regular limits.  The two most common values are 0 and infinite. Infinite means the internal constraints are always created, resulting in the best simulation quality but slower performance. Zero means the internal constraints are only created when the limits are violated, resulting in best performance but worse simulation quality.  Default 0.0f Range [0, PX_MAX_F32)</summary>
        public static void SetContactDistanceMut(this ref global::PhysX.PxDistanceJoint @self_, float @contactDistance)
        {
            NativeMethods.PxDistanceJoint_setContactDistance_mut((global::PhysX.PxDistanceJoint*)Unsafe.AsPointer(ref @self_), @contactDistance);
        }

        /// <summary>Get the contact distance.  the contact distance</summary>
        public static float GetContactDistance(this ref global::PhysX.PxDistanceJoint @self_)
        {
            return NativeMethods.PxDistanceJoint_getContactDistance((global::PhysX.PxDistanceJoint*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Set the flags specific to the Distance Joint.  Default PxDistanceJointFlag::eMAX_DISTANCE_ENABLED</summary>
        public static void SetDistanceJointFlagsMut(this ref global::PhysX.PxDistanceJoint @self_, global::PhysX.PxDistanceJointFlags @flags)
        {
            NativeMethods.PxDistanceJoint_setDistanceJointFlags_mut((global::PhysX.PxDistanceJoint*)Unsafe.AsPointer(ref @self_), @flags);
        }

        /// <summary>Set a single flag specific to a Distance Joint to true or false.</summary>
        public static void SetDistanceJointFlagMut(this ref global::PhysX.PxDistanceJoint @self_, global::PhysX.PxDistanceJointFlag @flag, bool @value)
        {
            NativeMethods.PxDistanceJoint_setDistanceJointFlag_mut((global::PhysX.PxDistanceJoint*)Unsafe.AsPointer(ref @self_), @flag, @value);
        }

        /// <summary>Get the flags specific to the Distance Joint.  the joint flags</summary>
        public static global::PhysX.PxDistanceJointFlags GetDistanceJointFlags(this ref global::PhysX.PxDistanceJoint @self_)
        {
            return NativeMethods.PxDistanceJoint_getDistanceJointFlags((global::PhysX.PxDistanceJoint*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Returns string name of PxDistanceJoint, used for serialization</summary>
        public static byte* GetConcreteTypeName(this ref global::PhysX.PxDistanceJoint @self_)
        {
            return NativeMethods.PxDistanceJoint_getConcreteTypeName((global::PhysX.PxDistanceJoint*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxContactJoint(13)

        /// <summary>Set the current contact of the joint</summary>
        public static void SetContactMut(this ref global::PhysX.PxContactJoint @self_, global::PhysX.PxVec3* @contact)
        {
            NativeMethods.PxContactJoint_setContact_mut((global::PhysX.PxContactJoint*)Unsafe.AsPointer(ref @self_), @contact);
        }

        /// <summary>Set the current contact normal of the joint</summary>
        public static void SetContactNormalMut(this ref global::PhysX.PxContactJoint @self_, global::PhysX.PxVec3* @contactNormal)
        {
            NativeMethods.PxContactJoint_setContactNormal_mut((global::PhysX.PxContactJoint*)Unsafe.AsPointer(ref @self_), @contactNormal);
        }

        /// <summary>Set the current penetration of the joint</summary>
        public static void SetPenetrationMut(this ref global::PhysX.PxContactJoint @self_, float @penetration)
        {
            NativeMethods.PxContactJoint_setPenetration_mut((global::PhysX.PxContactJoint*)Unsafe.AsPointer(ref @self_), @penetration);
        }

        /// <summary>Return the current contact of the joint</summary>
        public static global::PhysX.PxVec3 GetContact(this ref global::PhysX.PxContactJoint @self_)
        {
            return NativeMethods.PxContactJoint_getContact((global::PhysX.PxContactJoint*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Return the current contact normal of the joint</summary>
        public static global::PhysX.PxVec3 GetContactNormal(this ref global::PhysX.PxContactJoint @self_)
        {
            return NativeMethods.PxContactJoint_getContactNormal((global::PhysX.PxContactJoint*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Return the current penetration value of the joint</summary>
        public static float GetPenetration(this ref global::PhysX.PxContactJoint @self_)
        {
            return NativeMethods.PxContactJoint_getPenetration((global::PhysX.PxContactJoint*)Unsafe.AsPointer(ref @self_));
        }

        public static float GetRestitution(this ref global::PhysX.PxContactJoint @self_)
        {
            return NativeMethods.PxContactJoint_getRestitution((global::PhysX.PxContactJoint*)Unsafe.AsPointer(ref @self_));
        }

        public static void SetRestitutionMut(this ref global::PhysX.PxContactJoint @self_, float @restitution)
        {
            NativeMethods.PxContactJoint_setRestitution_mut((global::PhysX.PxContactJoint*)Unsafe.AsPointer(ref @self_), @restitution);
        }

        public static float GetBounceThreshold(this ref global::PhysX.PxContactJoint @self_)
        {
            return NativeMethods.PxContactJoint_getBounceThreshold((global::PhysX.PxContactJoint*)Unsafe.AsPointer(ref @self_));
        }

        public static void SetBounceThresholdMut(this ref global::PhysX.PxContactJoint @self_, float @bounceThreshold)
        {
            NativeMethods.PxContactJoint_setBounceThreshold_mut((global::PhysX.PxContactJoint*)Unsafe.AsPointer(ref @self_), @bounceThreshold);
        }

        /// <summary>Returns string name of PxContactJoint, used for serialization</summary>
        public static byte* GetConcreteTypeName(this ref global::PhysX.PxContactJoint @self_)
        {
            return NativeMethods.PxContactJoint_getConcreteTypeName((global::PhysX.PxContactJoint*)Unsafe.AsPointer(ref @self_));
        }

        public static void ComputeJacobians(this ref global::PhysX.PxContactJoint @self_, global::PhysX.PxJacobianRow* @jacobian)
        {
            NativeMethods.PxContactJoint_computeJacobians((global::PhysX.PxContactJoint*)Unsafe.AsPointer(ref @self_), @jacobian);
        }

        public static uint GetNbJacobianRows(this ref global::PhysX.PxContactJoint @self_)
        {
            return NativeMethods.PxContactJoint_getNbJacobianRows((global::PhysX.PxContactJoint*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxFixedJoint(1)

        /// <summary>Returns string name of PxFixedJoint, used for serialization</summary>
        public static byte* GetConcreteTypeName(this ref global::PhysX.PxFixedJoint @self_)
        {
            return NativeMethods.PxFixedJoint_getConcreteTypeName((global::PhysX.PxFixedJoint*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxJointLimitParameters(2)

        /// <summary>Returns true if the current settings are valid.  true if the current settings are valid</summary>
        public static bool IsValid(this ref global::PhysX.PxJointLimitParameters @self_)
        {
            return NativeMethods.PxJointLimitParameters_isValid((global::PhysX.PxJointLimitParameters*)Unsafe.AsPointer(ref @self_));
        }

        public static bool IsSoft(this ref global::PhysX.PxJointLimitParameters @self_)
        {
            return NativeMethods.PxJointLimitParameters_isSoft((global::PhysX.PxJointLimitParameters*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxJointLinearLimit(2)

        /// <summary>Returns true if the limit is valid  true if the current settings are valid</summary>
        public static bool IsValid(this ref global::PhysX.PxJointLinearLimit @self_)
        {
            return NativeMethods.PxJointLinearLimit_isValid((global::PhysX.PxJointLinearLimit*)Unsafe.AsPointer(ref @self_));
        }

        public static void Delete(this ref global::PhysX.PxJointLinearLimit @self_)
        {
            NativeMethods.PxJointLinearLimit_delete((global::PhysX.PxJointLinearLimit*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxJointLinearLimitPair(2)

        /// <summary>Returns true if the limit is valid.  true if the current settings are valid</summary>
        public static bool IsValid(this ref global::PhysX.PxJointLinearLimitPair @self_)
        {
            return NativeMethods.PxJointLinearLimitPair_isValid((global::PhysX.PxJointLinearLimitPair*)Unsafe.AsPointer(ref @self_));
        }

        public static void Delete(this ref global::PhysX.PxJointLinearLimitPair @self_)
        {
            NativeMethods.PxJointLinearLimitPair_delete((global::PhysX.PxJointLinearLimitPair*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxJointAngularLimitPair(2)

        /// <summary>Returns true if the limit is valid.  true if the current settings are valid</summary>
        public static bool IsValid(this ref global::PhysX.PxJointAngularLimitPair @self_)
        {
            return NativeMethods.PxJointAngularLimitPair_isValid((global::PhysX.PxJointAngularLimitPair*)Unsafe.AsPointer(ref @self_));
        }

        public static void Delete(this ref global::PhysX.PxJointAngularLimitPair @self_)
        {
            NativeMethods.PxJointAngularLimitPair_delete((global::PhysX.PxJointAngularLimitPair*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxJointLimitCone(2)

        /// <summary>Returns true if the limit is valid.  true if the current settings are valid</summary>
        public static bool IsValid(this ref global::PhysX.PxJointLimitCone @self_)
        {
            return NativeMethods.PxJointLimitCone_isValid((global::PhysX.PxJointLimitCone*)Unsafe.AsPointer(ref @self_));
        }

        public static void Delete(this ref global::PhysX.PxJointLimitCone @self_)
        {
            NativeMethods.PxJointLimitCone_delete((global::PhysX.PxJointLimitCone*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxJointLimitPyramid(2)

        /// <summary>Returns true if the limit is valid.  true if the current settings are valid</summary>
        public static bool IsValid(this ref global::PhysX.PxJointLimitPyramid @self_)
        {
            return NativeMethods.PxJointLimitPyramid_isValid((global::PhysX.PxJointLimitPyramid*)Unsafe.AsPointer(ref @self_));
        }

        public static void Delete(this ref global::PhysX.PxJointLimitPyramid @self_)
        {
            NativeMethods.PxJointLimitPyramid_delete((global::PhysX.PxJointLimitPyramid*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxPrismaticJoint(8)

        /// <summary>returns the displacement of the joint along its axis.</summary>
        public static float GetPosition(this ref global::PhysX.PxPrismaticJoint @self_)
        {
            return NativeMethods.PxPrismaticJoint_getPosition((global::PhysX.PxPrismaticJoint*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>returns the velocity of the joint along its axis</summary>
        public static float GetVelocity(this ref global::PhysX.PxPrismaticJoint @self_)
        {
            return NativeMethods.PxPrismaticJoint_getVelocity((global::PhysX.PxPrismaticJoint*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>sets the joint limit  parameters.  The limit range is [-PX_MAX_F32, PX_MAX_F32], but note that the width of the limit (upper-lower) must also be a valid float.</summary>
        public static void SetLimitMut(this ref global::PhysX.PxPrismaticJoint @self_, global::PhysX.PxJointLinearLimitPair* @anon_param0)
        {
            NativeMethods.PxPrismaticJoint_setLimit_mut((global::PhysX.PxPrismaticJoint*)Unsafe.AsPointer(ref @self_), @anon_param0);
        }

        /// <summary>gets the joint limit  parameters.</summary>
        public static global::PhysX.PxJointLinearLimitPair GetLimit(this ref global::PhysX.PxPrismaticJoint @self_)
        {
            return NativeMethods.PxPrismaticJoint_getLimit((global::PhysX.PxPrismaticJoint*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Set the flags specific to the Prismatic Joint.  Default PxPrismaticJointFlags(0)</summary>
        public static void SetPrismaticJointFlagsMut(this ref global::PhysX.PxPrismaticJoint @self_, global::PhysX.PxPrismaticJointFlags @flags)
        {
            NativeMethods.PxPrismaticJoint_setPrismaticJointFlags_mut((global::PhysX.PxPrismaticJoint*)Unsafe.AsPointer(ref @self_), @flags);
        }

        /// <summary>Set a single flag specific to a Prismatic Joint to true or false.</summary>
        public static void SetPrismaticJointFlagMut(this ref global::PhysX.PxPrismaticJoint @self_, global::PhysX.PxPrismaticJointFlag @flag, bool @value)
        {
            NativeMethods.PxPrismaticJoint_setPrismaticJointFlag_mut((global::PhysX.PxPrismaticJoint*)Unsafe.AsPointer(ref @self_), @flag, @value);
        }

        /// <summary>Get the flags specific to the Prismatic Joint.  the joint flags</summary>
        public static global::PhysX.PxPrismaticJointFlags GetPrismaticJointFlags(this ref global::PhysX.PxPrismaticJoint @self_)
        {
            return NativeMethods.PxPrismaticJoint_getPrismaticJointFlags((global::PhysX.PxPrismaticJoint*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Returns string name of PxPrismaticJoint, used for serialization</summary>
        public static byte* GetConcreteTypeName(this ref global::PhysX.PxPrismaticJoint @self_)
        {
            return NativeMethods.PxPrismaticJoint_getConcreteTypeName((global::PhysX.PxPrismaticJoint*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxRevoluteJoint(14)

        /// <summary>return the angle of the joint, in the range (-2*Pi, 2*Pi]</summary>
        public static float GetAngle(this ref global::PhysX.PxRevoluteJoint @self_)
        {
            return NativeMethods.PxRevoluteJoint_getAngle((global::PhysX.PxRevoluteJoint*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>return the velocity of the joint</summary>
        public static float GetVelocity(this ref global::PhysX.PxRevoluteJoint @self_)
        {
            return NativeMethods.PxRevoluteJoint_getVelocity((global::PhysX.PxRevoluteJoint*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>set the joint limit parameters.  The limit is activated using the flag PxRevoluteJointFlag::eLIMIT_ENABLED  The limit angle range is (-2*Pi, 2*Pi).</summary>
        public static void SetLimitMut(this ref global::PhysX.PxRevoluteJoint @self_, global::PhysX.PxJointAngularLimitPair* @limits)
        {
            NativeMethods.PxRevoluteJoint_setLimit_mut((global::PhysX.PxRevoluteJoint*)Unsafe.AsPointer(ref @self_), @limits);
        }

        /// <summary>get the joint limit parameters.  the joint limit parameters</summary>
        public static global::PhysX.PxJointAngularLimitPair GetLimit(this ref global::PhysX.PxRevoluteJoint @self_)
        {
            return NativeMethods.PxRevoluteJoint_getLimit((global::PhysX.PxRevoluteJoint*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>set the target velocity for the drive model.  The motor will only be able to reach this velocity if the maxForce is sufficiently large. If the joint is spinning faster than this velocity, the motor will actually try to brake (see PxRevoluteJointFlag::eDRIVE_FREESPIN.)  The sign of this variable determines the rotation direction, with positive values going the same way as positive joint angles. Setting a very large target velocity may cause undesirable results.  Range: (-PX_MAX_F32, PX_MAX_F32) Default: 0.0</summary>
        public static void SetDriveVelocityMut(this ref global::PhysX.PxRevoluteJoint @self_, float @velocity, bool @autowake)
        {
            NativeMethods.PxRevoluteJoint_setDriveVelocity_mut((global::PhysX.PxRevoluteJoint*)Unsafe.AsPointer(ref @self_), @velocity, @autowake);
        }

        /// <summary>gets the target velocity for the drive model.  the drive target velocity</summary>
        public static float GetDriveVelocity(this ref global::PhysX.PxRevoluteJoint @self_)
        {
            return NativeMethods.PxRevoluteJoint_getDriveVelocity((global::PhysX.PxRevoluteJoint*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>sets the maximum torque the drive can exert.  The value set here may be used either as an impulse limit or a force limit, depending on the flag PxConstraintFlag::eDRIVE_LIMITS_ARE_FORCES  Range: [0, PX_MAX_F32) Default: PX_MAX_F32</summary>
        public static void SetDriveForceLimitMut(this ref global::PhysX.PxRevoluteJoint @self_, float @limit)
        {
            NativeMethods.PxRevoluteJoint_setDriveForceLimit_mut((global::PhysX.PxRevoluteJoint*)Unsafe.AsPointer(ref @self_), @limit);
        }

        /// <summary>gets the maximum torque the drive can exert.  the torque limit</summary>
        public static float GetDriveForceLimit(this ref global::PhysX.PxRevoluteJoint @self_)
        {
            return NativeMethods.PxRevoluteJoint_getDriveForceLimit((global::PhysX.PxRevoluteJoint*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>sets the gear ratio for the drive.  When setting up the drive constraint, the velocity of the first actor is scaled by this value, and its response to drive torque is scaled down. So if the drive target velocity is zero, the second actor will be driven to the velocity of the first scaled by the gear ratio  Range: [0, PX_MAX_F32) Default: 1.0</summary>
        public static void SetDriveGearRatioMut(this ref global::PhysX.PxRevoluteJoint @self_, float @ratio)
        {
            NativeMethods.PxRevoluteJoint_setDriveGearRatio_mut((global::PhysX.PxRevoluteJoint*)Unsafe.AsPointer(ref @self_), @ratio);
        }

        /// <summary>gets the gear ratio.  the drive gear ratio</summary>
        public static float GetDriveGearRatio(this ref global::PhysX.PxRevoluteJoint @self_)
        {
            return NativeMethods.PxRevoluteJoint_getDriveGearRatio((global::PhysX.PxRevoluteJoint*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>sets the flags specific to the Revolute Joint.  Default PxRevoluteJointFlags(0)</summary>
        public static void SetRevoluteJointFlagsMut(this ref global::PhysX.PxRevoluteJoint @self_, global::PhysX.PxRevoluteJointFlags @flags)
        {
            NativeMethods.PxRevoluteJoint_setRevoluteJointFlags_mut((global::PhysX.PxRevoluteJoint*)Unsafe.AsPointer(ref @self_), @flags);
        }

        /// <summary>sets a single flag specific to a Revolute Joint.</summary>
        public static void SetRevoluteJointFlagMut(this ref global::PhysX.PxRevoluteJoint @self_, global::PhysX.PxRevoluteJointFlag @flag, bool @value)
        {
            NativeMethods.PxRevoluteJoint_setRevoluteJointFlag_mut((global::PhysX.PxRevoluteJoint*)Unsafe.AsPointer(ref @self_), @flag, @value);
        }

        /// <summary>gets the flags specific to the Revolute Joint.  the joint flags</summary>
        public static global::PhysX.PxRevoluteJointFlags GetRevoluteJointFlags(this ref global::PhysX.PxRevoluteJoint @self_)
        {
            return NativeMethods.PxRevoluteJoint_getRevoluteJointFlags((global::PhysX.PxRevoluteJoint*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Returns string name of PxRevoluteJoint, used for serialization</summary>
        public static byte* GetConcreteTypeName(this ref global::PhysX.PxRevoluteJoint @self_)
        {
            return NativeMethods.PxRevoluteJoint_getConcreteTypeName((global::PhysX.PxRevoluteJoint*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxSphericalJoint(8)

        /// <summary>Set the limit cone.  If enabled, the limit cone will constrain the angular movement of the joint to lie within an elliptical cone.  the limit cone</summary>
        public static global::PhysX.PxJointLimitCone GetLimitCone(this ref global::PhysX.PxSphericalJoint @self_)
        {
            return NativeMethods.PxSphericalJoint_getLimitCone((global::PhysX.PxSphericalJoint*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Get the limit cone.</summary>
        public static void SetLimitConeMut(this ref global::PhysX.PxSphericalJoint @self_, global::PhysX.PxJointLimitCone* @limit)
        {
            NativeMethods.PxSphericalJoint_setLimitCone_mut((global::PhysX.PxSphericalJoint*)Unsafe.AsPointer(ref @self_), @limit);
        }

        /// <summary>get the swing angle of the joint from the Y axis</summary>
        public static float GetSwingYAngle(this ref global::PhysX.PxSphericalJoint @self_)
        {
            return NativeMethods.PxSphericalJoint_getSwingYAngle((global::PhysX.PxSphericalJoint*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>get the swing angle of the joint from the Z axis</summary>
        public static float GetSwingZAngle(this ref global::PhysX.PxSphericalJoint @self_)
        {
            return NativeMethods.PxSphericalJoint_getSwingZAngle((global::PhysX.PxSphericalJoint*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Set the flags specific to the Spherical Joint.  Default PxSphericalJointFlags(0)</summary>
        public static void SetSphericalJointFlagsMut(this ref global::PhysX.PxSphericalJoint @self_, global::PhysX.PxSphericalJointFlags @flags)
        {
            NativeMethods.PxSphericalJoint_setSphericalJointFlags_mut((global::PhysX.PxSphericalJoint*)Unsafe.AsPointer(ref @self_), @flags);
        }

        /// <summary>Set a single flag specific to a Spherical Joint to true or false.</summary>
        public static void SetSphericalJointFlagMut(this ref global::PhysX.PxSphericalJoint @self_, global::PhysX.PxSphericalJointFlag @flag, bool @value)
        {
            NativeMethods.PxSphericalJoint_setSphericalJointFlag_mut((global::PhysX.PxSphericalJoint*)Unsafe.AsPointer(ref @self_), @flag, @value);
        }

        /// <summary>Get the flags specific to the Spherical Joint.  the joint flags</summary>
        public static global::PhysX.PxSphericalJointFlags GetSphericalJointFlags(this ref global::PhysX.PxSphericalJoint @self_)
        {
            return NativeMethods.PxSphericalJoint_getSphericalJointFlags((global::PhysX.PxSphericalJoint*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Returns string name of PxSphericalJoint, used for serialization</summary>
        public static byte* GetConcreteTypeName(this ref global::PhysX.PxSphericalJoint @self_)
        {
            return NativeMethods.PxSphericalJoint_getConcreteTypeName((global::PhysX.PxSphericalJoint*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxD6JointDrive(1)

        /// <summary>returns true if the drive is valid</summary>
        public static bool IsValid(this ref global::PhysX.PxD6JointDrive @self_)
        {
            return NativeMethods.PxD6JointDrive_isValid((global::PhysX.PxD6JointDrive*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxD6Joint(26)

        /// <summary>Set the motion type around the specified axis.  Each axis may independently specify that the degree of freedom is locked (blocking relative movement along or around this axis), limited by the corresponding limit, or free.  Default: all degrees of freedom are locked</summary>
        public static void SetMotionMut(this ref global::PhysX.PxD6Joint @self_, global::PhysX.PxD6Axis @axis, global::PhysX.PxD6Motion @type_)
        {
            NativeMethods.PxD6Joint_setMotion_mut((global::PhysX.PxD6Joint*)Unsafe.AsPointer(ref @self_), @axis, @type_);
        }

        /// <summary>Get the motion type around the specified axis.  the motion type around the specified axis</summary>
        public static global::PhysX.PxD6Motion GetMotion(this ref global::PhysX.PxD6Joint @self_, global::PhysX.PxD6Axis @axis)
        {
            return NativeMethods.PxD6Joint_getMotion((global::PhysX.PxD6Joint*)Unsafe.AsPointer(ref @self_), @axis);
        }

        /// <summary>get the twist angle of the joint, in the range (-2*Pi, 2*Pi]</summary>
        public static float GetTwistAngle(this ref global::PhysX.PxD6Joint @self_)
        {
            return NativeMethods.PxD6Joint_getTwistAngle((global::PhysX.PxD6Joint*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>get the swing angle of the joint from the Y axis</summary>
        public static float GetSwingYAngle(this ref global::PhysX.PxD6Joint @self_)
        {
            return NativeMethods.PxD6Joint_getSwingYAngle((global::PhysX.PxD6Joint*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>get the swing angle of the joint from the Z axis</summary>
        public static float GetSwingZAngle(this ref global::PhysX.PxD6Joint @self_)
        {
            return NativeMethods.PxD6Joint_getSwingZAngle((global::PhysX.PxD6Joint*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Set the distance limit for the joint.  A single limit constraints all linear limited degrees of freedom, forming a linear, circular or spherical constraint on motion depending on the number of limited degrees. This is similar to a distance limit.</summary>
        public static void SetDistanceLimitMut(this ref global::PhysX.PxD6Joint @self_, global::PhysX.PxJointLinearLimit* @limit)
        {
            NativeMethods.PxD6Joint_setDistanceLimit_mut((global::PhysX.PxD6Joint*)Unsafe.AsPointer(ref @self_), @limit);
        }

        /// <summary>Get the distance limit for the joint.  the distance limit structure</summary>
        public static global::PhysX.PxJointLinearLimit GetDistanceLimit(this ref global::PhysX.PxD6Joint @self_)
        {
            return NativeMethods.PxD6Joint_getDistanceLimit((global::PhysX.PxD6Joint*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Set the linear limit for a given linear axis.  This function extends the previous setDistanceLimit call with the following features: - there can be a different limit for each linear axis - each limit is defined by two values, i.e. it can now be asymmetric  This can be used to create prismatic joints similar to PxPrismaticJoint, or point-in-quad joints, or point-in-box joints.</summary>
        public static void SetLinearLimitMut(this ref global::PhysX.PxD6Joint @self_, global::PhysX.PxD6Axis @axis, global::PhysX.PxJointLinearLimitPair* @limit)
        {
            NativeMethods.PxD6Joint_setLinearLimit_mut((global::PhysX.PxD6Joint*)Unsafe.AsPointer(ref @self_), @axis, @limit);
        }

        /// <summary>Get the linear limit for a given linear axis.  the linear limit pair structure from desired axis</summary>
        public static global::PhysX.PxJointLinearLimitPair GetLinearLimit(this ref global::PhysX.PxD6Joint @self_, global::PhysX.PxD6Axis @axis)
        {
            return NativeMethods.PxD6Joint_getLinearLimit((global::PhysX.PxD6Joint*)Unsafe.AsPointer(ref @self_), @axis);
        }

        /// <summary>Set the twist limit for the joint.  The twist limit controls the range of motion around the twist axis.  The limit angle range is (-2*Pi, 2*Pi).</summary>
        public static void SetTwistLimitMut(this ref global::PhysX.PxD6Joint @self_, global::PhysX.PxJointAngularLimitPair* @limit)
        {
            NativeMethods.PxD6Joint_setTwistLimit_mut((global::PhysX.PxD6Joint*)Unsafe.AsPointer(ref @self_), @limit);
        }

        /// <summary>Get the twist limit for the joint.  the twist limit structure</summary>
        public static global::PhysX.PxJointAngularLimitPair GetTwistLimit(this ref global::PhysX.PxD6Joint @self_)
        {
            return NativeMethods.PxD6Joint_getTwistLimit((global::PhysX.PxD6Joint*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Set the swing cone limit for the joint.  The cone limit is used if either or both swing axes are limited. The extents are symmetrical and measured in the frame of the parent. If only one swing degree of freedom is limited, the corresponding value from the cone limit defines the limit range.</summary>
        public static void SetSwingLimitMut(this ref global::PhysX.PxD6Joint @self_, global::PhysX.PxJointLimitCone* @limit)
        {
            NativeMethods.PxD6Joint_setSwingLimit_mut((global::PhysX.PxD6Joint*)Unsafe.AsPointer(ref @self_), @limit);
        }

        /// <summary>Get the cone limit for the joint.  the swing limit structure</summary>
        public static global::PhysX.PxJointLimitCone GetSwingLimit(this ref global::PhysX.PxD6Joint @self_)
        {
            return NativeMethods.PxD6Joint_getSwingLimit((global::PhysX.PxD6Joint*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Set a pyramidal swing limit for the joint.  The pyramid limits will only be used in the following cases: - both swing Y and Z are limited. The limit shape is then a pyramid. - Y is limited and Z is locked, or vice versa. The limit shape is an asymmetric angular section, similar to what is supported for the twist axis. The remaining cases (Y limited and Z is free, or vice versa) are not supported.</summary>
        public static void SetPyramidSwingLimitMut(this ref global::PhysX.PxD6Joint @self_, global::PhysX.PxJointLimitPyramid* @limit)
        {
            NativeMethods.PxD6Joint_setPyramidSwingLimit_mut((global::PhysX.PxD6Joint*)Unsafe.AsPointer(ref @self_), @limit);
        }

        /// <summary>Get the pyramidal swing limit for the joint.  the swing limit structure</summary>
        public static global::PhysX.PxJointLimitPyramid GetPyramidSwingLimit(this ref global::PhysX.PxD6Joint @self_)
        {
            return NativeMethods.PxD6Joint_getPyramidSwingLimit((global::PhysX.PxD6Joint*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Set the drive parameters for the specified drive type.  Default The default drive spring and damping values are zero, the force limit is zero, and no flags are set.</summary>
        public static void SetDriveMut(this ref global::PhysX.PxD6Joint @self_, global::PhysX.PxD6Drive @index, global::PhysX.PxD6JointDrive* @drive)
        {
            NativeMethods.PxD6Joint_setDrive_mut((global::PhysX.PxD6Joint*)Unsafe.AsPointer(ref @self_), @index, @drive);
        }

        /// <summary>Get the drive parameters for the specified drive type.</summary>
        public static global::PhysX.PxD6JointDrive GetDrive(this ref global::PhysX.PxD6Joint @self_, global::PhysX.PxD6Drive @index)
        {
            return NativeMethods.PxD6Joint_getDrive((global::PhysX.PxD6Joint*)Unsafe.AsPointer(ref @self_), @index);
        }

        /// <summary>Set the drive goal pose  The goal is relative to the constraint frame of actor[0]  Default the identity transform</summary>
        public static void SetDrivePositionMut(this ref global::PhysX.PxD6Joint @self_, global::PhysX.PxTransform* @pose, bool @autowake)
        {
            NativeMethods.PxD6Joint_setDrivePosition_mut((global::PhysX.PxD6Joint*)Unsafe.AsPointer(ref @self_), @pose, @autowake);
        }

        /// <summary>Get the drive goal pose.</summary>
        public static global::PhysX.PxTransform GetDrivePosition(this ref global::PhysX.PxD6Joint @self_)
        {
            return NativeMethods.PxD6Joint_getDrivePosition((global::PhysX.PxD6Joint*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Set the target goal velocity for drive.  The velocity is measured in the constraint frame of actor[0]</summary>
        public static void SetDriveVelocityMut(this ref global::PhysX.PxD6Joint @self_, global::PhysX.PxVec3* @linear, global::PhysX.PxVec3* @angular, bool @autowake)
        {
            NativeMethods.PxD6Joint_setDriveVelocity_mut((global::PhysX.PxD6Joint*)Unsafe.AsPointer(ref @self_), @linear, @angular, @autowake);
        }

        /// <summary>Get the target goal velocity for joint drive.</summary>
        public static void GetDriveVelocity(this ref global::PhysX.PxD6Joint @self_, global::PhysX.PxVec3* @linear, global::PhysX.PxVec3* @angular)
        {
            NativeMethods.PxD6Joint_getDriveVelocity((global::PhysX.PxD6Joint*)Unsafe.AsPointer(ref @self_), @linear, @angular);
        }

        /// <summary>Set the linear tolerance threshold for projection. Projection is enabled if PxConstraintFlag::ePROJECTION is set for the joint.  If the joint separates by more than this distance along its locked degrees of freedom, the solver will move the bodies to close the distance.  Setting a very small tolerance may result in simulation jitter or other artifacts.  Sometimes it is not possible to project (for example when the joints form a cycle).  Range: [0, PX_MAX_F32) Default: 1e10f</summary>
        public static void SetProjectionLinearToleranceMut(this ref global::PhysX.PxD6Joint @self_, float @tolerance)
        {
            NativeMethods.PxD6Joint_setProjectionLinearTolerance_mut((global::PhysX.PxD6Joint*)Unsafe.AsPointer(ref @self_), @tolerance);
        }

        /// <summary>Get the linear tolerance threshold for projection.  the linear tolerance threshold</summary>
        public static float GetProjectionLinearTolerance(this ref global::PhysX.PxD6Joint @self_)
        {
            return NativeMethods.PxD6Joint_getProjectionLinearTolerance((global::PhysX.PxD6Joint*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Set the angular tolerance threshold for projection. Projection is enabled if PxConstraintFlag::ePROJECTION is set for the joint.  If the joint deviates by more than this angle around its locked angular degrees of freedom, the solver will move the bodies to close the angle.  Setting a very small tolerance may result in simulation jitter or other artifacts.  Sometimes it is not possible to project (for example when the joints form a cycle).  Range: [0,Pi] Default: Pi  Angular projection is implemented only for the case of two or three locked angular degrees of freedom.</summary>
        public static void SetProjectionAngularToleranceMut(this ref global::PhysX.PxD6Joint @self_, float @tolerance)
        {
            NativeMethods.PxD6Joint_setProjectionAngularTolerance_mut((global::PhysX.PxD6Joint*)Unsafe.AsPointer(ref @self_), @tolerance);
        }

        /// <summary>Get the angular tolerance threshold for projection.  tolerance the angular tolerance threshold in radians</summary>
        public static float GetProjectionAngularTolerance(this ref global::PhysX.PxD6Joint @self_)
        {
            return NativeMethods.PxD6Joint_getProjectionAngularTolerance((global::PhysX.PxD6Joint*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Returns string name of PxD6Joint, used for serialization</summary>
        public static byte* GetConcreteTypeName(this ref global::PhysX.PxD6Joint @self_)
        {
            return NativeMethods.PxD6Joint_getConcreteTypeName((global::PhysX.PxD6Joint*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxGearJoint(4)

        /// <summary>Set the hinge/revolute joints connected by the gear joint.  The passed joints can be either PxRevoluteJoint, PxD6Joint or PxArticulationJointReducedCoordinate. The joints must define degrees of freedom around the twist axis. They cannot be null.  Note that these joints are only used to compute the positional error correction term, used to adjust potential drift between jointed actors. The gear joint can run without calling this function, but in that case some visible overlap may develop over time between the teeth of the gear meshes.  Calling this function resets the internal positional error correction term.  true if success</summary>
        public static bool SetHingesMut(this ref global::PhysX.PxGearJoint @self_, global::PhysX.PxBase* @hinge0, global::PhysX.PxBase* @hinge1)
        {
            return NativeMethods.PxGearJoint_setHinges_mut((global::PhysX.PxGearJoint*)Unsafe.AsPointer(ref @self_), @hinge0, @hinge1);
        }

        /// <summary>Set the desired gear ratio.  For two gears with n0 and n1 teeth respectively, the gear ratio is n0/n1.  You may need to use a negative gear ratio if the joint frames of involved actors are not oriented in the same direction.  Calling this function resets the internal positional error correction term.</summary>
        public static void SetGearRatioMut(this ref global::PhysX.PxGearJoint @self_, float @ratio)
        {
            NativeMethods.PxGearJoint_setGearRatio_mut((global::PhysX.PxGearJoint*)Unsafe.AsPointer(ref @self_), @ratio);
        }

        /// <summary>Get the gear ratio.  Current ratio</summary>
        public static float GetGearRatio(this ref global::PhysX.PxGearJoint @self_)
        {
            return NativeMethods.PxGearJoint_getGearRatio((global::PhysX.PxGearJoint*)Unsafe.AsPointer(ref @self_));
        }

        public static byte* GetConcreteTypeName(this ref global::PhysX.PxGearJoint @self_)
        {
            return NativeMethods.PxGearJoint_getConcreteTypeName((global::PhysX.PxGearJoint*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxRackAndPinionJoint(5)

        /// <summary>Set the hinge &amp; prismatic joints connected by the rack &amp; pinion joint.  The passed hinge joint can be either PxRevoluteJoint, PxD6Joint or PxArticulationJointReducedCoordinate. It cannot be null. The passed prismatic joint can be either PxPrismaticJoint or PxD6Joint. It cannot be null.  Note that these joints are only used to compute the positional error correction term, used to adjust potential drift between jointed actors. The rack &amp; pinion joint can run without calling this function, but in that case some visible overlap may develop over time between the teeth of the rack &amp; pinion meshes.  Calling this function resets the internal positional error correction term.  true if success</summary>
        public static bool SetJointsMut(this ref global::PhysX.PxRackAndPinionJoint @self_, global::PhysX.PxBase* @hinge, global::PhysX.PxBase* @prismatic)
        {
            return NativeMethods.PxRackAndPinionJoint_setJoints_mut((global::PhysX.PxRackAndPinionJoint*)Unsafe.AsPointer(ref @self_), @hinge, @prismatic);
        }

        /// <summary>Set the desired ratio directly.  You may need to use a negative gear ratio if the joint frames of involved actors are not oriented in the same direction.  Calling this function resets the internal positional error correction term.</summary>
        public static void SetRatioMut(this ref global::PhysX.PxRackAndPinionJoint @self_, float @ratio)
        {
            NativeMethods.PxRackAndPinionJoint_setRatio_mut((global::PhysX.PxRackAndPinionJoint*)Unsafe.AsPointer(ref @self_), @ratio);
        }

        /// <summary>Get the ratio.  Current ratio</summary>
        public static float GetRatio(this ref global::PhysX.PxRackAndPinionJoint @self_)
        {
            return NativeMethods.PxRackAndPinionJoint_getRatio((global::PhysX.PxRackAndPinionJoint*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Set the desired ratio indirectly.  This is a simple helper function that computes the ratio from passed data:  ratio = (PI*2*nbRackTeeth)/(rackLength*nbPinionTeeth)  Calling this function resets the internal positional error correction term.  true if success</summary>
        public static bool SetDataMut(this ref global::PhysX.PxRackAndPinionJoint @self_, uint @nbRackTeeth, uint @nbPinionTeeth, float @rackLength)
        {
            return NativeMethods.PxRackAndPinionJoint_setData_mut((global::PhysX.PxRackAndPinionJoint*)Unsafe.AsPointer(ref @self_), @nbRackTeeth, @nbPinionTeeth, @rackLength);
        }

        public static byte* GetConcreteTypeName(this ref global::PhysX.PxRackAndPinionJoint @self_)
        {
            return NativeMethods.PxRackAndPinionJoint_getConcreteTypeName((global::PhysX.PxRackAndPinionJoint*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxGroupsMask(3)

        public static void Delete(this ref global::PhysX.PxGroupsMask @self_)
        {
            NativeMethods.PxGroupsMask_delete((global::PhysX.PxGroupsMask*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Gets filtering constant K0 and K1. See comments for PxGroupsMask</summary>
        public static void PhysPxGetFilterConstants(this ref global::PhysX.PxGroupsMask @c0, global::PhysX.PxGroupsMask* @c1)
        {
            NativeMethods.phys_PxGetFilterConstants((global::PhysX.PxGroupsMask*)Unsafe.AsPointer(ref @c0), @c1);
        }

        /// <summary>Setups filtering's K0 and K1 value. See comments for PxGroupsMask</summary>
        public static void PhysPxSetFilterConstants(this ref global::PhysX.PxGroupsMask @c0, global::PhysX.PxGroupsMask* @c1)
        {
            NativeMethods.phys_PxSetFilterConstants((global::PhysX.PxGroupsMask*)Unsafe.AsPointer(ref @c0), @c1);
        }

        #endregion

        #region PhysX.PxFilterOp(2)

        /// <summary>Retrieves filtering operation. See comments for PxGroupsMask</summary>
        public static void PhysPxGetFilterOps(this ref global::PhysX.PxFilterOp @op0, global::PhysX.PxFilterOp* @op1, global::PhysX.PxFilterOp* @op2)
        {
            NativeMethods.phys_PxGetFilterOps((global::PhysX.PxFilterOp*)Unsafe.AsPointer(ref @op0), @op1, @op2);
        }

        /// <summary>Setups filtering operations. See comments for PxGroupsMask</summary>
        public static void PhysPxSetFilterOps(this ref global::PhysX.PxFilterOp @op0, global::PhysX.PxFilterOp* @op1, global::PhysX.PxFilterOp* @op2)
        {
            NativeMethods.phys_PxSetFilterOps((global::PhysX.PxFilterOp*)Unsafe.AsPointer(ref @op0), @op1, @op2);
        }

        #endregion

        #region PhysX.PxDefaultErrorCallback(2)

        public static void Delete(this ref global::PhysX.PxDefaultErrorCallback @self_)
        {
            NativeMethods.PxDefaultErrorCallback_delete((global::PhysX.PxDefaultErrorCallback*)Unsafe.AsPointer(ref @self_));
        }

        public static void ReportErrorMut(this ref global::PhysX.PxDefaultErrorCallback @self_, global::PhysX.PxErrorCode @code, byte* @message, byte* @file, int @line)
        {
            NativeMethods.PxDefaultErrorCallback_reportError_mut((global::PhysX.PxDefaultErrorCallback*)Unsafe.AsPointer(ref @self_), @code, @message, @file, @line);
        }

        #endregion

        #region PhysX.PxMassProperties(2)

        /// <summary>Translate the center of mass by a given vector and adjust the inertia tensor accordingly.</summary>
        public static void TranslateMut(this ref global::PhysX.PxMassProperties @self_, global::PhysX.PxVec3* @t)
        {
            NativeMethods.PxMassProperties_translate_mut((global::PhysX.PxMassProperties*)Unsafe.AsPointer(ref @self_), @t);
        }

        /// <summary>Sum up individual mass properties.  The summed up mass properties.</summary>
        public static global::PhysX.PxMassProperties Sum(this ref global::PhysX.PxMassProperties @props, global::PhysX.PxTransform* @transforms, uint @count)
        {
            return NativeMethods.PxMassProperties_sum((global::PhysX.PxMassProperties*)Unsafe.AsPointer(ref @props), @transforms, @count);
        }

        #endregion

        #region PhysX.PxMeshOverlapUtil(5)

        public static void Delete(this ref global::PhysX.PxMeshOverlapUtil @self_)
        {
            NativeMethods.PxMeshOverlapUtil_delete((global::PhysX.PxMeshOverlapUtil*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Find the mesh triangles which touch the specified geometry object.  Number of overlaps found. Triangle indices can then be accessed through the [`getResults`]() function.</summary>
        public static uint FindOverlapMut(this ref global::PhysX.PxMeshOverlapUtil @self_, global::PhysX.PxGeometry* @geom, global::PhysX.PxTransform* @geomPose, global::PhysX.PxTriangleMeshGeometry* @meshGeom, global::PhysX.PxTransform* @meshPose)
        {
            return NativeMethods.PxMeshOverlapUtil_findOverlap_mut((global::PhysX.PxMeshOverlapUtil*)Unsafe.AsPointer(ref @self_), @geom, @geomPose, @meshGeom, @meshPose);
        }

        /// <summary>Find the height field triangles which touch the specified geometry object.  Number of overlaps found. Triangle indices can then be accessed through the [`getResults`]() function.</summary>
        public static uint FindOverlapMut1(this ref global::PhysX.PxMeshOverlapUtil @self_, global::PhysX.PxGeometry* @geom, global::PhysX.PxTransform* @geomPose, global::PhysX.PxHeightFieldGeometry* @hfGeom, global::PhysX.PxTransform* @hfPose)
        {
            return NativeMethods.PxMeshOverlapUtil_findOverlap_mut_1((global::PhysX.PxMeshOverlapUtil*)Unsafe.AsPointer(ref @self_), @geom, @geomPose, @hfGeom, @hfPose);
        }

        /// <summary>Retrieves array of triangle indices after a findOverlap call.  Indices of touched triangles</summary>
        public static uint* GetResults(this ref global::PhysX.PxMeshOverlapUtil @self_)
        {
            return NativeMethods.PxMeshOverlapUtil_getResults((global::PhysX.PxMeshOverlapUtil*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Retrieves number of triangle indices after a findOverlap call.  Number of touched triangles</summary>
        public static uint GetNbResults(this ref global::PhysX.PxMeshOverlapUtil @self_)
        {
            return NativeMethods.PxMeshOverlapUtil_getNbResults((global::PhysX.PxMeshOverlapUtil*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxDefaultCpuDispatcher(3)

        /// <summary>Deletes the dispatcher.  Do not keep a reference to the deleted instance.</summary>
        public static void ReleaseMut(this ref global::PhysX.PxDefaultCpuDispatcher @self_)
        {
            NativeMethods.PxDefaultCpuDispatcher_release_mut((global::PhysX.PxDefaultCpuDispatcher*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Enables profiling at task level.  By default enabled only in profiling builds.</summary>
        public static void SetRunProfiledMut(this ref global::PhysX.PxDefaultCpuDispatcher @self_, bool @runProfiled)
        {
            NativeMethods.PxDefaultCpuDispatcher_setRunProfiled_mut((global::PhysX.PxDefaultCpuDispatcher*)Unsafe.AsPointer(ref @self_), @runProfiled);
        }

        /// <summary>Checks if profiling is enabled at task level.  True if tasks should be profiled.</summary>
        public static bool GetRunProfiled(this ref global::PhysX.PxDefaultCpuDispatcher @self_)
        {
            return NativeMethods.PxDefaultCpuDispatcher_getRunProfiled((global::PhysX.PxDefaultCpuDispatcher*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxBatchQueryExt(5)

        public static void ReleaseMut(this ref global::PhysX.PxBatchQueryExt @self_)
        {
            NativeMethods.PxBatchQueryExt_release_mut((global::PhysX.PxBatchQueryExt*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Performs a raycast against objects in the scene.  Touching hits are not ordered.  Shooting a ray from within an object leads to different results depending on the shape type. Please check the details in article SceneQuery. User can ignore such objects by using one of the provided filter mechanisms.  This query call writes to a list associated with the query object and is NOT thread safe (for performance reasons there is no lock and overlapping writes from different threads may result in undefined behavior).  Returns a PxRaycastBuffer pointer that will store the result of the query after execute() is completed. This will point either to an element of the buffer allocated on construction or to a user buffer passed to the constructor.</summary>
        public static global::PhysX.PxRaycastBuffer* RaycastMut(this ref global::PhysX.PxBatchQueryExt @self_, global::PhysX.PxVec3* @origin, global::PhysX.PxVec3* @unitDir, float @distance, ushort @maxNbTouches, global::PhysX.PxHitFlags @hitFlags, global::PhysX.PxQueryFilterData* @filterData, global::PhysX.PxQueryCache* @cache)
        {
            return NativeMethods.PxBatchQueryExt_raycast_mut((global::PhysX.PxBatchQueryExt*)Unsafe.AsPointer(ref @self_), @origin, @unitDir, @distance, @maxNbTouches, @hitFlags, @filterData, @cache);
        }

        /// <summary>Performs a sweep test against objects in the scene.  Touching hits are not ordered.  If a shape from the scene is already overlapping with the query shape in its starting position, the hit is returned unless eASSUME_NO_INITIAL_OVERLAP was specified.  This query call writes to a list associated with the query object and is NOT thread safe (for performance reasons there is no lock and overlapping writes from different threads may result in undefined behavior).  Returns a PxSweepBuffer pointer that will store the result of the query after execute() is completed. This will point either to an element of the buffer allocated on construction or to a user buffer passed to the constructor.</summary>
        public static global::PhysX.PxSweepBuffer* SweepMut(this ref global::PhysX.PxBatchQueryExt @self_, global::PhysX.PxGeometry* @geometry, global::PhysX.PxTransform* @pose, global::PhysX.PxVec3* @unitDir, float @distance, ushort @maxNbTouches, global::PhysX.PxHitFlags @hitFlags, global::PhysX.PxQueryFilterData* @filterData, global::PhysX.PxQueryCache* @cache, float @inflation)
        {
            return NativeMethods.PxBatchQueryExt_sweep_mut((global::PhysX.PxBatchQueryExt*)Unsafe.AsPointer(ref @self_), @geometry, @pose, @unitDir, @distance, @maxNbTouches, @hitFlags, @filterData, @cache, @inflation);
        }

        /// <summary>Performs an overlap test of a given geometry against objects in the scene.  Filtering: returning eBLOCK from user filter for overlap queries will cause a warning (see [`PxQueryHitType`]).  eBLOCK should not be returned from user filters for overlap(). Doing so will result in undefined behavior, and a warning will be issued.  If the PxQueryFlag::eNO_BLOCK flag is set, the eBLOCK will instead be automatically converted to an eTOUCH and the warning suppressed.  This query call writes to a list associated with the query object and is NOT thread safe (for performance reasons there is no lock and overlapping writes from different threads may result in undefined behavior).  Returns a PxOverlapBuffer pointer that will store the result of the query after execute() is completed. This will point either to an element of the buffer allocated on construction or to a user buffer passed to the constructor.</summary>
        public static global::PhysX.PxOverlapBuffer* OverlapMut(this ref global::PhysX.PxBatchQueryExt @self_, global::PhysX.PxGeometry* @geometry, global::PhysX.PxTransform* @pose, ushort @maxNbTouches, global::PhysX.PxQueryFilterData* @filterData, global::PhysX.PxQueryCache* @cache)
        {
            return NativeMethods.PxBatchQueryExt_overlap_mut((global::PhysX.PxBatchQueryExt*)Unsafe.AsPointer(ref @self_), @geometry, @pose, @maxNbTouches, @filterData, @cache);
        }

        public static void ExecuteMut(this ref global::PhysX.PxBatchQueryExt @self_)
        {
            NativeMethods.PxBatchQueryExt_execute_mut((global::PhysX.PxBatchQueryExt*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxCustomSceneQuerySystem(4)

        /// <summary>Adds a pruner to the system.  The internal PhysX scene-query system uses two regular pruners (one for static shapes, one for dynamic shapes) and an optional compound pruner. Our custom scene query system supports an arbitrary number of regular pruners.  This can be useful to reduce the load on each pruner, in particular during updates, when internal trees are rebuilt in the background. On the other hand this implementation simply iterates over all created pruners to perform queries, so their cost might increase if a large number of pruners is used.  In any case this serves as an example of how the PxSceneQuerySystem API can be used to customize scene queries.  A pruner index</summary>
        public static uint AddPrunerMut(this ref global::PhysX.PxCustomSceneQuerySystem @self_, global::PhysX.PxPruningStructureType @primaryType, global::PhysX.PxDynamicTreeSecondaryPruner @secondaryType, uint @preallocated)
        {
            return NativeMethods.PxCustomSceneQuerySystem_addPruner_mut((global::PhysX.PxCustomSceneQuerySystem*)Unsafe.AsPointer(ref @self_), @primaryType, @secondaryType, @preallocated);
        }

        /// <summary>Start custom build-steps for all pruners  This function is used in combination with customBuildstep() and finishCustomBuildstep() to let users take control of the pruners' build-step &amp; commit calls - basically the pruners' update functions. These functions should be used with the PxSceneQueryUpdateMode::eBUILD_DISABLED_COMMIT_DISABLED update mode, otherwise the build-steps will happen automatically in fetchResults. For N pruners it can be more efficient to use these custom build-step functions to perform the updates in parallel:  - call startCustomBuildstep() first (one synchronous call) - for each pruner, call customBuildstep() (asynchronous calls from multiple threads) - once it is done, call finishCustomBuildstep() to finish the update (synchronous call)  The multi-threaded update is more efficient here than what it is in PxScene, because the \"flushShapes()\" call is also multi-threaded (while it is not in PxScene).  Note that users are responsible for locks here, and these calls should not overlap with other SQ calls. In particular one should not add new objects to the SQ system or perform queries while these calls are happening.  The number of pruners in the system.</summary>
        public static uint StartCustomBuildstepMut(this ref global::PhysX.PxCustomSceneQuerySystem @self_)
        {
            return NativeMethods.PxCustomSceneQuerySystem_startCustomBuildstep_mut((global::PhysX.PxCustomSceneQuerySystem*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Perform a custom build-step for a given pruner.</summary>
        public static void CustomBuildstepMut(this ref global::PhysX.PxCustomSceneQuerySystem @self_, uint @index)
        {
            NativeMethods.PxCustomSceneQuerySystem_customBuildstep_mut((global::PhysX.PxCustomSceneQuerySystem*)Unsafe.AsPointer(ref @self_), @index);
        }

        /// <summary>Finish custom build-steps  Call this function once after all the customBuildstep() calls are done.</summary>
        public static void FinishCustomBuildstepMut(this ref global::PhysX.PxCustomSceneQuerySystem @self_)
        {
            NativeMethods.PxCustomSceneQuerySystem_finishCustomBuildstep_mut((global::PhysX.PxCustomSceneQuerySystem*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxCustomSceneQuerySystemAdapter(3)

        public static void Delete(this ref global::PhysX.PxCustomSceneQuerySystemAdapter @self_)
        {
            NativeMethods.PxCustomSceneQuerySystemAdapter_delete((global::PhysX.PxCustomSceneQuerySystemAdapter*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Gets a pruner index for an actor/shape.  This user-defined function tells the system in which pruner a given actor/shape should go.  The returned index must be valid, i.e. it must have been previously returned to users by PxCustomSceneQuerySystem::addPruner.  A pruner index for this actor/shape.</summary>
        public static uint GetPrunerIndex(this ref global::PhysX.PxCustomSceneQuerySystemAdapter @self_, global::PhysX.PxRigidActor* @actor, global::PhysX.PxShape* @shape)
        {
            return NativeMethods.PxCustomSceneQuerySystemAdapter_getPrunerIndex((global::PhysX.PxCustomSceneQuerySystemAdapter*)Unsafe.AsPointer(ref @self_), @actor, @shape);
        }

        /// <summary>Pruner filtering callback.  This will be called for each query to validate whether it should process a given pruner.  True to process the pruner, false to skip it entirely</summary>
        public static bool ProcessPruner(this ref global::PhysX.PxCustomSceneQuerySystemAdapter @self_, uint @prunerIndex, global::PhysX.PxQueryThreadContext* @context, global::PhysX.PxQueryFilterData* @filterData, global::PhysX.PxQueryFilterCallback* @filterCall)
        {
            return NativeMethods.PxCustomSceneQuerySystemAdapter_processPruner((global::PhysX.PxCustomSceneQuerySystemAdapter*)Unsafe.AsPointer(ref @self_), @prunerIndex, @context, @filterData, @filterCall);
        }

        #endregion

        #region PhysX.PxPoissonSampler(4)

        /// <summary>Sets the sampling radius  Returns true if the sampling was successful and false if there was a problem. Usually an internal overflow is the problem for very big meshes or very small sampling radii.</summary>
        public static bool SetSamplingRadiusMut(this ref global::PhysX.PxPoissonSampler @self_, float @samplingRadius)
        {
            return NativeMethods.PxPoissonSampler_setSamplingRadius_mut((global::PhysX.PxPoissonSampler*)Unsafe.AsPointer(ref @self_), @samplingRadius);
        }

        /// <summary>Adds new Poisson Samples inside the sphere specified</summary>
        public static void AddSamplesInSphereMut(this ref global::PhysX.PxPoissonSampler @self_, global::PhysX.PxVec3* @sphereCenter, float @sphereRadius, bool @createVolumeSamples)
        {
            NativeMethods.PxPoissonSampler_addSamplesInSphere_mut((global::PhysX.PxPoissonSampler*)Unsafe.AsPointer(ref @self_), @sphereCenter, @sphereRadius, @createVolumeSamples);
        }

        /// <summary>Adds new Poisson Samples inside the box specified</summary>
        public static void AddSamplesInBoxMut(this ref global::PhysX.PxPoissonSampler @self_, global::PhysX.PxBounds3* @axisAlignedBox, global::PhysX.PxQuat* @boxOrientation, bool @createVolumeSamples)
        {
            NativeMethods.PxPoissonSampler_addSamplesInBox_mut((global::PhysX.PxPoissonSampler*)Unsafe.AsPointer(ref @self_), @axisAlignedBox, @boxOrientation, @createVolumeSamples);
        }

        public static void Delete(this ref global::PhysX.PxPoissonSampler @self_)
        {
            NativeMethods.PxPoissonSampler_delete((global::PhysX.PxPoissonSampler*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxTriangleMeshPoissonSampler(2)

        /// <summary>Checks whether a point is inside the triangle mesh  Returns true if the point is inside the triangle mesh</summary>
        public static bool IsPointInTriangleMeshMut(this ref global::PhysX.PxTriangleMeshPoissonSampler @self_, global::PhysX.PxVec3* @p)
        {
            return NativeMethods.PxTriangleMeshPoissonSampler_isPointInTriangleMesh_mut((global::PhysX.PxTriangleMeshPoissonSampler*)Unsafe.AsPointer(ref @self_), @p);
        }

        public static void Delete(this ref global::PhysX.PxTriangleMeshPoissonSampler @self_)
        {
            NativeMethods.PxTriangleMeshPoissonSampler_delete((global::PhysX.PxTriangleMeshPoissonSampler*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxRepXObject(1)

        public static bool IsValid(this ref global::PhysX.PxRepXObject @self_)
        {
            return NativeMethods.PxRepXObject_isValid((global::PhysX.PxRepXObject*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxRepXSerializer(3)

        /// <summary>The type this Serializer is meant to operate on.</summary>
        public static byte* GetTypeNameMut(this ref global::PhysX.PxRepXSerializer @self_)
        {
            return NativeMethods.PxRepXSerializer_getTypeName_mut((global::PhysX.PxRepXSerializer*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Convert from a RepX object to a key-value pair hierarchy</summary>
        public static void ObjectToFileMut(this ref global::PhysX.PxRepXSerializer @self_, global::PhysX.PxRepXObject* @inLiveObject, global::PhysX.PxCollection* @inCollection, global::PhysX.XmlWriter* @inWriter, global::PhysX.MemoryBuffer* @inTempBuffer, global::PhysX.PxRepXInstantiationArgs* @inArgs)
        {
            NativeMethods.PxRepXSerializer_objectToFile_mut((global::PhysX.PxRepXSerializer*)Unsafe.AsPointer(ref @self_), @inLiveObject, @inCollection, @inWriter, @inTempBuffer, @inArgs);
        }

        /// <summary>Convert from a descriptor to a live object.  Must be an object of this Serializer type.  The new live object.  It can be an invalid object if the instantiation cannot take place.</summary>
        public static global::PhysX.PxRepXObject FileToObjectMut(this ref global::PhysX.PxRepXSerializer @self_, global::PhysX.XmlReader* @inReader, global::PhysX.XmlMemoryAllocator* @inAllocator, global::PhysX.PxRepXInstantiationArgs* @inArgs, global::PhysX.PxCollection* @inCollection)
        {
            return NativeMethods.PxRepXSerializer_fileToObject_mut((global::PhysX.PxRepXSerializer*)Unsafe.AsPointer(ref @self_), @inReader, @inAllocator, @inArgs, @inCollection);
        }

        #endregion

        #region PhysX.PxPvd(6)

        /// <summary>Connects the SDK to the PhysX Visual Debugger application.</summary>
        public static bool ConnectMut(this ref global::PhysX.PxPvd @self_, global::PhysX.PxPvdTransport* @transport, global::PhysX.PxPvdInstrumentationFlags @flags)
        {
            return NativeMethods.PxPvd_connect_mut((global::PhysX.PxPvd*)Unsafe.AsPointer(ref @self_), @transport, @flags);
        }

        /// <summary>Disconnects the SDK from the PhysX Visual Debugger application. If we are still connected, this will kill the entire debugger connection.</summary>
        public static void DisconnectMut(this ref global::PhysX.PxPvd @self_)
        {
            NativeMethods.PxPvd_disconnect_mut((global::PhysX.PxPvd*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Return if connection to PVD is created.</summary>
        public static bool IsConnectedMut(this ref global::PhysX.PxPvd @self_, bool @useCachedStatus)
        {
            return NativeMethods.PxPvd_isConnected_mut((global::PhysX.PxPvd*)Unsafe.AsPointer(ref @self_), @useCachedStatus);
        }

        /// <summary>returns the PVD data transport returns NULL if no transport is present.</summary>
        public static global::PhysX.PxPvdTransport* GetTransportMut(this ref global::PhysX.PxPvd @self_)
        {
            return NativeMethods.PxPvd_getTransport_mut((global::PhysX.PxPvd*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Retrieves the PVD flags. See PxPvdInstrumentationFlags.</summary>
        public static global::PhysX.PxPvdInstrumentationFlags GetInstrumentationFlagsMut(this ref global::PhysX.PxPvd @self_)
        {
            return NativeMethods.PxPvd_getInstrumentationFlags_mut((global::PhysX.PxPvd*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Releases the pvd instance.</summary>
        public static void ReleaseMut(this ref global::PhysX.PxPvd @self_)
        {
            NativeMethods.PxPvd_release_mut((global::PhysX.PxPvd*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

        #region PhysX.PxPvdTransport(9)

        /// <summary>Connects to the Visual Debugger application. return True if success</summary>
        public static bool ConnectMut(this ref global::PhysX.PxPvdTransport @self_)
        {
            return NativeMethods.PxPvdTransport_connect_mut((global::PhysX.PxPvdTransport*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Disconnects from the Visual Debugger application. If we are still connected, this will kill the entire debugger connection.</summary>
        public static void DisconnectMut(this ref global::PhysX.PxPvdTransport @self_)
        {
            NativeMethods.PxPvdTransport_disconnect_mut((global::PhysX.PxPvdTransport*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Return if connection to PVD is created.</summary>
        public static bool IsConnectedMut(this ref global::PhysX.PxPvdTransport @self_)
        {
            return NativeMethods.PxPvdTransport_isConnected_mut((global::PhysX.PxPvdTransport*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>write bytes to the other endpoint of the connection. should lock before witre. If an error occurs this connection will assume to be dead.</summary>
        public static bool WriteMut(this ref global::PhysX.PxPvdTransport @self_, byte* @inBytes, uint @inLength)
        {
            return NativeMethods.PxPvdTransport_write_mut((global::PhysX.PxPvdTransport*)Unsafe.AsPointer(ref @self_), @inBytes, @inLength);
        }

        public static global::PhysX.PxPvdTransport* LockMut(this ref global::PhysX.PxPvdTransport @self_)
        {
            return NativeMethods.PxPvdTransport_lock_mut((global::PhysX.PxPvdTransport*)Unsafe.AsPointer(ref @self_));
        }

        public static void UnlockMut(this ref global::PhysX.PxPvdTransport @self_)
        {
            NativeMethods.PxPvdTransport_unlock_mut((global::PhysX.PxPvdTransport*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>send any data and block until we know it is at least on the wire.</summary>
        public static void FlushMut(this ref global::PhysX.PxPvdTransport @self_)
        {
            NativeMethods.PxPvdTransport_flush_mut((global::PhysX.PxPvdTransport*)Unsafe.AsPointer(ref @self_));
        }

        /// <summary>Return size of written data.</summary>
        public static ulong GetWrittenDataSizeMut(this ref global::PhysX.PxPvdTransport @self_)
        {
            return NativeMethods.PxPvdTransport_getWrittenDataSize_mut((global::PhysX.PxPvdTransport*)Unsafe.AsPointer(ref @self_));
        }

        public static void ReleaseMut(this ref global::PhysX.PxPvdTransport @self_)
        {
            NativeMethods.PxPvdTransport_release_mut((global::PhysX.PxPvdTransport*)Unsafe.AsPointer(ref @self_));
        }

        #endregion

    }
}
